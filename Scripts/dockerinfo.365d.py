#!/usr/local/bin/python
# -*- encoding: utf-8 -*-

# <bitbar.title>DockerInfo</bitbar.title>
# <bitbar.author>Frak Nuaimy</bitbar.author>
# <bitbar.author.github>frakman1</bitbar.author.github>
# <bitbar.image>https://i.imgur.com/xoztllr.png</bitbar.image>
# <bitbar.desc>Manage your Local and Remote docker server</bitbar.desc>
# <bitbar.dependencies>python,pexpect</bitbar.dependencies>
# <bitbar.version>v1.0</bitbar.version>

import os, sys
reload(sys)
sys.setdefaultencoding('utf8')
import argparse
import subprocess
from subprocess import check_output
import json
import re
from time import sleep
import logging
#import yaml
import string
import time
from pipes import quote
import urllib2
import socket
import platform
import base64


ME_PATH = os.path.realpath(__file__)

start = time.time()

dockerinfodata_path = os.path.dirname(os.path.abspath(__file__)) +'/'+"dockerinfo_data"
if not os.path.exists(dockerinfodata_path) :
    os.mkdir( dockerinfodata_path, 0755 );
local_path = dockerinfodata_path+'/'+"local.txt"
remote_path = dockerinfodata_path+'/'+"remote.txt"
ip_path = dockerinfodata_path+'/'+"ip.txt"
user_path = dockerinfodata_path+'/'+"user.txt"
passwd_path = dockerinfodata_path+'/'+"passwd.txt"
daemon_path = dockerinfodata_path+'/'+"daemon.txt"
ssh_method_path = dockerinfodata_path+'/'+"ssh_method.txt"
cache_path = dockerinfodata_path+'/'+"cache.txt"
usecache_path = dockerinfodata_path+'/'+"usecache.txt"

os.environ["PATH"] += os.pathsep + '/usr/local/bin'

DOCKER_PATH = 'docker'
SSH = ' -H ssh://<user>@<ip>:22 '
DOCKERPS_QUICK = DOCKER_PATH + " ps -a --format '{{.ID}}'"
DOCKERPSUP_QUICK = DOCKER_PATH + " ps --format '{{.ID}}'"
DOCKERPS_QUICK_SSH = DOCKER_PATH + SSH + " ps -a --format '{{.ID}}'"
DOCKERPSUP_QUICK_SSH = DOCKER_PATH + SSH + " ps --format '{{.ID}}'"
DOCKERPS_CMD_LOCAL = DOCKER_PATH + " ps -a --format '{{.ID}}^^{{.Image}}^^{{.Command}}^^{{.Status}}^^{{.Names}}^^{{.Size}}^^{{.Ports}}'"
DOCKERPS_CMD_SSH = DOCKER_PATH + SSH + " ps -a --format '{{.ID}}^^{{.Image}}^^{{.Command}}^^{{.Status}}^^{{.Names}}^^{{.Ports}}'"
DOCKERPS_CMD_REMOTE = DOCKER_PATH + " ps -a --format '{{.ID}}^^{{.Image}}^^{{.Command}}^^{{.Status}}^^{{.Names}}'"
DOCKER_GETIMGID = DOCKER_PATH + " inspect --format='{{.Image}}' "
DOCKERIMAGES_CMD = DOCKER_PATH + ' images --format "{{.Repository}}^^{{.Tag}}^^{{.ID}}^^{{.CreatedSince}}^^{{.Size}}"'
DOCKERIMAGES_CMD_SSH = DOCKER_PATH + SSH + ' images --format "{{.Repository}}^^{{.Tag}}^^{{.ID}}^^{{.CreatedSince}}^^{{.Size}}"'
DOCKER_LOGS =  DOCKER_PATH + " logs -t --tail 20 "
DOCKER_LOGS_SSH =  DOCKER_PATH + " -H ssh://<user>@<ip>:22" + " logs -t --tail 20 "
DOCKER_STATS = DOCKER_PATH + " stats --no-stream"
DOCKER_STATS_SSH = DOCKER_PATH + SSH + " stats --no-stream"

REMOTE_DAEMON_PATH = '/etc/docker/daemon.json'
LOCAL_DAEMON_PATH = os.path.join(os.path.expanduser("~"),'.docker/daemon.json')
LOCAL_PROMPT = '.*[#\$]'

log_icon = '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'
log_icon2 = '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'
shell_icon = 'iVBORw0KGgoAAAANSUhEUgAAABUAAAAUCAYAAABiS3YzAAAAAXNSR0IArs4c6QAABA5JREFUOBGNlE1sG0UUx/8zY683thvHThri5oMImhKl4UMEJEKgCJACUQlIFXABqQdUlJJDpAJCIDiBxAFKIaW0ai4I1EuRUOgBKlUIoqQGSqNASZEAF4ja2iVOm9qOHdvr3eHNrOMAPtDR7s7He/Ob9zXL8D9NSukllc30RiuqCerjjLFyZV7TsZqVyoLM5e5MffrZWyuzc/35n+YNazEFkLa3uRmBW3qLwb7bY01P7HieGcbcfxk1ULIscGXy2OSlgxMPrsbPabl3I3W2BDgDfVFeUl+gbkuXjD737Bfh4e2Pk+WrepE+/4ISMJrcNz6b/OBwVEoHIgi0veBF4DaO5eM2uI8hdD9H9nsHifcs2FkCCIHo2Oj56OhIH4HJHcCzRiegeenQRCzx/qGot4Wh41UDuR8c2HlXg5sEMNyxk5doftqDum6O829YSLwz3i5Mc5oYNxPY4mvQ9FdTBxL79neqeWS7gK+dIdjHUTjnaBVGVvIKtBCX2HAHh9nJEBkSWn7x7XdvypyM7VUTDaUTNqU+/HintMtoe9GD7DcEosfYxGDn9B5ynZTpVc2xyMUmihzlP3vaQeseD5xSCamPjowQa6OGrpw6PZqeiQl1ev09Qp+emXEt9IRckAIyBaUceUJuKq5O2Yg8KhC6TyBwK0f6y6+9+TPzuzQ0E/v2SbXVSknIIlC/jSP/sws1u7he1+5TCIoXJfxbXWjhNwf1/RxOQaK8TOdJicz0yac01EomWxW0foAjedit6YZBjpVZB4FeAi1IrCWqdMGBv4fpCggPuXlOHrT1XsUoJhLtnOiifDVNuQUaH/OggUrm8jEb5g0cdobiaFKCSOq6z6jMGJiHwVkBfNczXJm0EX6IIzKs7YOTzvg5lYAt/H5dzXaWXOvlqCNg7kdHZ19ZKSiGzCC4zx0X/pQIUvyVjrmFkeWuAcowHghIjTc62i+rhT9espA/S+6Ry9xP1hQlGN18lRihrPUyeMKu1c4qhSTgAnNnHCy8XFIIKsW2RV1ke49//okwfcOZ6bnI8glXqDIq6eIJyr6gBDEKHyNtLlQ46LpSWflaGRaP2EgeKIMxP92+sV+vG9m1rXpNVWwzM7HxC6+/uVvd+a4Jg34eJFaBqWppY6prpYREfHeJ/gGbZcdrr+wP3n3XHhVON7pqH01C9w6MhocGf1dbS0n3p1EDVMLKIdaimgANDw/GNwz0jymGmlfvvpqoJhobF6i7MTdPMfO7tarWzU46n84pLKyv5c66BxtNeo9S060G6ou2/EKSB5aOlrF0tKJFnRGlOBLP+qviwboInpao2lNtNdC6nu6plmd27qhq0EBKJrLfnWpigurxkb4Ueb9uLsn9W7un/ql/zWNKZC+9Pdey4W9Tunw1spRtRgAAAABJRU5ErkJggg=='
unraid_icon = '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'
moby_icon = ''
moby_icon2 = ''
blueanchor =  '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'
infoicon='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'

dockerps_images=[]
remote_enabled=False
local_enabled=False
ip = ''
user = ''
passwd = ''
daemon=REMOTE_DAEMON_PATH
ssh_method='passwordless'
isDark=0
envVer=""
envBuild=""
envDockerInfoApp=""
platform = platform.mac_ver()[0]
use_cache = False

class c: 
    END = '\033[0m'
    UNDERLINE = '\033[4m'
    UNDERLINE_OFF = '\033[24m'
    CROSSOUT = '\033[9m'
    CROSSOUT_OFF = '\033[29m'
    GREY = '\033[1;30m'
    BLACK = '\033[30m' 
    RED = '\033[31m' 
    GREEN = '\033[32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[0;37m'

ARROW = c.GREY+'╰➛'+c.END

if os.path.isfile(local_path) :
    with open(local_path, 'r') as file:
        tmp = file.read()
        if tmp == 'True':
            local_enabled = True
        else:
            local_enabled = False
if os.path.isfile(remote_path) :
    with open(remote_path, 'r') as file:
        tmp = file.read()
        if tmp == 'True':
            remote_enabled = True
        else:
            remote_enabled = False
if os.path.isfile(ip_path) :
    with open(ip_path, 'r') as file:
        ip = file.read()
if os.path.isfile(user_path) :
    with open(user_path, 'r') as file:
        user = file.read()
if os.path.isfile(passwd_path) :
    with open(passwd_path, 'r') as file:
        passwd = file.read()
if os.path.isfile(daemon_path) :
    with open(daemon_path, 'r') as file:
        daemon = file.read()
if os.path.isfile(ssh_method_path) :
    with open(ssh_method_path, 'r') as file:
        ssh_method = file.read()
else:        
    with open(ssh_method_path, 'w') as f:
        f.write(ssh_method)
#if not use_cache:
#    open(cache_path, 'w').close()
def use_cache():
    if os.path.isfile(usecache_path) and os.path.exists(cache_path) and os.stat(cache_path).st_size != 0:
        with open(usecache_path, 'r') as file:
            tmp = file.read()
            if tmp == 'True':
                return True
            else:
                clear_cache()
                return False
    else:
        clear_cache()
        return False
    #print "use_cache after reading file:",use_cache
    
def clear_cache():
    if os.path.exists(cache_path):
        open(cache_path, 'w').close()
    with open(usecache_path, 'w') as f:
        f.write('False')
        
        
def timing_decorator(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs)  #comment this line out to time functions.
        start = time.time()
        original_return_val = func(*args, **kwargs)
        end = time.time()
        tstring=(''.join(["time elapsed in ",(func.__name__),": ",str(end - start)]))
        display(tstring)
        return original_return_val

    return wrapper

def write_to_clipboard(output):
    process = subprocess.Popen(
        'pbcopy', env={'LANG': 'en_US.UTF-8'}, stdin=subprocess.PIPE)
    process.communicate(output.encode('utf-8'))
            
def display(msg, local=True):
    t = msg.strip()
    if not local:
        with open(cache_path, 'a+') as f:
            t += "\n"
            f.write(t)
    sys.stdout.flush()
    print(t)
    sys.stdout.flush()

def test_call(*args, **kwargs):
    """ Test whether a subprocess call succeeds.
    """
    try:
        subprocess.check_output(*args, **kwargs)
        return True
    except Exception:
        return False
        
class OSXApp():
    """ Implementation of dialogs for OS X, by making use of osascript.
    """

    def works(self):
        return test_call(['osascript', '-e', 'return "hi"'])

    def fail(self, title, message):
        self._message(title, message, 'with icon stop', 'buttons {"OK"}')

    def warn(self, title, message):
        self._message(title, message, 'with icon caution', 'buttons {"OK"}')

    def inform(self, title, message):
        self._message(title, message, 'buttons {"OK"}')

    def inform_wide(self, title, message):
        self._message(title, message, 'buttons {"                                                                                                                                                                OK                                                                                                                                                                "}')

    def ask_ok(self, title, message):
        # The extra space in "Cancel " is to prevent osascript from
        # seeing it as a cancel button. Otherwise clicking it would
        # produce a nonzero error code because the user "cancelled".
        return self._message(title, message, 'buttons {"OK", "Cancel "}')

    def ask_retry(self, title, message):
        return self._message(title, message, 'buttons {"Retry", "Cancel "}')

    def ask_yesno(self, title, message):
        return self._message(title, message, 'buttons {"Yes", "No"}')

    def ask_yesno2(self, title, message):
        y = "Yes, I know what Im doing"
        n = "No, I've made a dreadful mistake"
        return self._message(title, message, 'buttons {\"%s\", \"%s\"} default button \"%s\" cancel button \"%s\" with icon stop'%(n,y,n,n))
        
    def _message(self, title, message, *more):
        #if title != 'Result':
        message = message.replace('"', u'\u201C').replace("'", u'\u2018')
        if sys.version_info[0] == 2:
            message = message.encode('utf-8')
        t = 'tell app (path to frontmost application as text) '
        t += 'to display dialog "%s" with title "%s"'
        t += ' ' + ' '.join(more)
        result = check_output(['osascript', '-e', t % (message, title)])
        return result

        


@timing_decorator
def run_remote_cmd(script, sess, timeout=0.5):
    sess.expect (r'.+')  # This clears it from previous command output
    sess.echo=None
    sess.logfile_send = None
    sess.sendline(script.strip())
    retry = 20
    while retry > 0:
        retry -= 1
        i = sess.expect ([pexpect.TIMEOUT, pexpect.EOF], timeout=timeout)

        if i==0:
            if re.search(LOCAL_PROMPT, sess.before): #check for success mystring
                return sess.before
            if sess.before:
                continue
        else:
            break

    if retry == 0:
        display('ERROR! Something went wrong')   
        
@timing_decorator
def run_script(script):
    return (subprocess.Popen([script], stdout=subprocess.PIPE,stderr=subprocess.PIPE, shell=True, universal_newlines=True).communicate()[0].strip())

def run_input_script(script):
    stdout,stderr = (subprocess.Popen([script], stdout=subprocess.PIPE,stderr=subprocess.PIPE, shell=True, universal_newlines=True).communicate())
    return (stdout.strip(),stderr.strip())

def run_input_script2(script):
    stdout,stderr = (subprocess.Popen(script, stdout=subprocess.PIPE,stderr=subprocess.PIPE, shell=True, universal_newlines=True).communicate())
    return (stdout.strip(),stderr.strip())


@timing_decorator
def print_containers(input_mystring, local=True, size=8, sess=None, ssh='password'):
    global dockerps_images
    global total_containers
    global up_containers
    global down_containers
    del dockerps_images[:]
    if local:
        #up_containers = int(run_script(DOCKERPSUP_QUICK + ' | wc -l | xargs'))
        total = int(total_containers) 
        #down_containers = total-up
        
        display(c.END+'{}{}'.format(ARROW,'📦 Containers{} {} {}'.format(c.YELLOW + '[' + str(total_containers) + ']' + c.END ,c.GREEN + str(up_containers) + '⇧'  + c.END,c.RED  + str(down_containers) + '⇩' + c.END))+c.END)
        display('--'+c.END+'   '+'{: <12s}'.format('CONTAINER-ID') +' '+'{: <20s}'.format('IMAGE')+' '+'{: <20s}'.format('COMMAND')+' '+'{: <20s}'.format('STATUS')+' '+'{: <20s}'.format('NAME')+' '+'{: <20s}'.format('SIZE')+c.END+" | size={} trim=false font='Courier New'".format(size))
    elif ssh=='passwordless':
        up = int(run_script(DOCKERPSUP_QUICK_SSH.replace('<ip>',ip).replace('<user>',user)  + ' | wc -l | xargs'))
        total = int(run_script(DOCKERPS_QUICK_SSH.replace('<ip>',ip).replace('<user>',user)  + ' | wc -l | xargs')) 
        down = total-up
        
        display(c.END+'{}{}'.format(ARROW,'📦 Containers{} {} {}'.format(c.YELLOW + '[' + str(total) + ']' + c.END ,c.GREEN + str(up) + '⇧'  + c.END, c.RED  + str(down) + '⇩' + c.END))+c.END, local=False)
        display('--'+c.END+'   '+'{: <12s}'.format('CONTAINER-ID')+' '+'{: <30s}'.format('IMAGE')+' '+'{: <20s}'.format('COMMAND')+' '+'{: <20s}'.format('STATUS')+' '+'{: <15s}'.format('NAME')+c.END+" | size={} trim=false font='Courier New'".format(size), local=False)
    else: #pexpect (ssh+password)
        cmd_output = run_remote_cmd(DOCKERPS_QUICK + ' | wc -l | xargs', child)
        for line in cmd_output.splitlines():
            num = [int(s) for s in line.split() if s.isdigit()]
            if num:
                break
        display(c.END+'{}{}'.format(ARROW,'📦 Containers {}'.format(c.GREEN +str(num)+c.END))+c.END)
        display('--'+c.END+'{:<12s}'.format('CONTAINER ID')+'{:<31s}'.format('  IMAGE')+'{:<22s}'.format('  COMMAND')+'{:<28s}'.format('   STATUS')+'{:>20s}'.format('NAME           ')+c.END+" |  size={}  trim=false font='Courier New'".format(size))
    for i, line in enumerate(input_mystring.splitlines()):
        if '--format' in line or '{{' in line :
            continue
        split_line = line.split("^^")
        if len(split_line) < 5:
            continue
        if local or ssh=='passwordless':
            if ssh=='passwordless':
                display('--'+c.GREY+str(i+1).zfill(2)+' '+c.END+c.BLUE+'{: <12s}'.format(split_line[0][:12])+c.YELLOW+' '+'{: <30s}'.format(split_line[1][:30])+c.RED+' '+'{: <20s}'.format(split_line[2][:20])+c.MAGENTA+' '+'{: <20s}'.format(split_line[3][:20])+c.GREEN+' '+'{: <15s}'.format(split_line[4][:15])+c.END+" | size={} trim=false font='Courier New'".format(size), local=False)
                
            else:  
                display('--'+c.GREY+str(i+1).zfill(2)+' '+c.END+c.BLUE+'{: <12s}'.format(split_line[0][:12])+c.YELLOW+' '+'{: <20s}'.format(split_line[1][:20])+c.RED+' '+'{: <20s}'.format(split_line[2][:20])+c.MAGENTA+' '+'{: <20s}'.format(split_line[3][:20])+c.GREEN+' '+'{: <20s}'.format(split_line[4][:20])+c.CYAN+' '+'{: <20s}'.format(split_line[5][:20])+c.END+" | size={} trim=false font='Courier New'".format(size))

        else:
            display('--'+c.GREY+str(i+1).zfill(2)+' '+c.END+c.BLUE+'{:<13s}'.format(split_line[0])+c.YELLOW+'{:<31s}'.format(split_line[1])+c.RED+'{:<22s}'.format(split_line[2])+c.MAGENTA+'{:<28s}'.format(split_line[3])+c.GREEN+'{:>20s}'.format(split_line[4])+c.END+" | size={} trim=false font='Courier New'".format(size))
                   
        #-----------------------------------------------------------------------------------------------------------
        # INSPECT 
        #-----------------------------------------------------------------------------------------------------------
        if local or ssh=='passwordless':
            if ssh=='passwordless':
                inspect_cmd = DOCKER_PATH + ssh_addon + 'inspect ' + split_line[0] # + " 2> /dev/null"
            else:    
                inspect_cmd = DOCKER_PATH + " inspect " + split_line[0]# + " 2> /dev/null"
            inspect_output = run_script(inspect_cmd)
        else:
            inspect_cmd = DOCKER_PATH + " inspect " + split_line[0]#
            inspect_output = run_remote_cmd(inspect_cmd, sess)
        display("---- 🔬 Inspect",local)
        for inspect_line in inspect_output.splitlines():
            display("------ " + c.END + (inspect_line) + " | size=11 font='Courier New'",local)
            
            # Compile used images list
            if 'Image": "sha256:' in inspect_line:
                imageid = inspect_line.split("sha256:")[1][:12]
                
                if not any(imageid in d for d in dockerps_images):
                    #print "imageid NOT in dockerps_images"
                    container_list = []
                    container_list.append(split_line[4])
                    dict_entry = {imageid:container_list}
                    #print"dict_entry:",dict_entry
                    dockerps_images.append(dict_entry)
                    #print"dockerps_images:",dockerps_images
                else:
                    #print "imageid IS in dockerps_images"
                    for mydict in dockerps_images: 
                        for key in mydict:
                            if key == imageid: 
                                mydict[key].append(split_line[4])
                                break

        #-----------------------------------------------------------------------------------------------------------
        # LOG 
        #-----------------------------------------------------------------------------------------------------------
        if local or ssh=='passwordless':
            if ssh=='passwordless': 
                log_cmd = DOCKER_LOGS_SSH.replace('<user>',user).replace('<ip>',ip) + split_line[0].strip()  + " 2>&1"
            else:
                log_cmd = DOCKER_LOGS + split_line[0].strip()# +" 2> /dev/null"
            log_output = run_script(log_cmd)    
        else:
            log_cmd = DOCKER_LOGS + split_line[0].strip()
            log_output = run_remote_cmd(log_cmd, sess)
        
        #print "---- 🪵 Log"
        display("---- 📔 Log", local)
        display("------  #️⃣ Follow Log | font='Courier New' color = #30C102 bash=" + ME_PATH +  " param1=-follow param2={} param3={} param4=exit terminal=true refresh=false".format(split_line[0],local), local)
        
        #print "---- Log| image={}".format(log_icon2)
        for log_line in log_output.splitlines():
            display("------ " + repr(log_line) + " | size=10 font='Courier New'", local)
        
        
        if local or ssh=='passwordless':
            display( "---- 🔄 Restart | bash=" + ME_PATH +  " param1=-restart param2={} param3={} param4={} terminal=false refresh=true".format(split_line[0],local,split_line[4]), local)
            if 'Up' in split_line[3]:
                display( "---- 🛑 Stop | bash=" + ME_PATH +  " param1=-stop param2={} param3={} param4={} terminal=false refresh=true".format(split_line[0],local,split_line[4]), local)
                display( "---- ↩️ Enter | none"+c.END, local)
                display( "------ #️⃣ bash | bash="+ ME_PATH +  " param1=-bash param2={} param3={} param4=exit terminal=true refresh=false".format(split_line[0],local), local)
                display( "------ 🐚 sh   |  bash=" + ME_PATH +  " param1=-shell param2={} param3={} param4=exit terminal=true refresh=false".format(split_line[0],local), local)
                display( "------ 🌐 web ", local)
                
                #sometimes, the Ports list is not populated so you have to look into the 'inspect' data to sniff out some ports.
                exports=[]
                try:
                    j = json.loads(inspect_output)[0]
                    exports_raw = j["Config"]["ExposedPorts"]
                    for key in exports_raw:
                        #print (key)
                        if 'tcp' in key:
                            myport=key.split('/')[0]
                            exports.append(myport)
                    #print exports
                except Exception as e:
                    #print "Error in parsing exposed ports: {}".format(e)
                    pass
                    
                # Use the list from 'docker ps' Ports column
                if local:
                    portlist=([x.strip() for x in split_line[6].split(',')]) 
                else:
                    portlist=([x.strip() for x in split_line[5].split(',')]) 
                
                for n in portlist:
                    try:
                        port = n.split('->')[0].split(':')[1]
                        webip =  n.split('->')[0].split(':')[0]
                        if port not in exports:
                            exports.append(port)
                    except Exception as e:
                        #print "Error parsing portlist: {}".format(e)
                        pass
                
                #print exports
                
                for p in exports:
                    response = None
                    web_true = False
                    web_error = False
                    try:
                        if local:
                            hostname = '127.0.0.1'
                        else:
                            hostname = ip
                        full_url = 'http://'+hostname+':'+p    
                        try:
                            response = urllib2.urlopen(full_url)
                        except urllib2.URLError as e:
                            if e.code != 200:
                                web_error = True
                        if response:  
                            html = response.read()
                            if '</html>' in  html:
                                #print "Found website"
                                web_true = True
                                
                        if local:
                            if web_error:
                                display( "-------- ❗http://" + "127.0.0.1" + ":" + p + " | href=http://{}:{}".format('127.0.0.1',p), local)
                            else:
                                display( "-------- http://" + "127.0.0.1" + ":" + p + " | href=http://{}:{}".format('127.0.0.1',p), local)
                        else:
                            if web_error:
                                display( "-------- ❗http://" + ip + ":" + p + " | href=http://{}:{}".format(ip,p), local)
                            else:
                                display( "-------- http://" + ip + ":" + p + " | href=http://{}:{}".format(ip,p), local)
                    except Exception as e:
                        #print "Error parsing portlist: {}".format(e)   
                        pass                        
                
                display( "---- 🔨 Force Remove | bash=" + ME_PATH +  " param1=-rmf param2={} param3={} param4={} terminal=false refresh=true".format(split_line[0],local,split_line[4]), local)
        
            #if 'Exited' in split_line[3] or 'Created' in split_line[3]:
            else:
                display( "---- ▶️ Start  |  bash=" + ME_PATH +  " param1=-start param2={} param3={} param4={} terminal=false refresh=true".format(split_line[0],local,split_line[4]), local)
                display( "---- 🗑️ Remove |  bash=" + ME_PATH +  " param1=-remove param2={} param3={} param4={} terminal=false refresh=true".format(split_line[0],local,split_line[4]), local)
            display("---- 📋 Copy ", local)
            #display("------ ID    |  bash=" + ME_PATH +  " param1=-copyid   param2={} param3=null param4=exit terminal=false refresh=false".format(split_line[0]))
            #display("------ ID    |  bash='echo "+split_line[0]+" | /usr/bin/pbcopy'  refresh=false")
            display("------ ID    | terminal=copy param1={} bash={} ".format(split_line[0], ME_PATH), local)
            display("------ Image | terminal=copy param1={} bash={} ".format(split_line[1], ME_PATH), local)
            display("------ Name  | terminal=copy param1={} bash={} ".format(split_line[4], ME_PATH), local)
            
@timing_decorator          
def print_images(input_mystring, local=True, size=8, ssh='password'):
    global dockerps_images
    global total_images
    if local:
        display(c.END+'{}{}'.format(ARROW,'🖼️ Images {}'.format(c.GREEN + '[' + total_images + ']' + c.END))+c.END)
    elif ssh=='passwordless':
        display(c.END+'{}{}'.format(ARROW,'🖼️ Images {}'.format(c.GREEN + '[' + run_script(DOCKERIMAGES_CMD_SSH.replace('<ip>',ip).replace('<user>',user) + ' | wc -l') + ']' + c.END))+c.END)
    else: #pexpect (ssh+password)
        num=''
        cmd_output = run_remote_cmd(DOCKERIMAGES_CMD + ' | wc -l', child)
        for line in cmd_output.splitlines():
            num = [int(s) for s in line.split() if s.isdigit()]
            if num:
                break
        display(c.END+'{}{}'.format(ARROW,'🖼️ Images ({})'.format(c.GREEN +str(num)+c.END))+c.END)
    display('-- '+c.END+'   '+'{: <20s}'.format('REPOSITORY')+' '+'{: <15s}'.format('TAG')+' '+'{:<15s}'.format('ID')+' '+'{: <15s}'.format('CREATED')+' '+'{: <10s}'.format('SIZE')+c.END+" |  size={} trim=flase font='Courier New'".format(size))
    for i, line in enumerate(input_mystring.splitlines()):
        if '--format' in line or '{{' in line :
            continue
        split_line = line.split("^^")
        if len(split_line) < 5:
            continue
        display('-- '+c.GREY+str(i+1).zfill(2)+' '+c.END+c.BLUE+'{: <20s}'.format(split_line[0][:20])+c.RED+' '+'{: <15s}'.format(split_line[1][:15])+c.YELLOW+' '+'{: <15s}'.format(split_line[2][:15])+c.MAGENTA+' '+'{: <15s}'.format(split_line[3][:15])+c.GREEN+' '+'{: <10s}'.format(split_line[4][:10])+c.END+" | size={} trim=flase font='Courier New'".format(size))
        
        if local or ssh=='passwordless':
            #check if image is in use by a container. If so, list those containers
            if any(split_line[2] in d for d in dockerps_images):    
                display("---- 🏗️ Image Used in ")
                for mydict in dockerps_images: 
                    for key in mydict:
                        if key == split_line[2]: 
                            for line in mydict[key]:
                                display("------📦 " + str(line))
                            break
                display("---- 🔨 Force Remove | bash=" + ME_PATH +  " param1=-rmif param2={} param3={} param4={} terminal=false refresh=true".format(split_line[2],local,split_line[0]))
            else:
                display("---- 🗑️ Remove | bash=" + ME_PATH +  " param1=-rmi param2={} param3={} param4={} terminal=false refresh=true".format(split_line[2],local,split_line[0]))

@timing_decorator    
def print_info(input_mystring, local=True, size=11):
    display('-- ℹ️ Docker Info')

    for info_line in input_mystring.splitlines():
        display("---- "  + '‎‎' + info_line + " |   size=11 font='Courier New'"+c.END)

@timing_decorator
def print_daemon(input_mystring, path=None, local=True, size=11):
    display('-- ⚙️ daemon.json')
    display("---- Using path: {} | color=gray".format(path))
    if local:
        display("------ Reveal in Finder | color=#30C102 bash=" + ME_PATH +  " param1=-reveal param2={} terminal=false refresh=true".format(path))
    else:
        if path == REMOTE_DAEMON_PATH:
            display("---- Set custom daemon.json path | color=#30C102 bash=" + ME_PATH +  " param1=-dpath param2=null terminal=false refresh=true")
        else:
            display("---- Set default daemon.json path ({}) |  color=#30C102  bash=".format(REMOTE_DAEMON_PATH) + ME_PATH +  " param1=-dpath param2=default terminal=false refresh=true")
    try:
        parsed = json.loads(daemoninfo)
        json_formatted_str = json.dumps(parsed, indent=2, sort_keys=False)
        #json_formatted_str = yaml.safe_dump(parsed, allow_unicode=True, default_flow_style=False)   #Use this line if you prefer yaml display
        for line in json_formatted_str.splitlines():
            display("---- " + '‎‎' + line + " | size=11 font='Courier New'"+c.END)
            #print("-- " + '‎‎' + line + "| color=white size=11 font='Courier New'")+c.END
    except ValueError as e:
        for line in input_mystring.splitlines():
            display("---- "  + '‎‎' + line + " |  size=11 font='Courier New'"+c.END)

@timing_decorator
def print_size(input_mystring, local=True, size=8):
    if input_mystring:
        display('-- 📏 Sizes')
        for line in input_mystring.splitlines():
            tmp = (line)
            if  'usage:' in line:
                display("---- "+ tmp + "| color=#30C102 size=8 font='Courier New Bold'")
            elif  'SIZE' in line:
                display("---- "+ tmp + "| color=blue size=8 font='Courier New'")
            else:
                display("---- "+ tmp + "|  size=8 font='Courier New'")

@timing_decorator
def print_stats(input_mystring, local=True, size=10):
    if input_mystring:
        display('-- 📈 Stats')
        display("----  #️⃣ Stream Stats | font='Courier New' color = #30C102 bash=" + ME_PATH +  " param1=-stats param2={} param3=null param4=exit terminal=true refresh=false".format(local))
        
        for line in input_mystring.splitlines():
            if  'CONTAINER' in line:
                display("---- "+ line + "|  size={} color=#30C102 font='Courier New'".format(size))
            else:
                display("---- "+ line + "|  size={} font='Courier New'".format(size))


def print_about():
    logoicon="iVBORw0KGgoAAAANSUhEUgAAANgAAADYCAYAAACJIC3tAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAActpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+d3d3Lmlua3NjYXBlLm9yZzwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGMtVWAAAQABJREFUeAHsXQdgVcXSntw0UugJEAIhofeOFOkIimDvBUQQFXvvPp/67B0LYJdn7z4RFJVepXcILUAICUkIJdS0//v23AnL8dwU7L8ObLbN7tkyszs7W26Q/AO/VgsEISMfDG1CvmP97C9xqsHUhqkFU4dun89XIyQkpEZYWFj1oKCgyjBVgoODoxAeAbsCcEL8RoqKiph3fkFBwaHCwsKDMPvh3o2wPXl5edlHjhzZCTdNGkwqTLrfvQt2IYwbWOZgf2ARbOLQ/gd+YQsoMfzCbP6WyW2GIjEWeLRCDYQ1hGkF06xChQpNIyIi6oWGhtYC05CByCySn58vYAzZtYv0/8uhSpUqAmY1BowqYD4BE+4G46UfPnw4BWYdvrLabzbAJgO6gQzHOv7DcO6WKYf/HwYrR2MBle2lI717hopAXHOYTph1OkZGRraHaQBmqkQiB1FLZmYmoo8BMiUJmMb0RceOHQWMGBQVFWVMdHS0wE1mMfFkSAIYsmj//v2Sm5srsOkuOnTokCxevNhBOJqnXWaTtmrVqhIeHm6YG/nsQ7oNMMvBhPOAsACGzHfQIB/9wxmUoGV2fP/8LbEFTKeViPFPpE2gNlNR1GsD0wMzUe/KlSt3AmPU4axEwrdmI4pbRiyrW7eutG3b1levXr2gmjVrSo0aNYKQRqpVq2YIHuKhYIYTMiQNGPUYW5mLNpjBzEz+2UlnKTlw4IBhZsxWsnv3blOWjIyMIjL3tm3bitatW1e4detW7VXWgUbIyDTMD4PBNtRhCdw/ImoGzAoYe4bW2e0fZkPDlAT/MJh367BdSHi0baaqDH8vmIEVK1bsA4JsghlKsrOzDSEjnLOHIcQTTzwxiMyUlJQUVKdOHalevbogjWBWEzKSMhGZRRmGNglcw7xs5G/iadtAXILma8cpM3IW5Sy3d+9eU+YdO3ZISkpK0Zo1awoXLlyoM59hHpaRjE/xFcy2/uDBg2S2iTAzYbjeU+DMxrT/rNu0RSz7HwazGgNOHdFtpqqC8P4w52Bt0wdMUoNER+IEFDPUOeec4wNDBTVq1CgoLi5OuA4iM+k6S5lHZxybeUxGfgax3co0GqZ+TRso3AuPuMp8ahOPdeGst2fPHsFMJ5s3by5atWpV0eTJk82si2SG4ThAsC7AzYRYOhXhn8N8B2MzWyj8HGA0LZx/b/iHwZz+11HYzD4IIlH1g7kUjHJKpUqVYjny79xJxZyzBunatavvpJNOCmrVqpWZoTjaU9wj8ZKJ1HD2UIJnYoL6bdt2lwWnJHyvODuMbjX8li2KsrysK8XL7du3S3JyctG8efOKlixZQqYhvQRz8OAMh5ktC2YSwt6D4QynA5NhSssP598T/s4MZogF3a5EQQpoADMEjHJJTExMQxIhiQxgcM4880xf7969fWAq4SxF5QOJk8zEmYC2EjITEdRvE7QdpjheYccbp3mVlF5xaLsNBwnOVrTJcFSkcHABs8mCBQuKpkyZogNRCNqJn+EMuAEKk/fhfBdmPcP8wMGL+CqCavjfwv47MhjrzE7Ps3p4ANzXYBYaBGVFCMQkRhmiGDRoUPApp5wS1KZNG6ldu7ZRQpAgqVZ3M5SbaJnJ8YRpOjuthrltLxwNU1z127bt9sJjPJmLwEFERV3ObhQloSyRmTNnFs2ePZvtZAYrKm4wo+WDIblWGwPzLYwCxUcOVH8rRvs7MZibsbh5ewmI5/patWq1IRGlpqaSGPKh5fNdccUVPoiBkpSUZNZSJDabqTi6l4VImaEXnoYfb1xZ0iuO2l7fKi2M8bbR2Y15cu2WlpYmy5Ytky+++KIwPT2dzBbK9RrT5OTkLIf9MsLGwxyCIfytGO3vwGBuxqqETh6FNcQ1EPMSqFEDIZjZ6pJLLgk+7bTTuK4yWj9SA9XdOlMpU5F4CLZtuzWurGGKr7ZXOo0rzS4pbXnjvPAZxsGGts5s9FNJQhGSs9p3331nZjVsOQRT9Y8ti1S04Uso+1iYPawD4G/BaP/fGYydaERBrBUqZmVl3YgN1usg6tX0i4EUWYLuvffe4P79+0v9+vWNCMiZikYJjNSgbtpqvMLLEhYIR8Ptb2lYee3y5GHj2m79ZqAwhpO5CMpsFCGx3ybz58+X8ePHm4EL0SHY8+PWQCYYbTT8NHthCMV95Hj/f/39/8pg9sI6DF12PU5C3IaN3lp+xiLTBT/zzDNUWgj3qUgg3CfibMWZikACUmP7vdwaprYXUWqc2y4PrjttWf1l+YYXTqAwO5xuGjIb247HtNiOXKthf01eeeUVcqERH2NjY8loGcB9GmFktCMwbHBqHm2FE7x/ffj/xmDufawh6KJ/Y01Vn2sFzEqGsV566SVfnz59hItyEgXFQCUYdqkSjIap345Tt9o2roa57bLguNP8Wn79tuanfi/7eMKYxm3IaAzjRjyOcMkLL7xQCH8BFCahPK4FiYLapAdh3mG5ABwYyYzOtMiQvzj8f2IwW9Tojn55CqJgFzIQFt+GsV588UXuXRnG4gj7SxiLhEPwsr3CAuH+0eFaVi2H+m3bdnvh2fF0u42q/MloUPML+sHMaNi0D2Uc9tzmI987YGYwf4Ddl07IX/Tv/wcGo2hBai/EgjoWKuKnsRE6lBu/mzZtosjhe+yxx3ynn366UbOXh7FswmH/KuGo22174btx/uz+kurgFWeHud30q+FAp4zGc5FQ78sbb7xhZiuIjSHca8NxLGobyWgZMKRNSiQULf+y8FdnMHukuxrrqEehqKi6YcMGdlzRDTfcEDx06FBp0KBBsSioPaUdrzbD1U3b9qtbbTtew9y24mi426/hfxVby2/btlvrwTA7XP1qk9FUdOQmPjSO8tVXX5GJgqAI8YH59gD3LvipcSTYfeyE/IX+/lUZjLOWYSJoBRtDOTEW4mAfLrHQQXlQXITec8890r59e9OZ1Gyxg201u3Y4bYL6vdzlDVP88tjlwbXLXJZ0iqPp3P7SwjXetm23V36Mt3HUr7YyGk/AcNP6/fffl5UrV+bhdEwoGRBq/2nI9yqYZJi/7Gz2V2Qwe0S7GZ3xRFJSUuj69euNODhu3DgfTl8ITmSYM3WqFdSOtW10XImMRVzFUdsrTON+C7sseZYF59cod0l52HFut5efYWQyAhmKIuLcuXMFCigjNkIBFYLBMh84dwLlWYP4F5zNOBP8VYCDAbVM+djArIuR7wvMWhQLgyFq5F922WUhb7/9dlCvXr2MrE+VuwI70zZ2uO22CcEOp1vjNNy2Na40207zZ3HrloTaJZVLcdS2ce2wQG7ie8VxEOS1H4ry3bt3D0Lf+TCb5UM6CcGMdjL8vZB0KkwODGnAGfng+LPDX2UGM4zlb8wLYb+GayHRmLWoHQx57733gk4++WRzaREL5eI2J8HbhhGB/Hacut12aQxU1nh3viX5S4rT75UF53hwNY2X7RWm5bDj6C6Ln7MZ8agIoXaX+2dPP/00GSkfa7NQHDbOhftKmA/4HYBNE07In/DvX2EGo0ioG5DjoCF8DOJDGDWEF198cSiZq1u3bkbc4BpMR0jtWO1ctr07zB2n/aPhblvjbVtx7LDS3MeTxitPratXnIYpjtoa/kttzc9tM18NK8mt31dc2jSczbjpj71LM5vt27cvGBdC87FvxrOj50ByiYf9NQxFSdKGI2fC8WeEP/sMZtZbuD6SBEXFZ4mJie1wA9donMaMGeM799xzzdEmKjEIJFzbuMNsv+1Wgrdt2624x2OXJU1JOGWJ07J64XqFKb7bLg+uOy39gcLscLdb06nNMnA2o+HajBLJrFmzZOzYsWSkImy/BONs41K4z4HZBGOvyeH9c8GfdQazT2QMxqg1pXHjxgkbN27MYwPjtq1v4MCBpiUpTugoaHcSI9VP2/a73eq3bbrdoPm4w0vyaxq1vXBLivPCd4dp/d3hgfyK77YD4Zc13Cs/DWMettvLb3+HuJzNyGQ8I9quXbsgKEGCcDibImM8rsVcAXy+FbIGhvTCyeJPtzb7MzIYy2RGK9j3YPZ6HeJCGPa28q+++upQHCANArMZDSFHOXYECdQmUvWrjXyOwXGHM56geQSyHazAeBpfkq15l4TzZ4hTZjhem3Vwp7XDtI6Ko37b1jj2M88w9uzZMwjSSvCKFSvycXi7AgbXixDH5cMMGDIXaedPxWR/NgbjwlV37t/BSHULGrkQ718U4XhN8C233CK4vm/EBm18ZRa3jXyKQeMYYBO4utW24zUskF2cueVw41pRv5tT20Xt8n7YnY7ETbDr5sbx+obiqE2cQG53nDs/puN+Gd844VUirMd8OAlSCM1jEQbgflh7N0CaL2DIXKQhp9Bw/NHwZ2Iwo8yAAiMK0/+PmLVOxwHdfIxYvm+++caHR2VMJ6sigx0eyLBR7ThtZJtISgrTuJJsr7zc+CXhaJydpqxhdpqyuJWw1WYadbttlkENNXp8e4M2DVXptMl0xHGnDeT3+p6WW9ME8tvh/C4VIA0bNhQ+LjRt2jQe4C4Aw7UDnfQD7scw3J/50yg//ixKDl4pOYL9rTp8HgwN2BgiYR46M5T3ilq3bm1uz9qjqRKB20Y+xQTCONuvbrXteA0ri/1LcbzS22G2W8v4W4dpO5KAue4h4R/A+47JGzbIRpjCwgKJiYmVeomJUgu3EIij618to23bbnfZ7Ti328vPMDWkARp+n1eP7ryT+9CSB5ExFKfzeeqDjJYKY2gK9h8KfwYGMw2BkbI5OmxqkyZNauDoTB7ewQh9+eWXzV0tXk0naCN72e542+/l1rBANr+hoO7SbK+8fq2w3zIfbU++9ssb3rh9YMz0qVNkwsRJ2gzF9vnnny94AMj0DZlMobT20e8Q38Z1u208r0HVZjI+xvPqq6/K8uXL8/z7ZXz6qy/MKpg/nMn+aAYzDQDRozOm+u+bNm1ace3atfkjR44Meeihhyhrm/UWGup3ZS79Xkl2eeNsfNutxFVaWGnxXvmUJQ3TcbbizLVw0SIZ/9ZbshB3t44CljR4pq1LTJjM27ALwZTAnMGHhI0+MxdVVdTTcnjZpYXZ8XTbhuWx/cpkFFk5KPAs49SpU6lhDPFvSp+EJLwG84cy2R/JYFrxHmiEH9BRYWSuu+++O+T22283bwzyuBM7jo1pN67tRtpj4my/utVmOgXNQ+NKskuKc+dp4wZye6WxcY8nvrQ0XvkzDQ3Frcnffy8P/OtfRANwaR4mPRpWlCu7J8iAlnESERoiabsPyKQV2+XmT7cifq/E1aopY8e9as59UgmhoGXxsksLs+PpVsO8lQ7oZrgyGQcH7oXi4R2ezM/nOUbcpubUOgBmOozSGpy/L/xRSg6tcB9U90eIhaEQC/MfffTRkFtvvdUsplW+10bVhlZbm8nLr3FqE8cGO43GqW3jqVvj1Nbw8tilpS0tvjzfKg8uxcL5P/0kd96Ba1iVa0p0WLB8PrK9PHh6E7mqZ33p2ChWoiqESHhIsMRUiZAujWpIpzoV5P0FuTigm2VuLPDUhSqfvL6tsxvj1K12aWF2foHSkEY4SICOqJTxYd1eQHERyrIhSD8LZgMMaU411HD+PvBHMJgyF2cuMlcwmKsA585Crr32WtMB2lklMRcJUg2bqiS3xts23V6ghO62bVyvOA3zwrPDbLdXGju+PG6b+EpLR1x+m1pBPgE+7LLLnCRHCmTFvd2la7M4qRYVLmEhPiksgMbbr/QuzIcWD2ljo8Pl9SVpchBKkK5du+CQbkOjRudMQtCyqO1k/vNwO97LbYdpHl75E4/14fe5RwplmQ+vEZPJgsFklyLNNJhNML87kzktgi//TmCYi2sufO8HZa7nnnsueNSoUaYIFDXYYF7MpWVkY6phGN0KXuEaX15b86Stae0wL3dZ8bzS/lphgQjTzp84PCkxceJEf3BFmXVrZ2lct6oUHMqTwnznlWIyFP47F7KMI0gO5uVL9l5HJCSTEvSbx2PbaWy3v2Amb4ar0e+pn7YyN22e8hkyZEgw1mKGyYD/PUwXGIqNpMHfDX5PBmNPHKG2EDOUWXP5Z67gK6+80jCUyvGBmIvEq0ZbSAm6pHDi2nhefs3Ptt1p7HReeHaY7dZ8AqW3cQO57TwC4ZQ1nHmRMfi8GhUVXHM9PDheTmxSU4owi/l8IFgStCtDtL7htJ37oOg4xJsjAkVUNRfWz71kAEIg2x1n47nd9GuYptMwm8l4u4LvXJLJeDgcuGSyFjBkMmdUgOO3ht+LwaCKkjzuc1EVD4VGNBUaWHMF4/iTIX6OpoSyMheJxG2Y3osQ3WHqV9tOZ4cxPBB44dlhttsrDzs+kNsrXXnD3MSo6fnNn7D2cqCiXHBCIk70OaKWm7E0jbHBY6u28+3QIuFvOfEIE/Py+o4dpnlomNoMV7dte7kVl3FuQ+ZimM1knMkuuOCCYCg8qF2MRvqpMHVgzDUn5vdbw+/BYFznUbMThU1kioU1yFy40h9y3XXXmfoFmrm08uxANQxTN231l2QbJPxRfPWrreFqM1zdapcWpnm5ba/0bpzf08/yUCGATVn5+M0x5tN3DaghjWpWRC85Zzu9ylNQiDUOFB25B47IC9NSDErPwYPMC8g6OCpTMFLdbtsktP64422/201/IKPfZLzNZIMHD5YzzjiDqnsyWSzwfoSJgqGM+5vrIH5rBmP+ZmrCKPItTmg0gViYB5Ew5LbbbjPHbqjQIHjNXCQG2xBP/XQT6P8ltkns+uPO087fRlU8d7wdbuOX1/1r5eP+LgmQ78lvy+EGfiU5q308hCYcgUJb2rMXm5ZhhOBwvHEIBnxv7iZZsNnRevTu09dcFyKD2cxgEnj8ceOU5mcWNo7bTX8go0zGwYSb4ngHk0zGEx+Nka3unpM2f1Me+E0zZwP54R2ocrvz+BOm7dAHH3zQ7HMFUsVrIhKYGoaV5Nb48tgl4TJOwSZ0263xf3ZbCZNlJ8HhEqNMmsA7iyIXdqwibaDYMLOXn72UsYKCMRuE4ZVezF4rNmfLte/9JFd/wBfVsqVz5y7m4K0qpfQbzFPdtm27A+G4w73S2GF0exkyF8Nps85Ymggu57K8PE6VhwMMPfCtd/i93xp+SwbTA5f3YmoeumXLlnxUOhSPmpgTGl6byFpZNoptGK5+L7eGlcf2wmWYAr9XEtjx5XXb+dpp7fDjcZOoFGy3hvFbZDBIETJzzlwER8qlnetIeESYkSCY3MxiZCxsLO+CMmPS4q0y6t1F0vrhBTJm5jakSZe4+Hi58cYbin91Rr+ltn6PtleYxmtcSbZXnB1Gt9swf5vJKB3xFsZVV/GRKgnFj33k462PoXDfA8Pp+DdTelD58FsAC0zZbzBGj/9gpmIlgvmqK9+B59lCNopbLGRBSAS2scO83BpWFps4CkrYajPcdrvxAsUrXnlsr++UJ/3x4pLoeOJh6pQpJos29SpK1wZYlnCvC8AxhTPWrt0H5cslW+WJH7dJchpvi/M5DAd4ZYivI/PVLpVAGKN1Yr/SrTbj1G3bmsYOs9NpuKanTXB/h2HE9QLWlzRGm2IsBnp54okneEA4GDNvEQabR2Dz0ianc6VZr6yOO8y7ZMednUlIps3HPZ366MzleCkoCjeRC3nlhB0T6OAuU7LxbGOHqVttbeiy2prOtm235mOH2e5A8YFw7PCyusuKV5ayuPMiofHqCX9iiOISyFLeGNJOhvduJIV5UM2TSIN9Mjc5Q84dN1/S9lC42c9spHPH9jJg4CDBb1ALfkvNEK2uu7zK4hXGfDTcbZcUR1w3vu13x6vfxtGBnDZncPwcruC150Ksx3wQGVnJ1jCbYAztsjy/FvzaMxgZ1uxAgrk+w656FDo0H2JhSN++fUs8uMsKaeNo5Wy/3WC2W9N52ZpPoDjNxwvPTmPHu91eebjTBsJx5/Vb+jnKkynmzJnj/0xV6deslnFz5hKc2vgB5wz7vzCruBhn4Lnxk085hXevhL/zRQJVja/OGvZMowntMNvtji9rHPEU2Jaazitc8WzbnslYfg4UI0aM8OHpbmoWo6D8+Az47WBIu/xYyesDIJQVfm01JRmW8sariYmJg/iGBq/533zzzYZ5dCRhI9mGhQ3k1zi1iaduL9tE+v+4cb3iAuWhae34ktx23iW57XzdeHac7Xbj2X6byOxw2828OHJnQjX/xO03Si50Zw+fliSnt6tjjkIFQ4O4Zec+6fDoj8XJnn3uOTnvvPOMSM8T62RO9h+/F+ibdrjt1kztMHW7beK6w9RfWpwdTzdB09JWN8N5fhKn8H14foDvvMRjC6k2gifAKA0T7RfDr6nkoAzLEeBCaGlG8vUnXoLjhTiKJhw52NFuwxrYYbbfdiuOhnnZXmFMp6ButW18xTleO1Cedrg775Li3LjH41eC4nfIJOvWrpUdPMcA1fwpLTF7YdYyzYMx+8c16eYTHL5fe+016dmjhyFIrrOUsTgTKGje9NtujbdtO952K46Gqc1wdds23WrcOBpems06sD1IkxxAsJQJxStVBbCvRJ4XwpCGfzWlx9EWY4mPHzgT8qRGAuzXqLEBBPH6AGV2LqwJrFhJxsbxcmuYl+0Vxm8p2G6vMDv+l7g17z+TTaKi1nbJ4kWmWINbV5FmcTiHgX2tYGgMDxzIk69XZJq4c84+W5o3b276jO3AtCTa0kBx1CZ+aW6v+JLCNI627dZv2WFuHPXT1hmZvyX9L+eKThDf+wC8ClMXhgq6X0W6+7UYzKihMM2+zRd3qZLHO3a+Dh06FD9Qw85yG1TiZ2FK3IqrOF42wxTsdAxTf0lud9qScAPlp3mobeNpmNolxSnOL7WVyDQffpMEhd/gkpkTPjXBp7aoLlGRYRD70G2IW74tR75c6jBYp86dzTlFptO81GbiQG79Xkk4dlrFt8PUrbbi2HlqHG3brTh2mBtH/bTZJpSquL6E+t6HWYzrMRxnKd4fMzRtl+F43L8Gg3E65VRxC3/hhM9Z45BlCB8FpXjBjiqLYeGJp7bt1jDbtt1uXMYpaBz96qZtu0vCtdMpnm1rPl54dpydpry47rTl9XMW4jMAKbt5G7mCtEuoAn089rowMRXiZPxHC7Yi/JA0iq9pNo9VJAz0HSVixh+vu7R0Gq+2XRYNo227tTx2mBtH/bRVXOwBcRhv4puTHpC++iCfW2BIjL9YVPylDGZEQ1zaa4JF9BOYwVjHEK67INMWa5yUoG2biOpXt9pKmIFsxfOySwtjvILmr/6y2MeThvkebzqvMikBecUFCtu6lUwkUrFGFalXHUfxMHsF4Wzh+ox98vxUns7AU7lDLsfDNjGm39zfcPtNAv8fO6487kC4mrfG27btJh79tvEKs+PdbvYLT3rgUDCThnBSAOM9AXcTmF8sKv5SBjNTDuT7sUlJSSHcIcfbCEH8lQyuu1gZL80ha8KKKdGpm7g2vo2n4YpDWzVbanuFad7Mi6DfdHxH/9rhgdxHsR2XjeeO+7P4OUpTFNqOqymE05IipSrEQzSE8c9M5hsxzkZyx46dTJjWi/1ng+233TaO223jebkDhWm422b+7jD1B4pjfCCj7ROP0yk4H8uHTfP5i5vIayzzAzgN5bjL/ZcZHS9w+iSHXw3RsDd/n2vYsGEhAwYMMAtqZqodRVuNhtOvTMPKs6LaUAxXrSPDKS9rOrU1jX5Dw22bbuZDBqRRYFqvdIwPFF6eODcu/X8EsC5sPw52WzZvNEVoVjNSKuC0BmE/TsZ/sdxZe1184QUSF1fLc/YyyKX8sdvUdruTecXZYV5uDVObearbtt3fop9tQBy32wT4/7CNSB8dO3YU7NeGTJkyJR8nVXrjRwCvBgoZTWndTlYm9/EyGGe+PGw+1sDJjMf8J+J9N910k/kJIVtryFKwkkq4ZB4a7stQVcpwpqd4ScM4XgbkURxWnCc/eDjVycPkxj8Gdw9eEzqIeGwUwn/ApPUFOYxaBS9SUdyhpoivU1FkZR4UAdiYbHTtHJNhKX+0/KWgeUb/krSeGZYjkG2Ia/OyYck8k6p+DLRlXHwBtmTvl4krdht3e8xefJ9DJQ8TiD/uNrL9tpv4tj+QW/MtK77mY9tMyza1wwL5bVy3m34F0h3p8ayzzhIwmM9PI48h38+Bw2meNF9uxccvYbBC/CrhU7iCUoWn5PHLkqEUDckkWnElLNo0yjyckTA6CPbKzMHTjRvWy8bkdZKybrUU5OHHHCLwmtG110tkVJT8gN/wXb1oHq6wc7LkzMPNTp+kbdomztiL4BKgUWy0nHDSYCEB8QHTunXrGpnbZjQm17JqVm6/hpcFV9OqbactT3pNFygfjdf2Vr9tk8H4rNnGXWZ9LPFV8CtA5C8IPivNxclcCYc3KSmpuA1Kys/OuzS3nc+v4fbKQ8NKsllOtiFx3G4TgD+kSTIVz8rinqIPp4/4zmIVDN5PIfoymN+NwciU3IzrgZlhKJirEHdtQvmzrXq3i5VRA7zijuMswkdWZsyYKRO//komTPqW0Z7AB3BKB4qOETgUHikNY8OkUijEoYIi2XW4QNLTSFB7ZX1mrqz/4EN5D4YwdMgQGYRLeHzj3GvEJo5N0LbbHWf77foynMAOpeHAYsdrRztYv/5f5q/foxsqaP9HqknNSmgvhOUfzpe5m5xr/yedPMDcTKY4rWXTPJjQdrv9iq/tVBquF56dpjS3/T3FLYvNcvPbmp5+NzCOfdWlSxe+sRi6atWqQtDsUMzqrwF3FozSvjtpQP/xzGC6mHmKohcUG0V4y9CIdBTntLLakGoz/Ntvv5Vrhl8me9C5DvDz1eS8jtHSKi5SKL7wJaPJqzPk9dk7EFdBzutQRQY2ry6RvPDnX26CfSUK64halStIJJ4Z46I9An58Aq2IeRyIu7G+4NsRa9P3yvTkXfLOPIpCOTL+v/815qKLLuLDKOYVIg4MHL042mt5gVwqEJcdQuAISLGX9WReDCfBMm+KvBrPcN2+KO/3tED8rpaT3wsEjOP3MjLSDUqThApSNQoKDiTJ3n9YPljFq/8irdq2K57VA+XHcP0m05TkL2sc8bT9mCeB37DTl8VttwfzYBobNE93mO2nm/3B8lSsWJHveQhu3RfRDQbjLNYVRmmf6GWC8jKYLvaGQrHRmb8yeeONN4a0b9/+Z6KhdgYLzJmCrxcNHToUhWLlK8v5HSrjsl9t7MlUkxqVKuBhy2DhBT+0jpzWprbc0K8hTvIESVJMNNZP+OyxbXZs5ch46BgbqleOkAY4Xda1cQ25pEu+3Ddov0xbt1Nu/CZFDuQUyAcffGAMnoszrxCRCcgMdudoHTRf9dOmYYeYtR0Q+I77VmjqtqemgqB3miv5XDviJjfuIlWUatWqm98g5tt9derEG4Yjo5UV9JssH79Lm2FsXyVSu+zMl34y+/ZtqeYzHeMipBLbEsD1V0aGM4PVh2jPPN2g33CHl8VfUlrGaZl1UGKeWh97JmW4nZftJr4OXHQTWF+2K/EUNI3axGV97XZUZRjD6GY/4amBYD5kil9V7YKNehLveBjlAc2+RLs8DMYScyGEIVD+zYoAfJwF2Ei6OGbhtbK02QDZ2dny1OOPEV8GtIiXx89sIu0Sqwtes3TuIilv+BupAsJbgfEMU0HkK+ITYib10T9+VDSkE6b+oxjsGGYRZGbFhjgaRHNG2zryBS4RXvX+WkRWoGrWXOHgZTyeGGfnsJG1Dpqf+kkYjOegQeXBxk2bZOWKFeaU+tEn0DTVz+2YGnEyYvgw6dqls2E4dibzVILQ7zAl3TT8HttYy0VJgWtdDgo84sPFOfNQhtW82Pa7sdZdNG+2KUjb+EiJMG1ehJl9H8KOSOMalYQqarsM+m3NxyTGHyXQ4/FrXqQbbT/WDet40478PuuDi5DFs6mWiXj2t+lmHPuAbYGfmDVLD5arTZs2gvdfDD1qOi2vtiXbi23F0y1cnzI/KsQ4WGobsr2pEQeD+fgtwAMwXGdwVCTVuUkSQT+H8jAYcclg1+MkchKOQ+U9/vjjRrERiLlYMBaUhLhi9Rq851NfqkUWSGrOIdmwc4vUrRqBx1YqSVbuYVmRuhtH44qkDsLa14NIiNdkC/JIzM46xs9HIDinEr4wjLh087gPCFA4+9mAvPiGBBsVehHIjdAcwoqFWHll3ybSHS/UXvveQpm2Ic48XZaGteH9992HZ9irmEZWgjgmS9SHnUMiWYR33D/59DP54nPedHAgNrYGOikc8f7vIpi4ZPQQI0KGmsHmCf9ggztJgh+5MASnxKR50U8GIdGRmbiOysJAtQrMvHTRAtmRskmq1qglDZo0k4Z4bJMjLhmFQKZlvZk+FbPq4lUYTDDwdqiHpwHYTmibw2gbQo2EBoag/URUzGhafzeRMpxhCmX1axoSMSUF/jLKYryBv2jeXNm2Yp4UYSCNjKklCc1aS8/efYTH7MhAKlVoOWjTMC5lyxYZN3as4JcvtTjSokkjGTpipLSBQov1Z1so0E9anTFjhiSvXSPJSxfKli1pZhewd+/echkeYOUrWWQy9hsVHsOHD/e9+eabfMujPu6OXY+8noFRXtCsA9ouqiwRj7+PWwkcn4xGrYmKF2IR6ONhXhZIG1ob0rbpfuaZZ+T55593fSBWmjeIlNU70Qj7thfHDWpWXV67vKvEVY1Ewx8d3bm24uhHNfP6tD3y3aodsm13nsRVCpO4yuFSEUwZB3EzFOu46nh9Nq5alMElQXEWNJQO2oDP3Nzds/eQ/PvLpfL8tEP4drqci9PV995zj+k8hzGc5mH5SYAkDop87733vowbN9aUNy6utgSHoCPxDQnBWgsDCqEI+IVH8LY+3L6wcClCuQ+BUQoP7DczZX5BvqSDqSHnC3/7LBiXHc3ZQKbF98jIPKDLExiffPqpTP/0A9nB4a0EuBm3jXmHi+sGEiaZ87PPPpVHH31MGtatLbNu6CA1q0VCwVEgt32yTF6Yul769DhRHnj4EUfU9X+XRMn668zJcrBM7GMF+m0oyc+207xSUlJk0qRJ8l+shUuCU08dJFdffZW56s/yKH0xL7YN33Sk9OQAX2SjwotSlbNpfsmll8qFOJ2hAyLTM+1/331XPsTy4Fhgn+VL02bN5N8PPGCkAn6TkwNf3wKTFYI5fahjOvJoDGRO/2yMYxsBAW5wdnDdoT/3U+4sxEh6O2av0yDy5eEXJ0NOPPHE4l/WYANrI9s23Rw52rZtY0Si/ViXRBYekrx9B/A7HQckMwcL7SMsrwiERjM0rMwCIUItP6B57eJOZT4+EGEeGOWN6cly8uilMmnVNpm9MVO+W50uny7eLu//tE3GzcyRMdOz5ZnvN0o9HBgPRhsUYHSsVDFcgsgEAN7eLcAIHhERKv2axoH5dsmMjRVk9er5mMGqmrJqHYjPjuFxGjw3JyOvvEqm/PiDuU8UEQkGDoPaOzhEdmzdIrl7dsu+nF2O2Z0jufv2GrMPboYfhL9qzdqy7wDqB+arVStOvv76a+zVxUgzdC6JUAloNcSel158UR5++GFZuXKl5DoTDkpTRW7plyDX9KovXZKqY9M4XJIzWC+fzJs7UzIzs+SEE04wgwTLvmzpUpmDEb5Hwxi5CGveMIiI63fskSFvQaKAtDPksmHSsmVLopr+w/0o+e67b2XG1Kn4SaAVhsg4iGq8zWQm0P8nULjWh4MwGYt3A/FTQ/5UEXLbSUly80mNZUjnBBnYoqbsP1woG7MiZf36pWb24UzGdtH+IC1xRn/22WcNk/HqzdtDG8lrQ1tL/6aV5atVWXL4SFVZsXyukUZ4M4CDBRmNT1a8OHo0p23pVzdC7ujfUO4e2FTa1okGLRWCmbaYH/fjb0IzDcvOwQp7qUF4756zWGWIpHyKawaM4Ql/RQJaR4ekgCjFnFoJ0/J6jGY1UMlCdLpPp1MdXbQR3DYLyoZhQ3H/iyOiiglbMc1XhlhGEYfXXPgzNE8++SRKEymbHuklSRAhzZV2MNehI/ly/xdL5ekfNxWX9qILzpeMtO2ycelc2bKvmAr98WRZDvsH5KtRneT09nWNeMTBl4NxIRjOh9nuMF6zHfXfefLWYoyAR9LlPZShE3b1KU6wLmSulStXydlnn2Xy5WW9Q0VgBjBJZnqaCasF0aZLv/5St0EjiakdL9FgPh9mPPI0+yQDs9W8Kd/Lwk/GSwxSFNVNlMO7MqUqNsK3YZa6/fY75EKcpuCs88MPPwjfvnDAGSifOKulnAgmqYsZqA5mdh+UQoKB4yA0sinZuTJ22noZvRDlz90qfLXrtNNOMwTy0YcfyFNPPyOD2ybJB8PbYvYMl7emJsvw/y422XN2bIwT5TwMzLZ/5513/N89anGW1fzYHspM2s+K6fYrc3ENPnbcOJmAwYSaYfbJk2c1lXM7JEgilFhB6AMDqGru/iPy5MRV8vC32QjKFj6SxBvI2hcUDbnWxfIE8VXl9UsTZUSfJmhQ9D06NQvvifz7qxXy8ozNkhBbVZ555VUomKpR2y234qGeLdvTpDNE5QnX95AYLEeYJg9PhZ83dq58tTxNTht0qoy8ynkMl/UhzXKtBgUdicsHOs4A83EW2wvjdA4cgcCRZwLFOuEqb46Ki4urgSk+b/To0aFcSHIk0dFFG9fLZodwROC0y0UslQkEaCKlW7duxq2jDJ88dhjskGzcmStJtSo58zDWDu/P22yYKw4pOuOtu2uuucZsHLMcHCG51qPmjgz8Je6iffAh16QOnDFmLggsXy7sVh/SgMOIXN9xJguHaPnQmW3lrWWzDPIY/PBfY4izFAk58kFbWsxcdRLwSyK+EMnwHz069+a7pEPPvhKfmCTRlSpDSoSq3rQ7W98hRtYf/6V7334ya/BZ8tIV14lsS5Ea9erLrswMSUTap556UmJiYyQC3zTMFYw7dWizdy5rKt0axkpD3qQgU5FjITZz0GG+EeHB0gwKoSfObSf785bIG9BnzJw6hUd+ituZleKgEsxCIN38LaQNHO498wxJSkw0YujdYCIqa0i0MbHBMrRNdflydY5s2hUEEfNRMxtgv9MQOr9LoK397fYrc/GUzX33348ZZTlQqskZrUJMWZskYD2IAcIUjNmhHyhmR2Mb4Yb+TeVJzMaHIdwsWrjQ7FnyO2SuVGhpHeYKkfPbVZBLu6I/0R4qXsdg8Glfrxoy3CyxUFywjBzc+YoxmYv7po9gsIrBgWe+wU8IxRbPqS1rGgZLXjwPNHSJqS/plfXgaSBoy30vvPBCHtw1UaerkYyzgPIGs/EEIpQErDpLUQGEdi3lZ0Bw7969DcPQw4prI9tudxz9BDKSjc8wTUebR6Qax0ZJcuZ+7GU5DRAMRuC6YcKKdKJLaK0actddd5nLnGQmTuNsSGqCaNNQNGjbrp3REs2aMV1mz5wlF725QBLQsN2a1ix+6IV5F2IGqwMC/uKyZnLW2A0ya/Zs0yFk9sydmYbA+N2kho1lV9ZO2YMR7YxrbpYB510kteslYdYJcRQL6IwinERBAcAHRYZgSDR5IICcQ0dkO/bmmnbsjJdxv5XRj/9HNn79kcRiJsuBAoPi5itjxkl8TbzyBAgOL5Qlt3aVVkmY75SpMIOTeZG9EXOJx4G7ELNYBYi7PRvFgME2S25OtikPiWNHmjPDxlUMlnBuxIPBMvZhzQtoArGUM9fwyy83zwlQ3Lr/lBi5tl9TqYmfKroOzwgMenGOrEkPljvw80ZffvmlGRTZ5hxYvYBtz+9yJubI/xBEXIe5KstDg2Pl9lNamLOQr/+wVhak7MZeZoT0ahwjvZvWgiKIUgF+qhbr6Af7xMtdX+bIhjUrzaBJuuBAenTtViD3DmqBJ+dCpQD1Zz+CXc0AsiWbUhyGCmhsSRtkcmfQFrm4YzXpia0brDVMG3I9zgZtyJeNARt2QJTHdzjrEVgf0iVFVQDfuifDXgs6Hg0/F+/kEfNp2D8D71Y6iqZrtCGYvSBfST6UFT7OXpwxCDZz0O0O8/Kz0ATatjGB+BMeidHbgJMfiTUEYsQpkNEJW9N3GrFLRxjaFDlp2PlsIM48fNH1chDP3ffeZ46eMO35ry+QbIgRXM/5i2vKwFGwf/M4GdgynGgyEQ9zcjb86uv/Ga1T42YtZPOGZMNc9739sQy79W5JwM/2FEE7eQSipA+UzmrtA4Fswg/VLcrYKzPTcmTq9hz5Afa8rFxZs++Q5B86KE3q1ZU7HnxEEgdfIJmYyYKjK2J0DjMHcqmJlIatZeFNHaRV/VgQHEZR/zYFmYvAdmab0LBvTSic+zEImXj8CUX9SQxfve8s6NvXjTaKHTJY9j5HEbBmzVoMHo/4mStExl6UJA+e1VZqYhbgzxYl1a4s4y8nYTlkwDUUmcdmLu0/82H8Ydk4Y7Av3hk/3sxAnBWfO7eu3De4tVTAoYA3Z6yXke8tlVdnp8hDE9dIv+dnyks/rmVq04ZUYiXFYH0LSFu7xHyP/cpDAiwDd4pGn9dSWmOrhz9WQeYywPZAvzbAAE3YuGiGoYW58+YZPygL+6uNJRR7gVwe+MkQcUWSseegwcFNOUM79LBurCsnBc5ikJjIL/lgvgTYlxIHoDzi+Fx/S2MwM9ThI9dyNAIEUUxgI3sxE8NswwQ2Hv0EDbPddphVc6BwRETDYfQ9AYt6jrIEioPa0XYn243ChqHszt+Mev3110267TlBuGC4ha1n/PxDJwkqCuuTEd3qmPA186dBA/e5fPTRx1IF6vDkNaskKCxCnv92pnQ5aQBwcHAYnR6CDmA50nEyYv6O3fL99l0yNxNHtHIPSRaY4wDKQKgAETcSnR8Rhg3tw4ckoUaM3HTbHSYuaD9kIYidNbFs/mrJenmqfytpm4C6+mcsIrG03Ig3BlpLvhPPdVgQ8vRBcbEX3/9kiTPDxyXWl0isG6mB3Ge+UFU6m7ZD64G4OiU4o/UszEhz5sw1uX8woq1chZmL3yFDsx2LwLAdMYM+fFoDkwvOmxrFAgcv0oANxFeg9m0BRDtHW1dT7jululzPvHHqZhO0vyPeXSIcKts2byrdT+goFPlv/GSFbMaxNt5RQ9NiNnPyq1wzwYjozz33vLxrNI9hcnbryjK8R0MjGpoZSD/M0oMGd0FSIDTv2s+0wXNQiBBu6F1bOqEdOGgROECx7/hkwriZKSasfb++5nA466d1ok3D0/aAIO7dwQ8534CTmd/jtkpiMBUfT8bs1QbKiYJ77703mHst7tmLmSqD2LbtVhw7zHZrwUwYRyIb2HkIMqpwOgCsMHG98jg2aZBhMp4vc9S6uXLth+vNK0pcXDuzgD8F8uuYSBUEtuyad5RZM2fK5k0bJRizFOGFb36QRi1by2HMkIQwEEPWwcMymzMVmCsFRM7yRGBErYAih6KMZt0DXI4RJJnNew7I/vwiycndL0cqx0rbG+6X7D1ggwqREgVtoqSuMcrmolAMJEUOofMxUCbeB8LZjT3DTMyQ26HY2IrLklkYebndMG5askxd67RNv5P6m/VKBsQ/QkNozOpAOcJZmkx5SZf6JjzTKMJ88gJmg0Gt62DfEfUEw3KmZFkN8YLQL+hUDz6O7TggvHKFsdn+XkCCJQF+ie0BQt8mQXLryS2gaAWpYZ317UpHZM1A3J33PyBXXneD7DCY1WTvQWdJwI/noC0JuXtzePhWvvlmgvFf06OWvDuyh0RBtAQX+iURP03gE4cgLs7ZQAUJIDgU6b5x3Ph7bd/G4sMrxmZwYlrWAUw/GWWavj7X4PXo1dsotdiPrAvrSUMpiZIblB3BkJAKcEywDRKc7M9cecXvPWoFjACKU2qRa/yNWdS/f3/zUX6cYW7iDuTn59xxWgQ7XN0a57a9u/Ro3sR358FyciajwoL7XI4MfxC/NZwmV/dr4iclh2G56Ob5xnNbRssajkuZaVITs0EGNnXvfO09qQ8x8SD2sULROaBVWYGZahUYhswT7i9cEEbvIKjtOXIVQMvIRmQU7TAw3raDRyQzNRvpCyUP+2Z1W7eXpYzHtgSfUyN8sjxFrmjZSKqHouzIfO7qHaa8s7cekty8INkHRth2sBAaxEJpUc0Rd9YcoNZ4B4/3mJ915SBIQic0rhZmzm7Szc339hCtVj4wQB78arl8sjRd5m7ZL5+uWCR1owrk/tNaSdO6VYqVKKwoNZdnt6ssny/ZjUPUO0x7kvjcbc38OXtlZmbKLP/MeGPfJKlCZkCZeT70xZkOg105cqRRUPFhJAf2meNyPN2zISVb7vrMYeSMTEhOoeFIj7OTIzrJ4DZ1ZAcGlbVr083dkW54mbga1mycdc1vmqG/90OyIKyZ9a1EsSMA7w/vJI3jq8rW7bvlAMTK6tFh5lc8F+I1rbPGLQPGQWnVsoW5cUFm8tN8sc08KPp2xpsl48ePL/LHj0LwdzDKK0Q7BgIxmKEPYDaE7HkqNTeXXnppMK+jUBYmsHG1gd22xhtEP26gsJLCNX1JNr+tjaHlsPE1ngTXEOXngv7Nt96S52akyfmdEqRaRdwTA2OhX1gpKAKCpWW9OvLpN7OkfkJdydi6TTqef5m069kbfXzYMNcBEMuCjD2SCmah2Mf2DcKintdojuzJkf3bsScGFqvcoAkmBBxzwvrMNDQ+wlktjxwJwPazRMXWkpiWHSR35SLxYf1VPTpSFs3ZIHsG4y4bzg5OWZIqA6zHQE1C64//vK4JoVKGtxA4mDgijoXod5r2QJmPgCB/2rJHQiOj5cOfNhUjvr8oTbY9PkjqQH3OGS0YI3za7lwwF8RYQG2cbiChkQgDMdnq1av9+VXG61WYiVlffHPrrgOydnumiasAEfadt9+W1/yi+42946URNMZzlm+XE5+l2BolsRX2yUEOdGCuuXf2wWGCCGynzJd3F+Qg0JEiBreIlfevPFEqYm3Hn7gNB4Ne06exTFydJZuc8UXuHtDQPBF+38eL5JHvOF+GSfO6ONkSHyH/nUckR8q78upRRimiShw3PbHOvO6EI1TBkydPppZ2EAaxhshgAwwJ4Vi5GQElMRiRh2BvKgT7GPn4naUQdhz3dOyG1UK4baQtZkDbrXh2GN0EO84J8frrECdxbXzbrak0jAxIgmP5+0B9TQZLxl0o3ofq2TzCOS2CeQZZmjVObWjQCFwvEQZfcplERWDhj47OxTP7M3fkyG4QXxSIho3EkxoHoG5fM32yLH/xGYQclJNv+Zec3QprFzDYnCNhsqcI4iJmKQx9DjPje5xZw6A9rI49tCwwWBhEmmoVcHYzd5/sOhgk9VGe71aSIJy3xM66/nrcOo7jdGtmCvbDYazn2CfctOY5PJ5NpILBXifx0DSSmAGEImIKziG2f+RHky//cDapVLmSfP/hW7IsdZf55og+jZw0YI7PcXZTxKzBBT+eWJyODrat9gUZj/ucX336scG5qkdVSYrFeo/TPUTEzVD0ELomVRNs9Rg3pie57IRYuRhi64vQLN74CZUdFBUPy2HUnxvst/StL9FgnMR7JvrTOFaHOpVlwqpMiISZcnK7umZ25rcGtY6XL6/uioEjRc7A46p8om74W3Nk6oa9SMgeE1m9zTHGgz887dIcWlUOxErfWjfaNCoJ9ezZMwgMxh+QCAGDXYrk/4YpM4OxK8jSwSDIi3lmDBurPt6fYsfpR5V4gVdM6Bqmth1XmttOU4hjRAbf/HX/YfGOBTstY9x+xeYIhAui0qllM1mwcg3UxDnSEyp7NJ9B4ZojCMRYGXI6Ti3Krg2bpP2lV0ljEFVRAW5do/Nmp+fIHjAX11nsKoqD2xfOkcm3Xi6d2reT0R+8K5VqxksSxJbY0CLZhCsz0776nyS27SQ1EpMkHx3INnQ+yI3uEKy9HNV8EAjUB/UxN2MLQ6NldUq6PPNjhkHti3Nywy6/3MweJdXPFm84YBBCMRA4dcR3wTAfU8njB27kci+S4uRMnFARMFjWfhA4ZnUy44qUXXL75xsMNjWyCQkJhg5IhAqsDwcwMhgP3i5bTSapiBsTdSQEjMG7ZxzJVTM4d/Muk7Rn4zjpkRRt1of3frlaflhLBnTWYS9jL5J5sXyzU/Pl2dFLQMJg1sJ9cv/995tyPP3gvSYf85O2cGmzMvCMDnWNydxzSHo/ORnH8Rz656FunlxZhdMx27dtRd82k3a4DcKBy2674j4yX3BoinUmk/GpNxyy8PHYHLYjLgZfPAw0dhw71t/qTkKvGYwl4WrgJOwrNYR4WDBy5Mhgqik5dSqDMbl2tNqlhdnxdBM0LW3mzY5eleoXI9DB5QXNz06nebNxeFqkQ7fuhsGWpOaaUxzcHzKzF9sHTERRRoIiZQeaasgpA6UixJkCzF4rs6BUALFEYTTm2igEM9e2BbPl+9uGY7qrKTc89Li0TARRgRnNGgunPSoCt/qBvTLhsoFyzmezpBL2VwrA6KYdUUg+cVChanWnuHAX+cjcOTjcmyEL0tgOuUbjxmfw2MHUiuoI6yQ69q/2Dwk+HwMiITwE9WLXY1DYja2C/62iiCVy1ZVXmmNVzI/Hl+Yv4VokTFrWBiFzzwynKp7+bg3CnGUBfy2S+1tKB8xDgczF0X/unDkmqF/zStBAol5oT6PogfjWCmugBXf3NVdl8sDAW6CoWZq6Tx75AbNjgdPnVERxHZmYmGiImZnNT96qnzGbzL179zZ0UiM+Udal7pT0vSgfvlM8UKLfeCyOfXTPZ4vBXBwKD8ltt98up+JnZblO5D4pGYozPelDJ4/iD8GhdKM249iuPBCO86M+vP1ZgP25Rjiv2A9Rk2GUd4hqwIvB2BWES5gxoKhr1660i5nBdvtxPONsvJLcGkfiwHv29AKqSCPzDuQxAwLCHT+/q4bpCFoW4wngZ4PWS0wyKCszcfoDDBMORuHhXJ7syAchJGdi/7Boi0SjAxvjCBd++1F2QKu1ERo8rrm4bcBDvfuzM2X1OG7oi4y461a8K1gLtIhTJWAUlgjZQYwsknM6tZDYrLNl4hcfyXnDRxnmMolQB5Y9FGKiQp6/uqmZ2ZKS4zDI6SOGmw1eEgSZgaB11nRqsw0YR0LgOyWECmAw00IIzz2UL7O3c7AVaQYi40YsT6q8+Jyjym6Fc3ldGsTwAzIFCoDxPzmEz1mDR8RsEcpkgj/8JomWVz9WLuD6CadE2tSQStj20F9uMSpxtF1HbPKGbcqC1nOjvLJoP86R7TT4nTCLDBsxwigZWEduw7Ro0YInKGTa1KlG8ujbr58Rg3WQicN6SOb/JKm7oZZHn6DIBowkgvJMw49ZvD431YSNGjVKBuPWPQdZTc9BgW3K8uugxbZTOlK32yYuxXGAEuclcJPB/CVglANuBiMCWx9MWmXg9u3bBU8BBCcmJh6jmmdSLYTt9gqz4+kmlISXBQ0UoSVEB2r0TMOZEO8/Wnl3rP0NjWMYDcVAArTlAG0jONG4uThxsTjTkdP7n32u2dHnAeMUjPzEZEoSC0XDzHWr5MB6ikP4/RvI75GYrfLzsC/l72l+KyQ0TLK2pkjXPv1l8m03yZ5BZ0i1uPji2YUZBllMc8BwWIRsyDwgK9OdmSO+boIRv+xR1qt+piD+P2QwEhIhErORsxlL0gNgf8tYiOcSgEePdm7cZMKePLOZVMcthCxcyLz7S9btsLRv01p69eplmNYg4Y+73Ul0PHO4chNnG58kVce2QHE7IATMdQTau5cmrZJbP1+l2Ujb1q3k4kuHmPOGlC5YRxXVOBhy5uZzFHTTkMEJnEmrxzii9dYcHBtH3ubWu3+gPIxjUGPBxIQWjRvKqaeeatxsFzKWth/roXWhXRqwnmRSbldBtPbNwYyNde9ArIMrIy01QcykmKic4fBoriqTDUBlMYxJPu4rmXe7mamCFo627Wa8HaZ+O53iu+MUR+0wbua1hK4AAEAASURBVKqWocJ2fppnSWGsx850Z13TpGqIVMAxp+LmwPfYUcmHnIZOSEzC7BYmuYfzJB2MF4Z4s+6ijXVizsa1zh3yxHYSW6WSBPHckh9YBpaf31uM+1uM6TPgZMlOSwVDsZmL++CYYY9vioRGhcq8TbtkFZiMwJlDR1gTUMY/KiJG47yiYTCM8nwy4MQEZwb7FD+CfhUIb/HMmRBKRZ46q7mc3Kq2EbemYvZabh7FERk+8kqz+WozOIug/aPtzZMvDlSUGNxeIKAZzIBG5noAV4Nu/Xy1g4K///nPf+RJHEQm8/KMKkVP5sW6Mm+6aai4YZj9fcaHQ2lF2LY3z2hF2ZCootFYJuOpiE/9z4Gfd/GlpvxkXDIXgem1/Oo3Ef44t1txaZNJWSa8CEz+yYc2kZw+wJ9Gech43Qzmx5FzdPTjVMgMtbK0CbZtuzUDxVdcxSnJb+OYhtLMPGzN305juzWJhtFmJ3EETEvdZqLrVw939l78dWIg8Q77Px5RsZKZjfYeycOJDKQ3fIf6I59CjLQHdmUbxoG60SgS9JuaD0dZ/lzrhG8mYkznOctKmDXBeMcgmo+aEIZzdozA4LI265BkZjtrJZ6xZLm0k+3kXm6tZ+ZOZyABf5m6czsiGursewe1NMkWJG8RtgQENRlzURu5sX9zwwx5EJu/X5uF0AI5HafLSQM6q5iE1h+WScvF/S8HQqUSzgii0I4XFRs/Z5M8/v1GiUY7cDuB+1/cV+XBbzKWziyaFxNq3kp/GqfMtml9ssm/W0Kko5hCv6E4+C6u6eC9fSpMeKKQ6y27/TQfJtZvlOa24zW9alT9s+o5xHGDLSKyaEY8xC51H55jwxtxwTzxbo8cLChB7ZLc5Ykjrg2Qao4lRDvS5bbLYke5wzl6UYxZMutHg9aslnNVgpuvztfYQcEQqULMvfAj/hMbhxBP4QqkZGiGnUhGKIDanWNo7poFWDMckKLYyuzb4nLz+7qmxJM9cgAKnKgq1Yrbjh1FnIN7nT0mPknHklQAJ1eLCJaMHEccskUaRJcKXA9xL2rylGnAjcTxKBSYowMGSioDBuLazpL7TjK3yCNxSqRRzWhpXZekiNKDSNnF/nPWkli/vtne8GIwlp2G9WA8L5ASzmhXEVdqsK6kggNicxqURiPfW2niuuMG96233moOdZOxCGQYBW0T9dNWgtYwtge3A5bN+sEEtYnHYW8QjLlhwBCUaT0OixO6nTzAiPmUJOx81M3yE+zvut0Gwf+H+Cwv88OzboKjgz68QMWBog8UdD8TE4/WDBOrP4+e/imvoHfv3kG8C8XMtDGJo4Vyh2m44qjfxnPH0U9QnCN+zVf6gQJsyJLcyg+al52SYWwYns9bl849HWw2chMUdOcwD7HR2DgT2AAv3BL2gPCZLhzrB6Axlj1hwqheD4/CGx4MA1tMW7NeDkJrGBpE7ZXzVAJFpg/ef09atG5rxMeFyZulWvUY0DnFbWfkT9+Lx3I2bsCmM3Lxn/DmRnSmQ3tm/cHXu9gHXsDy6Qiv8QxLSdlsvC0Tq8pFnZPYwPCjFij/dBwNmoS7TzwczI3g1vW5GmA+wAEKlT2VsR9H2I2T/oGYi+3JvUWujejeme4wWNMazmtfRcwPea3ZwQHEUdhciNe8eFJdFQ1M5wYSuDKAxtlhTMMnFLbsYeuHmQGC9TLFR1/lYnSYu8nZt6uIC7QccAiah523htnxtltxbZtutjF5o1OnTqxAAUTGGrB7Mi1AeclsTzhBR/8OZIMCirhfwIyMx28bDyMtf1ncpeWh+ert2W04NMt3Onq3wI1jjXTZ/C6NVt7rG5qEOKzXfP/J6riaeASHVxTQK5yZHICrKF/2+2eurZs3GZEyDJ1mA79J5UXlhCRZhYi4mGry9stjpQZuK5/frhGOTUHWR6cuxW8Br8aJ9Qcff1J+nPCVHGzZCWfoqmDmwwkJlGcfZsYdu/fK4c3rTI8U5h/BWgkjMdZ34RWjzSfRgUbepxjirif9JG7aZEB/v5k20fVXE4jB1fhUG+uJ2WT++p3S+9kZdnXkraHQ4HVvaCY5MgVvLjTBE9uE1csWG40er4soo7H+JHJ+k793jPdZDKOlb081afiEAyqCjV/MGgjZgb0oQuv6daUWzvNRInIzlt2XWk/aDLeBYTSUsByoZC6gAtG0Ke/3PTlppXy/xhn6qkG8JoOpFKb56TeYB8PU73YznnF2uIYxnBeFAUX+AXAg3F8zQEFFRLYDuSoYatu+OzDV4zkAHzffWDAbtIBqa5ztt92Md/sDhbGQZOrGMRGSjGcDMnCI1QypTOACzVMbhtEa5kI1hMCRdtPmzfISNjAJN3erae4d6TEpoxmE8iEla6+sXbRSEoDz47z5Mmx/LloF6ma7n/2dHtu0lcnrYHQ1iU9ZKU/e95gE33eD9G3ZEO+DYG8F5PXk86NlyfIV8tV3P8hp4z5BXhjcUE/mtwuP+hTszpbDi2eLrxpmEYiclOSgchNqcHl1nVsknKFsoJ/rOxI8Z2Rez+E6jTMDw9iOuf4rKZUhajrTEo5oQdHw2owNJquOjevhJniq7MEByMvHLzZvmJyGG8a8j0UmbxVPaUdk4cq15jm6tshbaYFtTqL9/PPPi+9ZEbeOn5riq2A+RkWUN9QODQ8/hrHYXzTMS2cZfoPl135V2+5b1n/b1i38pHRvUkFioiGoY33JAWTioq24Db3exHHfjjexmVbzUdvOj2Hqt+MDuZk541hOiolYo/qWLVvGQaYvZmaOxuQl9iRkGgfUbgUGa8yIvn37BnEBykz4cbfxpysOp19xNE7D3H6tjIarnzZHtgogWIKeRFc8L1u/qXnYOAxjZzBPEt7nn33mjw6V09vGs5UwOzqcY1TrGP2+WboVi6BYqdmurRSuXizbUrdLFO5q4dxt8UxKtTqf+K6SUF/aDL9RdqdskIONWkh86gJ57OohcvNTo+XVj7+QJavWyNsffiIfvPmadLziJqnWoJlRjlCjl4srE7n43pHtm51tXJymD4HomAuFSkRFrF8AfFuDTGMTHOvDwYIj+JgxY+R0PHLDn97phz2ipXh/g4RKnDxe/ASEGo6FA2VOwyn8N+Y6a5Mzhlwhr3zwpURWq2LwTn8FN35xOp+/14wMpAXugkVXw0YxYB5U0Tp7kbDYnt9//71hruo4oiW4FVC7Zg0JjqKgKw7BG9exfzg7srWZh/Y1xSwOEFQG0fDYFwcPd38qsXP9RZxFP803mfdIjHIUKvDl4jDxU987zNW5Ywdz452qf20/zYMJ6VZj++kmeMVpmNpsZ2o/MQgaZoKb05kz6qLFmY8yFhEIPf0jSQFmEuTjqCQZwQrblfbyE0/BK94rvR3GtCx0YaERUTWrYhvFATgMwbIZH8rlBfb3SZBTsBB17oRVkCfObCRNcD6NL1aRsUwZINJk41jT29M2SWw1XEo84CyCZkOkDEOnxkNTeAQEog3FNFyrNDv9AqnVrovsWr9KDjZuKXUS68vKrz6QN598WN56ebSsnjdTmp56jjQ+/SJnv4tMjyLvwkzBNz32rVhoOqFqUCFOWeyT60/uIKO6cv6E+nnzJkN8JGitD+tCQrzqypGC58SAhRLF1Db4r7/xRvHeVw6UOYS4SqHmXUiipWSRuZxjSjy4zWNjjz/7vMEjKXwwP4UdjXYpkho4j/lAbzAP4FX8ZnNKSoq5AkMCnz17tvA1ZwnGrLsvW/rVyJc0PLbKy6eEWL+K3nisP3jQwuTPPub1f4q9M7FF8OjDD/EwuTHc0OZLTmQyN7ANSJ8USWfPX4DoCOnWAIMxZi7OmBtxA3umOW8ocu4FF5pZ3X3qRJnDzltpiWHu+EB+TcP2gJhIsijwl7mnP29DKspghkqB3EdVrTxzRs4nGAL0p9KO1vCS/DaOP7mx7Pw03M6Hp9K9gEdfdEygKGHno+nZeSw3bVaeBMl38G7AQVmeX68aWSjDsd5wJnCHOdFvpoN+2pwp2zHwB0N0Gtj/JEmsFSNfP3QHrjhsl2YxlY3SxbQa0NnABShDBLSC3e96VGp37im7kldKKq62UFLiWI6ViHS87h5pf82dWFNVxGlvZ+3BfbVcHP4tyEqX3RM/Eh+OSkUWOqfDL+lQS3rWc/Z3ZuOUAolNGYx14VuC/PHulC1bkXu0PHV2C7kCYhKBh5PZDqz/PmjZCFE4C2iIAeF7/PetqMLhCQ7OHDwtMerqqxGSJ3d/tUO2mEuPaH/Uj4+0Og0lZnDi6QpevOXLUISu9YLky1HdjHhJ/wEchCZU4llO01fGC6fTzrxoqn1CJnniiSdMXj9MnQbEYGmYlGjeOOS6jnisixIy3WwHMiWfYDeAGbOTPqmAgG084ga1U1X8pXjNWZdpmIfmY9LhjzsskF/TecVrv1DTTuDDOuQh4/HPBKRkw32wI7CQ7chG5zkrleeJrMRL2/YbjxWvfi8cO0zzc2YrzliOMTj4o4d96ScYosa3q1PW9h8r4rt4NrCyNBzhODpS9KCmireSr7jiCvQfR8TDMvWWnuY1Id5gZqOxSjxlcBjEN35eqsmyUbeuMuTSS+S0Cy41/i/xuCjfvm9VJVL2GAWF82VHVMSbIDXjpPd9T0nfx8ZKuytvlWbDrpf2dz0mp74zUVqefYk5MW/OH6J81DDuxDUXSm771iw14mEtPK29bke2jDixvnSoFSQJfO3I7OCIrMWBVyoyWC/8rI4MGzbMbA2wBBOva43Lk4kyJ9VhTr7rR7E+B0wwZ/oMU8g6/vUQJ35U1wA7ncB+ICHzhoEDOeZkOhGp8m4EDeOrF7cxUctwPeMFHKca/847hoAZ+OKFrc1vA3y8JF2aVseJFdxPa1cb2wL2HhjwauHgM2HZxq3m6TsOeBwknOv/leRkPNUw5qJWxcolHdhNIvxRIucMQTH4k0+wlsXg8spp9cw7j1RssMzOAMyLLs5JD02vtptJGO4Oc/sVxysP4rKs1PJiT8/H2RJiYkfgsgONqpiDLdubnuYYITlkFeGZLB+J1D29KoMBx0BpfiIpDm0aHVEYR6Khn6BxcMjB3ZkmjBVAjHFzROTRqcFNImXCEmim8JiLMhRHKpaVjMoRjnskPALEdzW+nfw90qODCw7JPNwpasMr4yAePc7E0ZUPhy5IzpAPFzrrk9PPOtusfQafOlBeHf+uTH/2QWnaopX079cXP1yxQ1Jxnk+vqnC25UwWBpV9Yrc+ktC5h1MXHKUiFGIt5NQAaxdUJwNnGvEiiATt3S1Z335miCFv/15gxstN/ZthIAjC6fIoGdYF7/3N2yWTv50kzTHLzJs/Xx5/7DHgVcCx1UMy5eYe0ge3kB/H6YjVWxyV9AmduxjRauEC7Mvx4yBC3YowDGbCQFSw2fYEthdfsD0TyoAv8azaRLwreA6UHfwRDvbFELzCtRKXFEdPT5FPP//CpOGfO06qL43xpN4FY6absP0FEP8AtvTB77Df2vFFYT88itvJaepBO7x8QaJc2bsxbmOnyw6zfYKrOXXrFjOVorKv2c+8ZU5olRAl53asZ8jDkAkGzNU72I5oybatzKBEmlKGoVvBoSuH5gKFKQ7jNR9109Z40hwlC2xmB2FdWgS+qYtodKQshsGmj9PesKQTRzNAAY7jhzADzdguHBHK62chOPqwkcgIBHJ+Vla2pGek41r+JiMvt8MrUBSJ9KJclUhHDjcNiI7ipmiDKqbbZP7MaRINVfY+HDDleiMVWqUDWMPswVuDyzZsMd9w/oTIoBYV5dkLeuFGaxW8+uSsuxjnMBcOluIQ7xPfrkNIttSuXtkoFziT87zZqy88K5fhRyvGjThXqn7+g3TBodTZW9LNqXoqENhtpq1QH77WCzYyLUolCAHCibF5J2s3zsfthAkNryDZq5dK7oZVkpSUKOs3p8i4Yb2kZR0syA8fMS8lXdgpHgyWIrvXzcHzameaERDjMvLKl4U4kd4Bo/403NO6+6ttCDsolw0bJmw/jvAP4HVawiUdK0tTrDV5VZ/rFMM0CN8Ow6UAGYvAfu+EJxXIYO/O3yf3nZorTepg7w2KGP5OwOPntZcTsFf20aJ0+X5LrlzWsqLcf3obmYlBadLaXUbjuhUPCRH4HLrZ1kDDOO3C9Vyk/HBTDzkJj9socw1oWkMeOqOFdEY9UlJzcKl0PlLnSVfcGLbFO+ZJemMZua+4aa1z1GrYCTUlFt/SwZI0tt38yLtIUqMmZiZX+mUeyhCanx1m03NpeO54+knXKDM7Oh/lJE91giGDBTnDGFxAOkHPklE9r9O0/fFAbiQ3YMczQP2cDTmr8G26n6A04DNne+FfPP078/tdTmqR3l074/5QuCQhYDNMA17WY0fhH5mBb1Pwl1demLpRps9bYIym/bldRc5oEy1DO8fLyS1rY+rGtQTMXNpA3FT1YbZAgLw9a4NMWOkwwq33PmBeENIZsS2OCQ27fLi8/dab8vjZJ8k1r38slZq1wdDvrE+Lv4t8lJkYpt+hm9rQPVh3pe7HGgQzRx5mr12TPsL8IrIexNW5bWs5pxUYwf8GBxmCz5jd0CvRzBzMg3Btz3i545TmkgDiT96cJX2e+wmhzoDFQQA/4yv8WSbmi80FuWNgMzw8jDf+qXqHvwF+jJAA1YT8565b5MIrrjGHbBMTEw1zmkjJktm4wNikThUz41LhQfH4khMbyFntE2QvBgiKfHuwmXvqmEUmSZ2uXaQ2Zpd5CxZiIMBzCpwtnOZk82I0LZR+2M9chWcK5mzIwm+UhUvPJjWlMp4iSMUjOF0emwKhCtrMg5lyOcR5rg91I9opkzMIcP23YPlKE9SsFmiDmeNT/BYlkiieCaPXfNQ4jVvp0Ak5Np5xNj5xFF/Dy+Lnex0E/2NMJ4Dhx9FPBsunAzvRbVmB7t27B/G+ixeDEU8/RrdCSWEURfhk8fOQ339CB/wcsCAORePm4eeF5nIUc+DxM5rj1VdI02atxDC0IhikLwjvk5EnyBho+/YWVcDz2KFSo2KoNKgegfNoIeZsYRxEyXiMbgkQtfg8NvPIB5FRRNOy8jIhxZd3wVzXfZyB/HcK9016dO9erJLmV4nP2YfQF4d1X7nifGl387+lzeBzi/Myka4/hsZMx0NvhzVXGlTIQQj0YYDLWblQ8pYvkEp4UzERj482Dt6D2ZkimdP5VGeH46r+o+e0k5Mwwu8CMbfEvlRLzMDhuAKyDSLbeWPnQJMChoFEgDcizPuGF198sVm5UU/4v1FdnWfNMGNzW4DHwRpApOO7Fhe9sUCy0rLkoYceMqW++OKLcAfrTBl++TDc9n5bPlq8E88p1JNotB0ZjOVhW/G0On+Ug4Q9fu5GtCvKDLgCh4GpOieDTVh5ULbiJH5zPP5ZZGZ0p+2YR3M8Ntq8rl9cxIy6eWuOnPXyTMnIR/8fypB/P/igcEDj4MZZQYF9QGLnG44OVHcub5K5CPjEIfQvT9UTonmGFOlJw0ynjMI47X+6CRpnh2sY4/XbdBPcfoZx9iTP4O3EIP4oCHipHdsDUKAzWE0ENuBlR26awV3MYMSyP04/obQwfpQzFxe0RslgUkVKv+bVpGVctNGstoDdPK4imCESKuRcmbc5R7bnHJROeFSeoyVqbzoXlhkQzWCFdj8XR38Gtoo3j2hSbOSPPfDRSoPE7zABAYxlDOM1jOHosAxonMZMXScPTuT6xTkVwNeLqByhhtJuZHU3wojbCwz2wJpV0vrUs53vmEIx06NA5jLMjCA+50axMBjnDH14xz4/J0sOfvmWudfQHpqu3RBx/7tooTx1ahy+jXKDEfg9EnYUnlg7rSPagQTODEE0FKcuHDdHludg8DmcLk/jRzVITGQuApnry6u7CDeNOWObpGwYNgkKdiHajr9o8/qMjTJ2VhYCc/Fk9gfyP2wad+mO56QRMnlVqizZ0kB68BSN0cQxMZoS7ck3OpbjlvMNH1OkPmJ+uIKHgZOTkw0Oww5DEeQG5mBmUtYDfbVoXYZ0fGo2VK2YucFcd955pwzEOUWbKZTGTHug7Nu2bTXZtm8QITX5kA5ozNQL7cVfi1njP19W3X96QycJuyzalwzT/OkuLVxx3Xj0k9ZJN1iH+chgWJM1AINxSstQBmsITVUlBBRCluT72z8jMhZCP0K3De5w+jlzcUZ88rFHDWqfZnXlX6ckmZ8N4ohKMSKEswgBbj6ywp8UoibIbHaiM9mh5AtEFwNvhOBcilE/kwCPiSSyDejIQyDurbi6wB+cOwKi5bfpfnjKdtmezowzzXUQXlHnmsQePVkPrh11+t+wapkcydokXS5/UpphrbYme4/DZPY3/bzAJ+bSIBLuwcgagvOJvvAICT1ySNZP+FB2JK+RBx58SKpVqWwuFFKQyNh70GjEWCLWglVhx0FqdNoDBDRrfbqc+dpiyc7HMaaD6ebqfGdsRt/iV5tLxRiZNrK59MKsxxkrCPUPhuEgwz0/MhumUemA9VRriIA3D8jFpcoMGfXBFtyDwwOpeBMf5G7gNTwOyouXfEHLzGCYXnlwNzf3iNz56VLgMDPBe/oXFu9pmQCE56OdCabf/P3HtmS/8iGdT+ZvxCvLyCMY0gsuXOI5QLNhThwaJWLa9HMAoTJmI0RgQlc8Q1eZkompEAKAxxerlqWYWQP3xJwXnomreTEfNwSK8wovLYx0gmtF7LpCuMlLDWGKGayl/+OFWNijR9g4TkW9Cqbx/jTHWMTXtJwmkzduQnxN6RgfZs7+bcdpAs5YIRgJebyFWjNDTcwFHRDMRuPIhM7k2iUgFDcYcIB+EIzEn0Xl6Ml0vKm8ACPtpNXZ8vFCrkg4Wv8c8ByCGf35QxY2cxFT60EtHmH5oXD5cYfIqCaNpFI4rs6jnBUwGB3TdSwOypaKh0f3gpgiQOChOLeYm7ZF5o55HplMM8e1KIruwJE0DjFQj+BA7F4j0jk04+TI7QOO9mnYm3odBP/AN/i4eUoUighsyPIyIveT+Mgn4ctLGkkv7l2h7jw2tDPnAH5G95AkVo/Goh+/LmOw+AcDB8rPZ8waYz1XH2uzk0fPgloeb+PH1padeD7gvwvS5IITdsggaOoK0baqdR03PVm+XZOHPPLMfS5uWFMhxPYDySP0kHn7sBPe0ydzmzZENficXTo2uh+ZsFxemsF5FisTiJDPPfcclyVm5uKAooQMhGIgg1G62uxXcLSDMogiPhUcCpk4JOCsPLHGtBhM4+18WSYb7DiGa7xXeKAwhvv3wwrhJg+RaGbrDNaMxEVg4VhRgn7IeDz8JYVTpcq9NBLBp/gFj6eWBMtTP3CNlSP/GtgAd4+amk5bhDfw9kLtzSpXwajUDrI7f072p80ZkrnviHnh1dUe+tlimz/oN23DbvlsC84u4udhDdNCA0atoA3cYGXNYhLjpWOPvtIfv2DIs4+csb2Yi2k5cvKRkzPPOsv8oATDEuslgoGPmBvRJFrtLpaTPJGB0XQvGJ33unaBY9b8MBGbRvfKjdeOklOfvlfiatU0BEW5fdDgQfK/Cd/g55cwO+FlpHBqTsll6LB9IJpJK1LlgvchfpnB2VFDv/LKK+Z9Pnaqng+UWgnyDV5Y2rLroJndud/2wvRtshp7ZOe0ry6DWuL9QFzkpHKnAtq3CZ5I4+tZFbBZGw8tH2H9jix57IZbZUZ8bexRfSuDX1kpK++PkhbczAVMXrJVbvucomCeEQ379u1r1qukFzLYyGuuEZbtXxP2IP9NWMclGqbmz0et2JIp546bj58mIhvukxNwiPkWXFth2+qhATKSm+b4XdaT4l7GBmcG4yzM9mEzmUEYjb4OUgqHKvYx349hmZifFzA/G9zf1PiyhNu4pHcCaQbQjH8Mg0FmbEK1bVJSktHgqOzq/gATKJQURxxWkNMmfwGFbh4MVXho0k6ZvH6/eYxl+tpMBDvMzfMPfZvXkBpRIfLhAjKHQ1Carsz20YFN+PNG3B9qgGNBlJNZbpaLp8O5gcvO1R1/5m/XSzuW+xz89cOluCSYd9ZQDELVZQNEJT6bjT4uBi4v+Pb7rgIsrHemyfJVS+W0TifIiFr50vh//5O6OB3DmYAdwO/wHBt/zdFhsHwZ3HKT9G1WGycujpgfb39zTqpMWsnZF6Io4GqcuOB7+9TyMg+WnbcPBkE5882ECfKa6gAM9tE/ny3Olc8WbzkaQJcvVq48EYqT2tEyNTkHo05tTPJp5nJiYmKiYTDBkacOoxfKN8NamkGPv8lG5ooA3Y4YMcLs/3BgYjvR8Go/GQy7lHLBG0EyY/1u3GwOM+rz12exL1kXMS/1nn322cV3wjQ94+h2A+mHbdW2/ymSBsZ/dspWPIRaV6rytWLM1jsy96F+aSZZp0Gnmo1fpWF3fnb/6ncUxx2n4Yqn8e5wxjOO5x45i6Vhjxb6h6ambRDnw070KhzzaIqTx4WPPPIIrjrheiCHYxd4hRGlpHDmRZUrT31TVT9r1ix57bXXjsm5HtqJays8XHsM1ICvMlT1fNGJI5YbWFGef4tJaCKtOnbCbNTK/NYYH7AhPomPhsoWgpaTNjuAHcc8TD4e9dU0HAk5Izx2z+1y5EQcrr3kUvls7kIJr+r8rq/myyLu2HcQczTWn1P+J8mj/y0Tp86UxBo4iY4ZnVdI2Kr6Pc6cFH1uwhqKP9MjkRDvDnA/ibOvw1QsQ/+TTpJL8dqSzrZkLh3tmQfXujPRrsuXLJbd2VnmhwC3rVopvc69UFpDAbF44QJZswSbz9kQSUPCZQPWoF7A36s+//zzzfqZp0bodwAKBSr/Q3ajaHny1ttvSzv/b3axLgS2AQcuPqDDc5K7coDrAfzReT4RQOAAEWiWYX7arrTZh9RG8/EaqZQg959YAT+JWx2Pp+6WD5fjZ5Z4eAIHp6kZJaOT5rRsHsUoDtJvFAdYjkBxXuH8FusD/inEWtaHrYY12PZqydaJwSJ+Pd54qwItWhFMEEf0ksDrAza+HU83G5GMRpvy+jLI+DOmTTMN2Kt3b7Nzz/Q8/jRrBn8R44B07trNPHJJArLzs7+jbs5E3DthB9tABiIj0bgbW/2l5c145p+SsgVXHwbLA19Pl5p168m9L70ig8+9CAt3il0UR/AGPmavzdi0DsbaYs4T98l5+JGFO+65D8oGKgp+LrIwb5aZp054yJW/LmnDQNzGPWXQYPNjgDwCpTOflp24/La2LYmKnayGIyo1wmxzMjL7lce7uAe5bt1aMOQSSV65TOo1biZ9T+pvxE62t+a5EEw/5uWXZOnyo+Xig6F4i8KUxS4H66JtxZP+1B6vW7May+pgicDsE1+nrnTAjyfwfRGWj7ju9Fp3fp/lYL0Uhzb7cTR+9ZPHtZxNd64FjwJ/ipfvHlL0NnX1Mz8x+L2yQEl4pcWRvt94440iHMIOwlIrB4cmGlNErI2IKvw4tWWsSEmV9ypkSR9mfmwwTpfEY8NR/uZ+B/0cmRhPoOhDla8dTrc2svvbjCPQZuOTwGzQdKy4DcTXtHa4l5t5cPaaPOkbE103qT6IcoXUwpojHOcij+AAK3E4UvGkRgHucvkyoYxYPFU6/B953wGYVZG1fdILIb33Rui99yZdsSH2rmtfXV27u7qrrsu66trb2kFU7ApKkQ7SIYQaCCQQSEggpDdI8j/P3PeEy7tvIKC7+33ff5L73nvnTp9zZs6cOXPm0mnGMIuOOM7xMxy/JScnGwOb7P35TqLjPIJ7jdqAQI47ysZyaJk0Lr5rh0iEZFiTH7izTljvdOf8QMNGIV7Ofc4BUXFhlESoyxNsC/pjWG6X6dDhFXPoHU2ykRtQw6Malz0ffGb+OR8jstfVnWs+M9/a+fE7wVV4bRey5BSQUYDDdJkn5pMdxmSodPGQQp70Eod4uo0ZLTxaqjtGVG5+ZDrOxOUqvZba3zlfDKt+T/WN/ljPLDsBZeaCXwwJLJpID2hAg2LOaBEYHVyBJubqm93N2R/j5cXKIiEostiJgmHs7q4KxDSc46Yb/TJsS+AqTEt+1Z1h2GCHoYr18muvy8i7HsZBef6yed0aSe3Uy0gL6ZfExSWAUghWaIy0Mn+viYJI3BIwbq0T9ugcgR2HvJkg/E5EqXMg5KnKpvXEMNpZMRKNX+NyzgsRgoqqDOMK8enGuQ+NxjAu+mNeNT3n+DQ9O8HTD9NnOEJLYemH39jh0qLvjOnTZTaOinWGvjjreyIWxWk0h/bteUwTOwjiMNNgx6B1xThbAlf5aMm/3a+zH/1Gd6YLGiI6NCA/JCpDYPGOQE0qBOC7BmQGnSOlmx1O993ul8+MW8PY09FnfjtVJak/53jt74zDno79W2ufNQ6yh4S+YFsrYadj3f4DMuGc8832E7oznQogI1HIF1Z9szZvkEFdMwxHwAZ3Bi273hme/hQx6V/LqHfnOFp6b8m/K3emr2nav7eUL/qx+ztdHjQe+tOwdjcNTzdtb7KWNDZqAXGV8z/gKggPQ6Ks3ZRpLs5br4BaGONlGZTw7fmzPzsibMY7fbffW+O/JT/qTmIHoEiGuOMMi6i9C9kIrQC92zPgCOns1OJ7S3G0FMDu3/7ckn9X7vZw9mdXfk/lxrCsNDZe1uZM4zWpXYbs35UtwXGJJ7GHXDQvgzTL6HlWQjjx3Ucy8N7f4bzhNia8Vj4jaSlP9GP3d6q8/ZrfXKVJNy2/Pp9Nmi3Fzbi0HnjX0eejj6ZjlzalkCQqL6jEwW48lm2QG0icYWULJiT+Pi9bZq6rh+rdCxKIUZ9mtglKoOblFD+u8qR5cRXM2b8rv3Y/5AgIjo4rDpJm90jtxTiZJxvgKhJXiavbmfrXcLyfbdizDWdPW9NnBTnHx3eyUNxbteDT96X9RVdJ26AQmbfuU0nLgJ09ygPhh8KNKgg3qrHu5YnF21psoiR069HLNLpzvObj/4IfO9K4qp9fWgSNk4TBOpo+fYZFXN4xkh5ULl/c0s+ydoVvBnCLgyn1N6Hm5eG2FkcYeRmJIc/r4txQRzB7vlpb9/ayaviWwrryyzDqXyXWDpqKoEg+kiawCCQw9WgcXPzwu/PlwptLJ+dwp0uLkbgK05pwLjPgIj5Nw9k/02DjH8SBc1k4wXLkqHOkrrZaVmzdJuFxCeYABww5JlgF5l4U01Ap5cDe3dIT6wtUu3LFHjqn80vf2eD265fG11J4exrOzy2FOZW7tiHnuNx4+dprr6ICY+U3fT1l9cPnSDfHUa/U1uBFC1U8paUt1uYentgJUXOUwyGIkLxyBNT4jKPjxzmf+m7309Kz+nV1dxWG/pgHJTAunaBske4gKrP8jPNnm20gMgJ6dnW5ivxU/u1xtBRW3e1+9Vm/ne1d49F7a+NhhXE0z9m92wRJx9GxB/fmSE1baLRDW5v6kPRDnUMefE5LTJAUSCHWmwZecDMQwTIY1Nr0fi1/zNN/Gpim83WqPLAt6J/IuHTpMsf+tVCZ1B5Gay7pLaFQ5KViMBfl9aJ/6pFyR0UaRrJL+lgGeQ5B3UwFG/TTGnDOq/2d4TUevTvHafdvf2a5OAfDhmWTEdIW8u9mRPQUjdJzS4io7i3dnTPR0ntL4en+S8FV3GcTJ+Nhr1iJc5R/XrIQ/N4ACY2MkqxVK6VrB5qXtnpMtncNetZaEBvnX8crsLi6YrZ0wIK3N3pmxsM6/U/DfyNN5zIyD/aL3zVfvLN+582fD4HGb/GFgoFyee3qfphX+ZqNnoaYGMgORBFUeiWWQzIPWUsyATC3YJ9/2dN0frZH1dKzPY/04xyHq3e7P+aFwkIHBDcTGMSxCHtiLuKMrBridHfncM7vpwvfmu/Ocep7a8K2xg/jIwLsy98vP/y0SK66ZCrshDTIt19/KTEp6WbRGDVvoqpET0v/tJhUUZhv3Lio+t8GtuX/JLDnh2whzU0/gPO6xIcMVI1se2KUJGJ+1Qh22yVxwZeZ9wKBM7FlJ3t/kSleejpP4jyBt6cqM/2dyXWquOzf7GUjgZGW+B3PwZ5AJGwsgqEQOPKjIqs9EL8T+O3fCf/u+Fubd5ad7OGWrC0mSMdefeTQ/jyp377RnEZJ09fEX7KHlWBZWG8IIDtwnNG4wf2alU1bm95/wh/L9N+uX9Yp2UJq8hg1LL8wyWh7TGbfNU7SY3HwOoiLQiM7EOMsnMQUDd84D/tgZR5cG2TIAMu8gLKI9nC/xrMrGrDHy3xpvapfdsxKYKQt4Ia7Gc+oiqOeGYlVqJPnYfbIz/TZVXzObmca56/h3zkPRAJWUllZuSyc+4NJIiIuXrat+Vn8xlwoXjAQatSegLAWe2j5b6qukIYvvpIOvfpD+wK2IhCPVvqvkc+zicM5fef3s4nzbMOwno1UFqbNnv7zn6xooNT8/Z2DJB1702j/g/MtAvtxbvnhRSduTeFGT8jqYXO+WD5cDeVkwOSLLjbaHZTYsWy/9DKRnsGP1qemy6DEHdISAbTlzxHMEBipjh81s6wQjYDP/5tA83s2+WdY1sP+/P2yat16ufi+R43+3tdvvizdcV6zGzcggi1ky1vsIXQMYVq7tvAAlMVzYXAlwyCS1uN/u95YB1ofzIurOnH28+/KM0d6WoXK3p2DJCJk/t3tpV0CiAvblTg6Ec3IBtIfN4sitzD1cFxyD5Vh61Id7PjXyBPz98O9QqLDQ3nwghFwaJl+ab5/aTyKO7YRjAYWzJ4/gxTMoL0x7M+/NPOtCc/07IV0Tv9MEcE5fGvyYKWB7ec7dhrvnfsOwC4OnERSsF/CcNgDG5397EnsIbYCFG3dYM5STsKWlP9pYK9TzZtzXaofe52pG8PY3fnuHJ5uCs7fGJadFkXXn07/0Hi7a0SgjO4YQx0zwxbSDxWRqRhdg/10u2GlNxumvJfuKpGXFnG+dbJ2/p+fmWb0K3W7jKb9376zc+Ack4B6MCamqDNlQCtR71rB+q7+WnLX72d7ZzrKWmka9ric82H/9ms8M34iQkVFlazE9g9CJDTn1y5eYJ79wiKBaGT9MC3H3IvSQ09U5nFYicr/fIaMHD5M2gaYKa3x/z/9x1Udu3JjOezu2g52N/qhu7rpXd3JHlLLfks2lz385dK+CeIGtq8Rcyr65YhVi+e5OFrpg1UH5KtN0Ihx2g+IHWvSEydyToUtfiqFU1eSCP0/CUxZiCAWoNQO0EqzV5K6qR+9t+Su38/mzjhJ+cwgJ628NC/2xjqbuFsbhumRwIqKiyDlWigjr7wB72BrZs2QsO79xCfQsmfPUcwuPazO3QVcKJSw6JFmE+K/o35aW4b/hL+W2qMld83TCcVufwnjQRGGJcRcBSv0R2Da4O4Za2XGeuxEcADW62UgdnwPGDTYHNhOAQlVkSgGJ3GdLj2N5z911/zonel6AhmojepOpNDrP5UhezrsiWiWi9sUuFWD2uXs9ZTYOLIRNPO8KyKrm75rvOrOd37TMHZ39WsPm48TVQjdBg6R4n25krNpvfTCKSqefm0QD818W9JDEmMDFFCr1lujXVxsjJGS6Siscf//ftd6pxlwQmKcl4QGwOAN2oSCDZq+fvq7LENcFAiMHD9OJp03mcY8mwmK4dhGxIfWEJe2sbY7w/+7QdOy4dJxjmAkMC9OyhWJ/90ZscfPzFhsWYU889dpsmTxIrNfbPDQYWYHb2JCvNmlzN6Lfu0Ep5Voj8/+bCuocdZ3vTv7JZGzl92ydav5FJecgm3pYTLiwkvEr3sfs9ZFlZ0aNDLZQ553VZ2XI9XfzjD+oyIj/kcJOOzl+289s67JmXAz7TN//avJxvU9giQyEJJW1CUlhFthnOiFRXuNMOAWaMlfDktV1IggPrK9qWfIeLS9z4Qt1DC/dvlbipf5JC0R8NzgiQJwj7ovNrTxlD7DPNLT2UBLiZ4uLhIYdf5IXPEJiTBQutZcDEfd5PNvuEG6d+uO3bCJEgGjPJDSGKLUBrB3DGebB6bFfGBnt3z+ESbiMIYaGhEpsdApvPNvL8kSnLhZAnPY3tQk4OIyA6CeyjavMT0UX8Mx8jJ9OzLQ/f93YJ1kwqS3AY9omUpbj2C9aUqOsA3WfQk0WDNp4iTTvuRklJAY/pe0q4m8hZ9fM17GRVwkLSE5NzzXeuKHBBbCLeXsLYhkSmBnmriGa6EsLp0VGfMP5JvvbRJS5PZ/vC/Hyo5KftYGbAyeL++/+25z2KGw50AN6nbp7SQhPs5Ikji6aeFYBud8tKYcDMMG5ZGvJdg9O/b62yQwBCdGYscyD0Hnca80XkrpYTlExxRu1MOIaOkPn4lHEMw4l1VgTSbI5JO1q3loTdrNhfs/8uBcZr5rfQzHUUu0uAxMNOwhzwrYsM8isEEXXQBDOIFmFzbx8GzBOf2zjedU4TQNlkvLxzvxj7uvCaCtahKYeSPV4dmshWnEWin6br9rAnTTROzfz+SZmeJBEITYXgMkCTuBvTD/at9/kAy85Eo5kr9PCnZslV1rVsqy77+QZUuWNEc/Zeql0hk7bjMy2uH832ijZGuEJfBhFivRkCjXSXm0550RMf9sULKHamMwFQeXk3B5bjLqDcjA+GB7HNJD2kPkzoNKnAdWf3CfNEbFiXd9ExYYOUdDhTfn7gSh2ZyaH53z0fzhf8HDmeSddcJ5EyEYR9qyPskCuKFSj8KGyZxsy3pYh05djJDoTOZYJtJf+edMyqZ+eefFsuoIBryuIotoFhgcBGaySk8EDWxenH7Ujzo7v6s775qwq/joRh67xmFPI7FLd9hC9MABc/ulsapcIqFFkdi1pyTh6j5+soz+zW9hH2+n5EJrfdlHb8vnn30qnzsSGzN+Ioito6QkJ0ss7HuEhASbVXUSCkcnEhqJmXc7MO8UqPBc5M8+mWk+RSbzUHCMWKiKNt6eEoQDK4pwgEM5Lnco+zZUV0nJ8vnmkL3SkqOSGBv5f1qCqG3HutJnex229Ey/nJMUgfUm8CwBP4jnaS2YxlELympkq+P4pRQINdhOmsaZpNNS+q7cf814NS7NM+8OAmM5SinkMAQGy0PmpHR6sHt2lUG7GxNQ/3Z3+zO/E/Ru/8YK5chxGMcYEY6Hx+EA9HKZ/trLUoWdwcnDx0mXwcMkpVsviUhMlpj09hIHK0idR46VIVfdKEV7dkv+lk2ydeFcmf/jHHOZiDzbSM9eXXFqYpJ0bN9BkpOTzMY82kP09fPFFMBihZknEh114FS4IZ37SwzmXtDwNVEVw2JwBSbk9WATy8ge4vihyr07pWz5XAnB4Q2St0c6duzQPDE3gf4P/Cjy2Iviys3+3dUz67iiwhqlAnACinZ2QB3JgdViKvtS5ZdGj+iX388mHXvarcFLu3/n5zNNn/61XKQlxoeOvNQTo4fZbcljOzmxpPTGFSEwgKtE1a/e6c8OrsLod63M8vIKWf/5J5I49SbJxokpNYdKDUEd3rRYcnHEES9C2vCx0mkIzLx17CrhWAAOjU2QyOQ06QC3/lOvlmIgev7WLNn181LZsXSBbFyzylyankdIhIwb2A9rKh0lPS0NNjMslpJCE85Bt263tDd6DxmKEzrayh7Yns8DcZVinlB57LgU8txmdiggyLLM1SZamiUjJCYkGGkZy3SqMhvP/5/8sC7IetNs3OEiawSLDoR4Hp0ZjqSG/LpJthy0CK//6JFGJM/OrjWgdaz1rXd7WPVjd7M/n+673a8+txSG6ZPAWFYeAEEgbXmC3y2iHTmqsajaiavMMgDdnaGlBNWfqzD2b8zUnr17JRuSzT7d+gJJPQWZwssw8U/vLBF7dkh11hopX/Cx5CyZZy6Gj+nZXzoOGi5J2AgZmZIGA6VR0q7fYEnvO1D6XTjVzNvyt2+V3HWrZNc3nxozng1Hi2XOnNnmMnnAKDd4QG8QW6qxUJS51VqnqYpLl5lgW2LcoKkBZCiqrsUJKbTGC+EX7MzXlxTJ0W8/FC8seLo3WiLZ6OgYw2aS3T1dndjLr896b21Y9f9L7//O9Bg325d4lZO51mQ1GmeDGQLDt2pobvycW2Hc22MPHReQW9LhbCmf6q73lurjdN+dw52pf4ZnGJ1r0r4NLAUUkUUs4vyDoB/57EwYLSXo7I9hCS35t76e+GWFqlEZ77hksGuO+RFE4m6wgRHQe4i06dpXQsZfItH7sOa0I1Mqln4rBRtXm0tj6oGzkFNgByO2XQcJj0+UuA5dJLFLD+k96UIpveVuObhru+zdsFa2fTsLVmctgYocr5IVy5eai/H4QBWKW/+qtm2UHZ7esissSgKDQwxRucMcG1rfqPRU5WyX2ooK8YlO4HmWBiKxBtbaMjuCuLyxPn+NeFxGbnP8d6Vhj1fLgjmJ5DisCYeZBWZkBB3XEQg4vttkmdNOSU37VdYQ7enbinvKxzMJcyq/7EyUhhz6iIbADiiB8ZR0ghKNPTJ1s+fU/t3ubo9D3Z39Mj6mWwors/NgSjvh4htEsB0fYjvDhplwQGgsMwLhYBkYkjovIHSbHgMlZNwUiTqYJ7U526Qah9kd3bRGNn05w1wMF9Gll3QeMlIScK5yNEa34OhYjHKp0m3UeBl5/a1SBLsZeVmZsnPZQtm7doVmUbyrysQHwo2KT94UweUdEyvVPYeKfwakWyB+74ho8cRZzBXbNhnCcsccrRaa4AQabWWZtJ6cy9ucSCseGMcvCX+qJP6T8Wo5aDLdghAcloiOyogQ3WCzvhrPVmfH43rPFs60TK313xp/6kfLqjTkoKmDHLoOODy5sachqGfenUEjVH+n+m7/5hwXJXnkz/fs2St58NinWx9p4khab81zTFgMufxjgzSB9YKw3SK2yBjxAsEFYGRrGHORRMKSU93+PVILwUP15lVSuGWDLMalkDF6oqT3HiAJEANH4lTJVOzZIjs55LJrpOTAfsnfvkX2bFgj6z6fLhW5uzWYBFaWy7E5n0o5LpKRTyoEGUizetsGc4CgDyYSVO86Z8xYqHeFm/Kw52LZeGk92uusOfL/wsOvmY/WxKV+SmC4leAW6SchOMqX9EXYU2zhW5ekmOZNqhrG8uH6tzV+7CFb6/90/k71nd94UY4BwCPxVvJJYIWOiaUHtJ3NWhi/KEE4PNLJQEvu9u/U1WP8Glbv6od3unG+sg5aGwSv+BSH+NxkzLid+GFk/Oe3k4nNLSBIfIJCxTe1owQOOkcaJl8lMUeKpB7b9+vy90glRrjsn+aYS+PrPeVqSevdT2Jhfi0sLl5iwFaSlZxwx31SlJsj+yAoyVm/WrIX/ahBsMjsLr6H86Xmmx3iFo6zryAwOQ42lkC2YMGCn6Rz506w7BphTg3h0gCBdcvrv01srtrAZLCVP6dr95aiYThq0RNGR/lIoOPQRJ7gubXAmn916t3f6J62JOA4Xd5d5e10YZifX8OPPQ5HWdl9eDjKUkgCO0hxIu7BPMLIuZCaeXw3oBE6u+t38qE+sA/IuRV7cfp35VfZw1U/zJLICVPBHkJTnXMcjajFu53Y4AkHLTTBmi5SQlrY+QrE98TcyRdsHUe90EmXS1zpETkOe/E1mMOVZq6BxPIjczGJsESwjiCulB59JCatnTW69R8iQy69So4WFoDgIJnECJe9arnkb1hl5epwsbTBxkuv6HiJAIEvXbZCli5ZbL6lQsOkb+9eZjtFKiSVuvjN8rI+WC/2+tD6tCL+9/+eTdoMQ26DbaudRWtyyrKxE83bu8d47woCa4NdyQQekLhmnzWCJaelm0V9ZwFRa+qGeWO+7H7pphfd9ZveTQZO8dOSv5bcGRW/sX2pakfAM+dbBSxtCXpgLkIFQyGzCRIfN7I5zKAdNPKW3OmXftib79y505yiQakQG0TDanzMCBssJ2ePZMGASe9rB4ibf1txq4PWFtN1VFAzsZmH5jeNxrojTR3bUCxzdCqql8ykSZcjnBeEJd5J7cS/5yAJGXuRJJaWyLHC/VIFCWXRigWy6PXnZJEj1q7nXyadh42WxO69se6WIlFYBuiIZQCykyS4gl07JDdzvWz47mupys8zobzwGw5DN02QMOYdwVE6n34qn+IiwByeDBo0CKNbZ1MnlC5RC4TQgM6hWaiDd60nvRtPv9KPthuRkXXPNnDVNq6S42jM6QMvPUSC4V3lU9PhnXjE+de6FUtNtB2j/cUdHRPbtxgngC7Yao1g7TKsQxtIYHbQNJzT4Tvj5515o5RSiZNuLB/rmM+MoyXJJNOin5bgTL7Rr+lM8vJIOG5Y2yVNlZDAGpHBXNw7wOh+I+T4tJVoMmZPQCsO/k7KlLrzzsLugh3B6667Ti6H3fDf/OY3xk0rSsMyXiM9dBzXU7kzSxqCcQRpSJi4t4EZLkrsUEnMKe1fABOsCjURNP+cNNrRL3Jm/vnTXG1mhMNGTn4Fm4ezdCCoCDQsqT8EJuGQTtYcOSShhXkSnJclyz/5WLK++cTEdtsPayUpKtzkoQ1sIQZhnpXSvZf0wYg3DpLJojzMH7dlSTbsdeQunWfC8CcS84yA+DRzDvW6dRuExwBZ4CbXX3+9IbbU1BTr9BSswbE+iOysJ61P+rfXvyOCM75pfER2EheJBOdWmfVObgliO7gChmP6xIVt27bJu+/8U+bOmy8PPfSQOTlFR2R7HhmGyM2L7vSzY8cO2ZabjyQCpWssdDVNw7hJeQ2JyVoDo6IBiUSJn/HoqMT8OeOPpsM6W7FihTnyquxoiXh5exmiDoLkNwrLJjx0kafBcPsT/RLs+TUOTj8tfT+Vu+aHJ8Fs3ryZqObuoKlGM17jZSc2so3Pz883lc91MQaygz0B+zd1V7fdjoOqZ86ciVM5Oss4nHGlokvGR38MQ7fNmZtMErVfvCfln78nbjGQ0rXvKd4J6ZDg4TjVyFjxDIXwAKOQO0YHQ3AkGPaeCEnUoH4g9usZtSYVmTNSzX0T0mKrmnblBxIr4lCCcwexeUB6GZDeQQaNxlE4kGYuyT8kGaFtJSYMInoTnmMjZqx5+6Ri11YJhum24NgE6TAI18ChMuSSK6Wk4KAU7tkl+3De1k702Ht2bmZqBuJx6qEPRtHi0jJ577131VnGjBmDs7aGmWN3onGsLI2lELEIRAitU75rPfO5taB1TSI5AkHDqlWrZPGC+ViTWi1t49Lkpt/cIoMHD25GPo1X02W4n3/+2XSU5ptXgPwVW054iuOoUaOMBo7mi2FIxCQUqpzhbCwce7RfPv/QKm//JE/pHAcCw9yLkECFX8c+hGfuukuWXHiBOUPM2wftjPb1h7SWRxJxTxgJlfXBtEhsfCf+fIBzwnhe2engww8/NEcx2fFQw2j+9d357uq7Kze2GzsuHjTJI4ww3TJaC4p3t8C+9xuQiB3HEaCePXv2NBXFiFxF5sqNGaP766+/ITNmTJeYiDAprm2S919/GWdRpZsKUeRhY7CX44r3X/7yF3Pkpr1grHquRxHVvJJTsBdrkPi26yI+iVgrCY8Wd4xCxxFHG6C9N0pQCTWmalBAPdwIJDhqvlPHggSihWwmOuPL+mFeoP0myKqUYoSLReNx+3oo9imFofsJ9fWWIMwbfNHwVThZ5dDq5ZK3aZ2UlFdKSEYHLAV0l6jUdDO6eQIhj0MKWglT5EcgnSzMycZywEbJ+v5Lqau21nu4/SYYhnGONblJPnQqFSbioL1eqHceeRSLjZvUzPdBmqxTIhcRS3vylupf4+Kd5SIiMsyaNWvkub/+RXZDv9MZ3nvvPXNsEpHPHi+JaykM1NyBI4BRmxISESqdgt1lxa5C6dqls7yK45yodqYjA4krJydH3nzjDfnhxxPCIU1v0e+GyYgusTCDzXk2/qCHuHpXkQyYtki9uLzj1FW5CwRIMT6Jl/niqPbPd96RV3AYH0+7nJAsMqpdiDlCipEUVx6ThXsqZfMejpLk1ERWrlx50sF89rIaD46fs3FnHXM6tHr1anJux2Fs4+NjAABAAElEQVQ23ROD1S2I8i3FvcFYx1mOCVojTlp0nzBhQvOQfbrEmSElGLIfd94IFmjKtbINa0w7oUUxZPhI+f2992CyH9XMJzNOhiMC8HCFXGhy8PC5HFzZuzEv23RCxG5Pn3K5mGFjJbjPUGlK6Shje3SW0MAAHM9qbcqrrj8mZbD6Sn1B6g6WQ3ewBkPcMQ5zABKdJ0pMonMe7VgRKAkQH3cgZx0urMAZYg3FvCEa0q+Ytn4SDI15r4Z6qS4+JIcwH9uDxet9u3dJm7hEaderD9S4OkMymSB+AYEmvtrKCqkoOWw0Sw5As2T3mhWyc8l8kx/+xGHkavRtIwUQpigMHDQEBxR2k4z2Geb0T+4z4+FzSjBEMNY5wRVC8BsRkT0qOYlXX33VEXWI3DMqQganh8gbKw/JT1tyZejgQTLt2b8bllGJhYS9cqVj5PIKhM5PjWx/YqQcrT4mg/5GFbFqcwwwRz+KpTk1YM/No1tPQJCkJgTIpFQfuaJ/kgxoF2GxGw4PzD07soKSKvlpW6HsPlwrJdXYzIo2oxR6W3Gd5EHiXQB7lCwDzFEbwqJK2/vvv28O4OMOspsGesqzU3tLMCwCG3YGDckd0pUQoizegYPl38hDSgXmgMPx48eb/GpHfyKvruvRVd0yjLM765uWsXkOOew9NqIzcMcoPhheVxoWEQ+7MUEjQxyYm5sLYd5x4tu/NKKrRqUbLyZaix4mG2dn3XHeBTLqXPQ8owfK8iWLzCbJW26+yez14USQBWQYPgejF+TBcxw12YtSl4sTYy7Y0XR1ESSbhZDM7DtQIDuzd1lzHcd8J/A67NmCtDAyNUOiwbYEQo8yJjTIEEg94q5Fb1kNYqskweEqx1aTchBeJRqg2uSbrCVGSeTdIjqLAFEY8Yc7KwHepAraJdswKd9cXiNtPY5KtJ+PxAaGSfTgcyR5yCipryiTI/v2yj4sXs9/5TlpcveQJCwDpEBQEpOMXdFY6A6NicfSQH/pd8FUKT1UIIW7syUX54htg5JymYO4gMriA/bi58ws+XnlcjaBAbJKQ4DMXbt2leTkZDOnIAGRIHjZG5y9KRGeLNq0adNk3jzODSNlcFqTTLuwk/RPhZQVc0QeB0QC2/vzSnOKJNlTtgd74szMTIstdEeXhqWIrD+OkA7JYTj7uVZGdgyVRdurjfYNT8BUZOVciNClQ4Y8MSxEusHWYVt0ShFAfA9voBnq3RCV8WXVLQ91iAnxl6uGpIEqcAggruNgIf3BMSzaXiCjXiAxo0MEt8MRklLuP/7xj7J48WK4hsvlvUSeu6yPBAZgWxHiMnYVkQhNwAVhQfu8HvFyfrc8+Qbc+ivP/93skLefxGKvN6ZDcOXWkrv65Z2dHgYJFtHdQUu7GY4ERjw6hIlmDu49MaFtRK/kwYpWlkQJC99NBpzf6U6osRbZTKV36tpDnp+zWO6dOEK++mKWsdV+ww3XmTOdmBnNHBuVF99ZkeypOQdMBiIxHSJQPUam6uoqo/XBfWP79u/H/C1T5r7/upUwfxP7iPfIYXJ+7x6SlJIigdjqz+NXg9qQ2UTnBsRjuvW4aBGKhFdBgsPuZCU8jnZkPZXF5IjHkY67mLGlU5rAc3L7Sh6UfneC4MieRmFJIi7AXyIzukufLr2l78WXSxUIqHj3DtmL9TfvcyZKVLv2OMgdR82iY/FBnmIdOwK6j5kgo667xbCTB7O3g/VcL5mzvzD55U9bXF6QOmZm7z2xIxg5uuaaqzCn6C/dunU18zYlMiUuzrcee+wxM39CDuWhsQHywPguEhLsZ9l0RLm1/gPjIptHRvbCZPOuvPJKKw+ojw2PDpEuIK4GCCUC/L3kvM5hQP582bkly4wGVA5n+x2GoSBCx4BjMiwjUiKCUe8YoVDxllFR1CERjcBOi+AONhEZsV5A8N5gy1nXdVX18tWGA3C31hl5lC473pfBEhri8kyQx87xlQcndMEZbOho0IYkKgVG30g3xHfvmHYgsEOyY0+uGXUffvjh5g5e/etd60TfeW+NG/GWIzk6JkxUxAPPpCVWiBsJjFOV4yCwTZAq9cS8qIkjCDXM2XAKmpASl/3duKGiis2WExxA7RcgS9esk8CwGHn624Xy6ORR8imkc/X1tXLnHXeY4ZRxs/fTeJgOz0J2lSYVgGlNiNKgdEx6+/bpLZMmjJc77rjdHO+aD4LbjbWqjbOel1kfOHKc0EkGjB0tye07SQTMELQNh54h5jVEojb+kHKhP6W9eZ5/TBazjqMaRzc0DFlMHgdbBkQk0fGAPY5wXmhDEl0AECcAVMgNnSXwc+BwmTQVl0oIGjTW3xejaKzEDU+RlBHj0INZczycE2X8M01e9bV1uB+HknKkBEfFSCrW4fqed7GMv/M+sJP7sRywHSPiJtnyw9faBBKMp1LMOzlp53XFFVeawxPIOrLe2MuThXr22WcdxBUuL0+NlNtHdTDI3AC2yerlm2RHoTUnTMrobEYthqXdjLtQpxb4yJL7+kvPtAhj0trQAZA4lJoYgDogPAmawPRDIWElrC7xkMgnV8sNXdrK0LRgGdkhSpJwGgpHKAKRn8JcEtZRGBMtgjWpCqibEYf4jYTy5fr98vISoxFhzgDjUVCzZs0yl7jFy7Rz0WFM7Io4EC3qn7RFonUszhiaZTw0STCsQ7S8MrWL3PnZQcgGZuBc6nPMIe6UXNpxD0k3g7O78zs9qhvzTQKjsjxG8SbiKehnoyMyYxfRPKOy1oCoriffTvUfTirtxGR/ZgB95zMTYy+2evlScZ80XrZA4vDpiy9I5Y+z5L6Pv5eHP/xCnrnmYvkKPGpsbJxMvWSKyRQbSFkME48VGX+bC8Bn+uPFNJkWL7JB0RwNsIeoK9aYjqHiqm74DRR5S+QgpKG7d+6QtQu+kk/ewUTYAenjL5CMbj0lOrWdhMRA1QqjnB+kVX5+3kaoEgzdQk2LpgEM0aEBy7DJ8iiQs4REByLkecwkOI5gPmhIP3eSkTXXy66okayyKri5SQRGt3BcIWB5qMHgj47CC8jl7esnR7O3yS6MAv2mXCFuYMOIIBSShMUmYE0tCapcA6W+plom/vZBOVpwwCx4U0p5EEITj7LDsjc317DS2g6sRxLZdJxtzPO2aDn3xSlRcuc5HU3pjYEZ5Il1V4dyZB6wCCwhFTsRwKaT/Xr88T/iwAuOHP7y5S1dZVinWIx4J7gNznHKjHhdJAgjKwlL06dElFue5s6da9J7d0WRvGtxjbIQAo6RnWMsIzdIvwH19/GqPXL759ulsop9PGcndgjFS4lcfsUVcuGFF0p2drZw5EGqcmnPBrl7TCdDXMexjciTFYqyswIRNZAFLYH4zTMpFnDN4FSZtalIlmTj8NFvvjFrkzqfZX0Q9G5eHD/Obq7eWX4S2EEYpyWQ1cb0Zo0jCsMiOrIhax2jh8fevXvNnEg9KWLzXSuUz0xQEyiFLfePP/tCev/+SfA13jL+mptl1aJZ8twV58q0pZnyh/c/lSevu1RefeVlc7TqpEkTDXERoTXjendOR9Oyf2deHfnlZxNXIM7kCoZNh7SUFLO4e8llV8gRENx+TMC3bcEIt2KpzPnxxIiQPmiEJPfsK7EY5cITkyUQo5wvCM4DvbkHzLN5ezZKW59GiQKPz1HsGBquCvM6ClKKYVe9GERXhpGvgX6BvN6oj0BKUcDGwasZ3Qrhh3239c1dgjHKhfhWQXM/XiKHx0st2F8fsEqeGBUZsuk4DvJGfEARc6B6WGy82R1A1S4SIUe2f14yDj5hM3DgADMic+7KDmcu5luvv062OVJ+PzpAbh/dwfhjHXPkMm2HdErAgk3PtrQounbtZtivp556ClIw4kWQvHt1qlzYN9nMm4jJFgoCdzEi5B2tNXGGR0YbQQrjZPxk45588km54YYbZC+EVVvReWxa/INkHTiKudRSOfL8+RJKRV/kY35WvlzzwXoTj+ufErn11lvlxhtvNJ/feuutZm9PXtBNfPygKYRRzxObNyugkb96zxFYAq6SEH9POadztIQFOixWIa1GtE9bzANvH5YEAiuUzUvmYM55vxGl23FPE7DjWEtudj98Zh3s2rWLdKQqUpb+H5qT3Yc1dsO4D8Sg+/GewHnYxIkTefql1SiakuOuCTBiXuw9ScFkKMMgcKDKU2BsovR5Z670O1osUaEh0il5jNz5whvyyu9uxeT7r+KBuMdjjYxhtaCMS0HT0Hf9pu56t3/nHMvuz9fXRxLBXiRjsXHAgAFShcXv4uLDkrVlq3zx5ReyY+Vi2Y1LIQMsXXqfAYbgwrDlhSOcN1hKLlBTc57KvT5A0DCMeMnBbWAMB/M3ENAREFshrsPo7StBWWQjObL54uJIxlKhY5VqICgJcjdMQ/PAvjaIa0vFERAliA6jXDBGu0DcAyAU8HYQHG2CUKqGgok3RuwybE41pOHZVtIh0md5KfDggq45DghnGw9PPy6PT4bpBVhGV8u5LCPzgawZNSUpOUIn4/YB2M0FCxbgLUJemBIp1w9thwyTY7D8mzvKUYvy7T3iIDAIY4gfrHO2Ie9kvymI6dKli0w691yZ0627PPjgg+hvIkDUdY6D9Y7L7CxLdD5h9Ei5/NrrDftvDnpgfpAY4yUHxdFg4cKF8vXX7BQj5f1r4qVdXAhsUVrElQVzb7fP2CDLQWAKg5MD5eu7Rkg4DvGjiT2r18IaHSfWAP+gcJNf4o8dh+zPGpezm/1dn1l2spsYvVm97pgrkoa2OeIwC8384IGrBmL29WisBEieGm+66SZ39kqsOEbGgmukdiRmRBxJdm634gyEtIwLhY3oiduA3UkAEoRACMCw46ZcaiSFbz34W/nL00+ZOCfAyCS361sKwtpXWhXNuDVNPhOc07ZcT/zSv4Zhvph/AivCCD3SUrH7OF62b90iO3AlduuN815TpXz5j5K9eK65NLZeF3OPmaWjyC0vfpjDeQGZCbDJJX7Irj9GJI5w7Ti6AQENsUEIcghIwGUCspIkNlawF+5eiuW4m1EYGEC/+RgVsahg/OJQKYkCSxnlD0u26K0p8WPNlFTWyNq1llbI+HEjJBJIznKR/3/+ub8zW5intpUPbhggASCuQ4ersD3EcbAiiNSMRUjXn1I9LEIEoAN65MEHpLLGIppHxwVB8kuWkvNTdpzaHgjEdNAxfJVtzY1iQAAkBBVQsc7t9U2ir8C6IWF8lwDYQYQYHThE4dKuEqtNevUfaBa67WtwjIdtzE6XbOtbr79m4hjd3l0u7pNk5nIUXqzccUgGP7vYfONPv66dpGLHNlmRi4P8Fu6UP17Q3fQObsg6e7f8UquMiVDwVpuLdlzRiBR39J13Zzd9Zz45d6Uy81dffdWIKZY7tDnYQEyMTd7AmiaYmkQFLcIq9AWcg3E1nnucWFA2IiNV5DYB8M5vrGSyh4s+e0dSr75T/IJwzhMm72wQr4Zjklt2XPxqKiSsoVrCgaSTr75e/PzbyIt33SjP/OVpxNEAW3gTTSYYv2beOOBH02ytO8PZw9jDKbFxnrlzb55JwmfcpeIXlyRH5sySLk++KcfLSqQG1qKOguA2fDHDXPQYHJconbGfLAnS0fDkVAnClhk/Wh9GBbMRvbD7OQS9JAkiGRK0aszdDLGh5y4A8VRg9NKRzR3+2e7MG+f7JEJfXGwEDlZcSigux0ZULAuQ2CIxqlECeaiiUiq2WvPnpESstflBtw/ubKvVa8iVhMrjo+OMncF7Pt0sX2cekKcnd5B7x3YUXxAVDc1Q2BAFZL97RIq8uHivdIDkZEeNyBMT28sfJneDmhrwAv64+G4M0yBTVl6hFU4krTyMdE7YzzAvjh+WRy8S3i7MnQh94ttYWvSIa9+RapmbZY04CeAsSFwcAVgOBbYfR0OK/tdt3ATncHl0QjtMLcBi4ltm7hFDXAaD8fV1LG73x5IBD1Lf/vxz8vjsIrl6UIWkRPNAP0hMsahfUsVFZ8yRMN8kUbgCO67wu/3d/qzfmE/Ov7gGSKAQDs+LzIuDppTAWIeEpQ4k9MDEsknPmlWEpQdNiG68WDG5eXmy8UC5TOg/2CTYPOoBZfxQmI9nvCM738Y6BETWYy+4WOIhth58+fWybeZ7Mg2qN4HQ8xsxYnjzaGNPh88EzYOmb7m27N5SGHYIFGNv3bgODJFAe76vFODgPL/RF5id00TyoH7DJRzbXuoK9kkl1IoqVs6T6oP7ZMVHb4lj3o6Rr5ekDRgmcR1h1gAKwTRZwPkbT7r0xBwqECwe2b1EzAdo6q0ELGQBiO2gg9h0zqYVj6psBq7LeTtYmnp0YjlVkHhhXut+uEgalllCBBIYF4TZyZHACGkpbeXllUWyKz/LvHNd7dFvt8vwDKyDdYJBGYweTIfrUjcNSzcEtqNU5MaBCTIoPUJmrYN5PFh5Sgr1l/FdMWIj/0ZgYGLj/i0KRhqlfWRgi3MYemUbEQeqHIZuQtsAzRyjIU9NAZVKEqgjIyOD3g3OaLuynUkAHL2efeJR8/3GQW1kCMpAUufCdI+nluAZ4nmI8alUzXVUhp8AyfLzIDCRo/Lz7sMgsCCD5uwoKuosiXgQVNaIs0yHYTRdk5Djx+5mf+Znfedd49myZQtbz4OdCmApfwCmRZXAdB6WBTEvu50M6KA1YmXejT0JM6MZ4l2BibAHWoezi6VdDwlLwZwADc7e1oreIgBfrAEFINCWBXPMxfAhkJS1hfg8EBX/6KOPy+cwehMDXcRm4nSkowXSNDUf+q73ltz53fkb5zGE0HOnSgTY4LzvPpWw3oOkLYQNFdBG4UKxF3QgvaEL6YdNlpUwEVBzMF/awf5He2xB2Y1J/A4sEu/DpdB+GBad+wyEJkcXIzDh/M0LSsuU0wZ5NhhiSyCxAcmLwWrlYR2NAhCyj66AtWxaDXXsj/r0wEhWDoK3GDRrBNEGpoCDkOMYlfl8HoRIBXuyZd323XIQC8TaHkZMjxGyU0yQ/PzASNmcXyrfbz4gY1/iSGFJFhn+rxd0kgcndgZC8Q0/YHc3H7DqrevgkWa9kiyhHdhWrGv26lR8XfHjPPM5IQTsIcuJAlVhRCFEYkFaccs42H4YnnqThyDA4LzwlmFpsH8CQ6/QJPnzt1g1NjLfMnnnnXfMGWFcg2LatEp1xWWXyseffCqrwCpe1t9aCqLtj5ySepNCFHCMBEy8Zf3ZwRnX9F3v6lffmU8ui/z0009sKnc878Dd6t3YEwGUwOiBz1wPW4ihLmPTpk2NUJ1yp7KlZoaVR2ACfGZG8w8clA8xNJ/zt7fFD0hVdaQYyADNbXzjOgSFGeEdukomwkVjzaWpvkYCIK4uRQ+1r/SoiY8/9dzJDGASVqOaV5MOn7RQfLbng+8KLbnzu35jAlWOBfFeg6FoC8nW9MWLZeyfJkgCVKHK3BtlHxq2Eb0RWbnj2NXssY/1JjK4bx9okl8klWAxt27dLqswH1qwCix3WZHshBUrXgSyLr0vv0FSemL+hkVlrnNxdPMEAQehXgIhJEnEJDwXW+bXoUcmkVk1a1DZPFNqScmjQUfekZ9qEDprrE1Ugtk2wrTYIbEHv/fee2XDhg1YfO5m5jVEtmf+/IQICOxwFVh2xGcxoeQAwXlAvN05LlheXLBDvttSxKikX+f2kND5S966jfLQ19vksn7J1hoWOs1yIPeyvRaBtWsPlhMdr86/GFbbh/XM52LMS6zWDZK0CGqXngzuJ1aImj8wLDkMavFMf+8d437bsLbSMwlie6DrbHQEbyxnXmsFKn0ybNgwIwHVtNnRdOvewxDYivxaM2cMDfLFWmejFFRY8z5/TE9ORVgal2bK/m5/Zl6J/1yY52AEBWh3CPoWIRwJy9AS41AC47PCHFDmrXhx4/pDSkqKQU5FUCbCZ+sSa/TqNEBiOvWQg+tWyspn/yC9bntAkgaNNIu4RNQYmAOIHjpOKsHeNGLuwj1Bt0GBMxTSxVosWHJLAaVG1uhlEYO9MMyYPX3NqCu3lvxqmGNAyLzcXPPaGcjoU401mIM7jB16LgAHYMtDWy+I3zHSsHOoBWt4DHu8CHFQx6JgISY62tTLkCGD5MqCAjkACepX33wn62EmjtAG2iNZM9+VNbgIGSPHS3to3Sd06iqhkE62CQwWHyBoRqQ3VGiwIREsoB97U9QtdSDJIlLCeAisZRB7fvSUjVUVUoczogm92qcZjRiWnywitW6uuuoqueQSHFKBZyIp9UK9wFYSKiHSRgWaZ/6aUQxCjL/O2SKfbCgw7tT8OBeSPy42Mx7C/pJqbNdpiwCQEoN1XLrDElpwIyl7b3a8bCd7W+nzQdQLISqurcRCg8RMLuH3GJCdQG15stPahsYRP8x7VlaWZG5jpxYhV/RLEE9/7LM7UCoXvclRtlZGjxolF110kVFMYDimyXhIOEHQAiJsrrAUCFinTLOkxho5/R3bg1rKtwmMHy0H30/1DPbQeGF9AObwxw52ArNyAB4SQy67iUhoBzcNHz7cjYVmAbQgjIARlpaVyuzPZ8KC0wCZ++bzUvTdTBP3gTXLJb7vYMMqUuDhhV5j5B33y0wQWFR9pRSAD1+DNZfbbrtV4uMtLWkSF0ELo+kZR9uPK3dXbgzi7M64iZANx6zRMiIuQbatWyPSY5j4QCRMgQvx2Q8dQClZGeS9GttTLJQQQ1SKWGxMTmrDcRgFxdK9e/WCXfvtxgTCzFlfWjkOiZSE4LZSDNMDan4gEqN597GTjHSSBnm4WM39b5xy1aIOyDJfmhYloZAgbioE+1ZwVAIhkavFruxjDtNnMVAQ9sViNcvCJQSyaiwbRxXWo9VRYU0OE3pCA4UbAHgxo5cbpHBb8krkL3Pzjfs999wjU6dONeJ+6jAq0L/Cbpw2yQVhjkXUrLDSPpm41C+/FTjmhSPifCUII7YZluF+sMxi1SKxvueLEcfeRqxbqkTN/fEHE9X5Pfykd1IYBJ4NWJjOhZsV9k50zlSpo1+2g+Il7x7omAiBqFBTariVoxPbtd9qc6rh0Z+C/Zlu9vdTPTNdpr948WKihwcEZ6SZZYwDoLR00gjG/JDgysBLLkJGLkXghmuvvdaTI4xjAndSYTj6ZB88LP4Hv5fhI4ZKrz88Ljsgrv8CxmN6XH2L+GIDJYtJs9g09PngrLkyDYukCZFhUEL90dhDfOThhyQ9PY2ZMpXNuxaMla+gbny3N4p+d+Vm98vvbMBq5Hk3diQnTbnOrCtlw/ZGBhSNydYaGxuofDYRjzI9XlkhNbDJCDmAdOkODRAgtj0d7RSYDvcAjYTUddDAgQZZuRVn/vz5ZgsDv/vASE9sSJBUgd2c/5LFpockYSTqNVgCOvQQXzwfCgiRiWmxkh6FQycw8vePD5MdpZWSjyZsKLZGBMbF0d4bI62VF7pYCKNzIpaT7VXqsBLWCKELgdWpo9dXG0lcNdiegxNNHFrwHJFOEFiohNPEGlsQBLxxvzV6jRg7xnQsSmCMV4H5IeIxnr17coxzh0hfI8Fk4mRND5VbiB4IRGfHTWDbMizfqeTw+RfsoLzlij7RkNRCcRkm315eTcJvlPvuu9dsWOXWFZZTQdPN3pltnEpquIET9YL/Q5yDOrRFuCObwDTtOHUmz8wrlyEoPcQaXSOk7e6YTi1EtKwkFsoaLRwvuP0LfIkILqUrFzBJYIzUDkQu6l1h/xjWFdpAWBBh1pm4uPvF57OkPH+f+MPOIBHFFyPC7pIyGd65mzz+1Xz504VjMAfxlt25+fLwI4/Jo488BBsW3UyB2XAK9kJr+uqm7/R7Kjd+p19ebJAjR0pk3sq1ctnfb4Z4uE5+eP15Gf74PxiJhYEgL+pEksDqj6BTysIcC9ADirX2/U9003T5rB0Q00hKSjIX9d7IcmVmbpZvv/1WsrFOQwiMhToUNE4qwX4Wf/WhHJAPsd8X6DNqsqwfMly8oGuZgKOavLDvrRFqWHugqhV96ICDjCCcAWutRGTPA59Zf0RUttv3c+chVm/pHGOxeY1oMwpLDhyplD8uKGZW5NrfP2RMipMoOIcpcLB27ZP9oRnhg0ICNaEetSgHrDSgCzT7qafK8trTNh/xw3yVYdlm52aLnU0LB3vI4Rla0rVQbcrXESwyyuTTOZ5MxyZcCQmXAWnhJtp9ILCCQ5Z4p2/f/v8Sjm2rCP/35yhF9JNpw8LNGiCFM5kQ5HD065IcZ5aedMRn5M5lsL/rs97t/knQkFPQydQbbl+YF6cfqws54ahD2zzw8GyBiOXLlzcNGTKkRTsdHTt2NMjLTLNx9RDw/etXSiQMf2rmvJChFflFEP/2kKd/WIF1jYuxalMoNR5h8tvf3iWPPPqojBwxonnyzAKw4jS8ZvFs3TTcIaOQDDYnPUOOFBWaaAOgcKtAf7Xg2cl61UJqZzEcEJJi+zkRUNkv9a93zSfroK6OcxPOxdoY9pF1NG78OKNCxJHt22+/kz3YG0Zwh6mE2IhwaaytlvqF38ocXnCPHTpWggaMkq7Y4nJTcKD888hho+zLMKEQJjE9LRPdCHwngnNd6QdYMCYMTA+XYe1RPuTLAMJtyDuKwctiBftg/Yhx8SKRqcLAiER/CXYo9haU1siibdYIlo7NokyDfjUPjJfPBLZbGaYOWTl55j0xFATGb7hqMK/dWGSxeaFgre3x8JnSwJXLLC7r/r6BkhAChhRtsb2AxF0pqYHuZkrhTCAsN9PljnwL/GUMdB+xQi8VmDvO2mR1JsMmnNdsnlvL7AjQnH++a1nsz3Y35pVzXOhdslI9odzLBObTP0BpyLwo/pgX/CibWIoIfuD8Aot9DVxnYaQsCC8C7xYy1ZnK5jMLHglkmYRdqFkfvCpV2JToDtaLrAEXUynHWpRbIO06dJAXlv4gJQPOkfID+yQZO4P/8vTT2I7wilmjYm90gq05kaZJ2JG2Putd86XvvNvzywpiHvfn5RovIdClO7Brp3n28g8wfumH0rs6VJsbylINK1Q6nnLewUZUsMetbnpHNKaRWB9EdjPagyXi/qmbb74ZW93flzewOHrLLbdIUkhbyYd+4UFsLCTKx6ZloH46itvGhbL92YekYOF30smrTtKwXW+PIwGOYPYG13R55+hF1uWzWZ8b57uGxUkIlge4CZHzk1qsx32y7qD5dt5ESE5RLo4iDEeNkGVzvjbf+iW1xaiA/hfzN2vtqhzjAjqmhARTj/TEOmA44oYC83WCzYyUGAo44I9APCistfCPx1MRtByMg+uTs3+ca9yHpKGMWPQ+BhH7qlyOQCKDJk39FwJhHtguZBkXgCUnnNPJT1LCA5CuoDMpwYZOS/o5aPAQ00kyjKbL+6menb8zfuJnbm6uzJ49u5F4AQLjpFHZQ6uw9Ag4gTHWO3/VwwyHkxuHQjtC8dkOmkEiFCfaAwYMNJ8PbYBUjQXAGxGVi6vc2r9gzwH0RAny/ptvy5Cb75Hc7B3YvdsePfs3EDffZ3Y3e0MCdqo07d80L67c+I3uphHYQ2O7v0y8HFI8H8mBsVGCV0Bb44eEUYc1IvTN0OGrlrrd2xycuwfmWDB+41RuhnXlpu6sF6bLO4mMk2LWETuugagjEttbb70p77z7LuYWv5cRI0fKQZgZ2LVjuxyotNj4tatXSgL0q+64+DxJSU2H0ZmHDfvpzFppGzBtWvUi+EFiO5yjl+YbrNqy7CL5eI01co8ZP6F5WxIRnEiTc5jIGCw9EoI5YTNLLTr/Gj0O8y/MYZg2RdQkLm5t0nemyfoodLCZPdJ9MY8Dm0khC+KiknG1w9hoKARECto+sOXucIJxoXCMXo4ws7Zb63NdwZ4Sv9hR2sur7OGHH32E8H5yTb8o7Cn0x0J3rTw7bxfcyqQ/2G4uYdjrzR6HPvNuf2aG1E3vdOM6HT/xBzDdujXTjuPVmpA1vzgetNP+CZXH3LXDVujGUaNGuVNyQwTRDNA/n1lB6sYCcL7Su3cfWTrtEYmGNNEH/LQHJHQIaRRgqRD7456D0i86VO56+DEYN+kpr95xrbDK9xytwIbCa+TFF1+CRn8PU5kaP++apnnAj37Td96d3fhOROcC89L5i2Xcky9j2b1eVn8+QwKT2xmtdayQI3dgYyCxaoLf42BzmtYtM0pl54wZ5XJh1Z7m6Z7tjUP2isA8cdJNAUlPIM8FF5xvenGqqlF5ugyLtQOhpBzSxldCoET70YfvGwRjOHs7aN1rHoj4hBrUc7MEkQ6ovu2FJKBa6detk9mGz3gYHzsAPeZ1VCfsSOAeLtRbGRbF52db7GFHaN6T7WV6HKV+hO2Nj7HHijuu2VlwzZTtn5+/n6lJnxhfs6vZEBh2GXDvlwjTt9SKzIPtpwwjKCEwxkfCSJgAKgkfKqwyzykpqSav5gU/zAfblpcD4Y359RHtow3qT8eWmNlbrI7q5ltvM6MfOznnEdceH5+1PvVud2PHwpH2zTffJJ14oB5IIwvpB6C0Y73ht6URjC2Etc1jM6mPCGXGRq6JsSFYGIL9roWkOxuKWtBXg0gIuQu+l3xoLXAzIzgUw4L5YqGZi7W3XH2VLIBIduj4ifKPReskfNz50HIpwtZ/P7ORcOmy5SY+Vog9DU3bJIAf+ze7m/2ZlcWKwexDhvbsJsdLDwtNfcXiYD9PLK5SnYYlYz6piVJ3uBB66RZ0R89n3+HtcG6+OedHP7TkzrywLgmsL7KRREymkZycbLbacJ0HElxjceq4g/2mkirBTlzGwfGj6TEOAxDSFFCChpHAANoOnKKB6LhEwy5xNGD9ciRatsBiz87tFIKd4JQgwq465l/LdloExkVc+l0JAzI3XnOVMVhENblvsMeKa2gkOuYhB7hCaBfhh5EOa3jEGfznQQ+RwHU8isu1HIrINPNAiPPFzm8IYwg8k42KyQTOge3AvHNEMwvTb79hPj0yGHM3rN0twaL0rR9zjapYLsESxNChQ00da70zTU3X+ZkROX/jO8tGAuM6HYRXjSkpKWy7j+GdfC9pxiIOPCi4IjB+U0r8CHMxdgGeS5cubSIiaEJMTC8G4DOB38kPd+ncSW69/Q5Z88azUpK1XvbjiNVKSMO405QV6wO2rG+fXvL27VfLXx6+35hOfuq1t+WOl/4JrYEaE9djjz4iX379DRruiGlYTZsfNT3j0fHj7Kb5YziCTuCpTa9GZtrCZDe1TlB95vzlGkyq3VGWWpjedqClpGGJgQ3DBnVOw5H0Wd+YN8bNO+uFdcdelqMcJbAkPOZDvzMhLY9zouquI5jVjAiN8lBkXYf5zPr91ghCa7pETqZJoqG0c8M2spZtpH9KiEWUJApo5HPU6ZIEk3qoJ+7Nwk4L2ZW7D9KWOOkU3VaS09uZrHDux/wvm7/AvCeH+SIeB4qhXnceskai9tj0ypHQzuox75RAE7aXQnMEa1coKLMOsEYhdvJa/6wz5p8jPU0J5OcX0KNc1DMOpivqZcTzy/HWIFFYh7zn7rtN5+VM0PSvdca7/dn5G99ZT6SB7777jrnyhDoYKZ98KUFpxnpz/J6KwNiF7Maa2GwuqGILSwMbgYmwYghaWFd3+jkX+nAXXHCBZD72G2mAmDmvDlvssZWDtcZ4Ol56gwx7+K+y+bP35cY+7WXnxvUy8ZJL5e3VW+Xi3z9m0ngNGzRffOVV2QRRt11yxTT1Mh4dP5oXdeM7K45hM9eulj4wOkNt/hzHPCUAOpHUKECmpA7IZtAZW23qD+RZR3/iC+0Aajwar/PdOV3n7615Zz6JOEpw9kZneEWAluLSPBCRLMCOBup7EUBgh6EC9vF2C8mTUpLNHIqfGG7b1q18xL69EMmAFrph6+Cef9Ty7+nbRh65/z4o0z4PX4Fycc94eXdSJBSCMeHfvcuETUGPznmUNWPykHgKOEDfXHurwcL91kKr40wCK8nRSOuU5eIzd7sbOHpQ1kFjHogm7TAa3TYswTh/NuOjZgM9RHTuYaMxINpHxJKz3D86VXrDxMHSnYfg3xoBX37rXUlOTjaET5zTOtS61TsT0GdXd35nnqkaNWPGjAYKN8ARUeCbg4uJnRGBwX9zB/66o+HcaPdNG49uLV0MTNaHK/VXXX219OrYTtb86ffijs2X+aD5AxU1sIOBTXNo9NSx58vY598T9l2PTZkgn7z+illvuuHeB+WFeStk0q33yJKFC+S3d90p89AzVlRUNiOgpu88sjjyy2wYYMWWgyX9bt4C6TdwMNSRRJZs2GS+BWGBl8jE+Rc3UDZRMwIi88a8bLOxcSxMfXG9T8vNQM7xm4ha+DkTvy1EcVpnrQeyL4S1jgM1MNORBg+wlWgrYI8l7i4n8uGs5KRkUw4SM0XOq1eyxxeZ2iVIwrGHjFr0hDJIHQluR3Jk7/4DePKXt65Ilacv6CyZ+0tlfZ6FyJSKsiPSgx6YthFwONLmiPTVXovAYuPiDXHb64b1y/DnTRiHNJpk/1Gki3WzNpiLUV2KsHbTZmzAXGTmW3cDHzjvs3IZKC9c3FGevLCHactvMinEOSaTxo01hoHYubKcCiQggv1uf3b+pu/EM8tKF7cDGnp6nd8AVoTW80m/J1I9ydm8WOOyyFzwuJmYH3jA0EoDjdvrKKYNS99aWXpnhlmwEPDa9z/+pLSv2y2rHrxVvIoPYmSAxAp7ncqx0Et1pIQ+g2Xi9LnS6dxL5KM/Pyz3X3OZbFm7SjI6d5FbHn1cnvthqZx3693y92f/Jk899HsoteK4W7BR2tszP3zW/PDOCtCLeaH5Z0ICWSOIWXtCENPl7sclCLY5qM7FhqJNPs6/jmOjoPvW1cZ/dwgXXEmutJzGk+PHlZv9e2ueTxcHv+vF+Fg2lp8X5yI85eW5f7wssWGQAmL+8fxa2JSvB+FByLRwJxcCIMYePrRZ95PsJIliweKl5lv/FISDUjKXKzjq9Uqk6ElkI4Imwxrv7Dt6SBQUlZ/6LgvbXUrxpciYUuMch+yhiujbJWGzKOdxzRJEtDUEWASaTrODHbm9vS020bgRbSF0orrU5M7WovMD9/7OaMosWsL8wr1rjKx5qI/cM74zLHZBeeFQuby+lPnCaS7jxp9kdYtx2tOiH33XZ/Vjv/MbRy+us8FQbgPmjx4QRG2C81x+AyitWG+2X07MTgX8DktmTa9AcPE25gZNXCilag0bmZngvSXgdw7lVJD906szZdrjj8iqWyZL3+dhYSqlvewFyxLu3SARfg0Smpgsve54WKJ6DZBFf75PHjx/jFwIC0vjpl4hnSBlzMARo2OnXCqLvvtGfve7eyQDbXfZg3+Udu0zxA96ef4QjFC4oj2VVhDfOZpyYk4IiYqFJFPk9jvvghpSjWyDgRpudmSHXcf5FxCuHpsuG8ldA2hpV8vJux20Dk7nZv+uz67C6jf7XeuXtczUtVNhVo5jxCVSc1SHTQiZ9fkXsmTxQuggBhvLwRzPZmbul5cmxsKATq08s4oiHiw+Dxtu6ophOerl5uYad/GJkvZkD9GmoC0k0CijOkXLxkfPkV3QHx0FC1HeED4E3v0VPmKeBpHRAw8+aJSD2Zkxb+UQlhA6hMGQENfRHIRKFhFdmPnGDkvLr3VrPuBHy2u9W2uXftiqQvuH3/7hRwcmh8ikbrA5MjQBVqugTgVCbgIhuqETmf7zXgS10unbt+9J6Wga2o6tudv9LFq0iFE0UaMHa4avOOIzNKJxO99PR2CsFcJ08NZ/wD0RVmIb+/fv707xMod1VqpWlqs7v5PIIsLD5JGnpsnbb7wm8+69Qnr+4UXx7TFIDqNiqoAosUBubmFPHn2uTOnYXfYt+kG+ghFPXlc//IQMnjBZUjt1kfROXeW8y6+SNUsXyZ8fewpipiLpGhchvpFxMnbiJIkBH0+WjipBlUC8Jojfi4oPy9dffSU9xk2WYMwnjx3DLmsglltTlRFju0GETHE2LUkRrxpBYAdZWGwvp96fgx1oLic+nRFovbQ2EP1rGCUo5RpIFFwQpjFWTvCLi4pl/aZMWbroJxN9DH6rqkrNcbhYrZKrEuol3LdeluRi9Ci11r+6oLPSeNn5ZO/cYcJe2j1AYjA6sbchy0zgb4/UMOmBDY9V4Dqu/ecKaRubKBVQ8/rj44/LZZde2swp8KQYtY/YLszHEBjVIN3ARRpJomOawrI4AxFZkZnf2KEQ6EbbGunYv3bo7+fBwM1hCYDtkv7Ikz93OKMTOA7hjSeklV+uyZU/zYF6G3bNPfLII2a90M4e2uPXZ1d3Zzeus5Fzo9VeRO5ZUFCwD/fpuAhKI9ab0+/pCIzlZEdYC2J6FTY6poGdaMAo5j527FiDBEQEZ2AG7e5KZCFQ+bnz7nskDPujZj55t3S4+QEJHj1Z6sEW7MUaSQwaNgS2KAJj46XTZTdKwtBzJG/lIvnomSfMddEd98qgcy+UVOwivuC6m2T0eRfCAOZmWbV0iXw38zNZC22QU0G/0WPMNomGY7AgDN24fAhcuPjNEhikZmBiRLnV0587dvRJ4mRXcSsh2L/9EjfWHdk2rUN2Tty8yAbOw+ET2RipNmZtlS0wkebctuE+2EV911+kDTq+xhcexfdAGUqT1Vgf+WkHEU9k5GBsCoU2BgmLiE71pK0O/b8B0N7w1V3MFn1ZhA4kroE+4u9mrpUvMiH2B1t4LrR1Ljj/fBOnjl4kC8ZL4I5sFKUZD0qxn4zADkCXG4wDfhSh7ThjJW/hlqkLEFkkFo/Po10OAoi5EapXRD9PjJQbcorl4rcstr5vnz5yKQifoHGfzd2kiwRYT47RqyE5OdkdI/6riBo8r6ENB6/D1P4VTkdgDKH85RuQmtyH98gXX3yxEZv83HXyTwJSpDqpkmyERj/U0aPg45qrrjRKl/94/m8ShU2ESVfcJh7hUQbhKSaPwkhCM2aBOJ+rS3yypI2eJIVbM+XLT2fIl68+Lz0nXSSjL79WOkLDveugYdJ98DC57PbfShGQkFoEpbAyW485Gqx7YpTiwrGHBMBgTf8RozDqordD3HmlVXIUoyf3YWkfwQXmxjoYwsRxSgTOv1i5RBptIC2n8eD4aa2bPUxLz0yLxIRe0hAUtTJ+XrVa8vfnnRSECAghuERgBzUPiU/u3keOxKTJMWyRKf9uhqNbZU8fCtuD9fLkakjlAANxVgCPLaL4XwnZC+psBF+MAoYqmscPuiIldEIfrMiRt2GOgEqzd9x5p1yHNTrOS5hfti2BhFYNgQnBWNplJi0awXzbQqOIlHgjMrfXmR2RuU+OQMVgOxg/IDJHdOYT280D6lSFUF4e8AKmAG4I21Qrf4PhVS7et7SorG15qrt+09HrzjvvZIa80C6UElmLbidow57Vk55bQ2AsE1ugHKPYy8j4k7CX0ABJlfu4ceMMYdmJSmM3FYIa0Dvd+cyGJdLSMm8cRJ1PYNK6Bvp2vaZBkpjRFbYEoVJ0HNsoAnzFH+GZuH94pKRh02LSwOFSWQTEg/HNv7/xFrouL1iPTZCM1BRJTE0zWhHt0lLEqyMt2WJXNYZ2T9y5sI0O1awr8dSxEvTGmSWVMMNmjV7MG7hEGGbxkdI9uZKP/PTpP9A0Er9p+Zh/fddn49DKHztSaRB1I3JybsINfNw86QzhGPX9GtFhpHUXj449YUAoRqKSUqUt3GthSblbWKBEwWb+J2uzZOe7z4FJwjpRmIekw37G9oMYkaEsTOBBgKx/tgPTJpG1dewbK6VRUbg5uEPDNntgRPsZhyjcNpOLtg0yZcoUuRnrYMwr2VXGxXh452iYm7PbpBMfjEkyOy+MpjQKpAZLA4JDm8OwDu316O0NW/ZRlgBkzT5sFQLr54fRSY3vGP+Ineym2YqCaUARNO1v+mCNHHPHNpSmA8Z6bwfoujIvzBPBnoY+u7rb3fis5bJM2klDSkqKO7bTvIwoqX1Mmjjl6IXvZvWZ99OBjmIvYRS7ExmPwuJeIw5scKdeHedi9swxY66AfngRmXj17tFdXnznXbO1fcODOJXlrsclYPAYsIy+sqesGpZ7fczxQTwKtqEJolZUWHBCsnAfVbexk6X66GEpLjgoRSU46WTFctmMtZx9P2P0qd1vJd+xH7r4KLkDSrVjBvWHbUMc8Qmx8+oi6M9xlGQlOjJK0okP9Je6I5x9iRyGv/Ub1kMYMMwsG2iencum5aa7PpsI8OPKTb/pXcPwznrkVv8bbrhB8vbtRx3BdDdGYsZzpLRccrHdJbJPhITjyN1kHHIRBOSjnwhgcEDTcYmA0rJ7Qa5DPScKe++GSBvsp1qWvRPJNUI9qrPZeqTtxXg5+ujGzNJqNDMrBBeliCSuAhi6GfzyWjjCapa3u9x+++2GuMi6kjgVGA9Z2aWr1hinJGrRU1KCf5qO2O4w1d0OkmG72TQNzzs7w14wf0D4ekO1LB9ySMb0SpRGEL7VtTFKrBVipK3DiLhkS4H87ksc8FeOtKr2yzPPPGPMCDBvzsSl9cy4+azv9rv9mf44QnOei+OTGjGSeWEduBD4/pJDUqo0Qa8twokaatGL+cBqN6MYEO1ZJPJ3JNKArSzu54MPZ0O5AmZYkczuRwtC5ElJTpJnnn1OZn42S756+U+SuH2TRE65UTyj4+QgkJynokRjMkuz0+y5jqPXJFCc3gYjmz8UWhPwPR7EeDGQoA49V1VVtVRjs+SxmioTJgRzuiOYb+0rr5ZdmOux3e3ExfjMQX1gd2K6g90aNUlyF86WpzevlyWQuF029RJoc6RDH7GtkbrRPwmOZbKXi+5aNj63BrR+GI7sFiVUt912m+mBGZ7pcH/V59Bo2Q0C84MGTCzmqe7YlV0HUacf2N2B2JjZFhP/w9Db27txtdF6r4wMNXvuCgoPy5dbLMne0HOwBQbxMx0C0yYLFJ+UbN6nrS6VawaUSqeUMJioRWeE0eG3M9dLU10AvlfJC1i05QKrM+vFeEhgZG0tCJdEWKZCAoYgaAtx92Gr3RKTUwziGg0VlJmgeMJ88Zii/v36GjN0N3zaID/i9JXOZqnAwrEmsI7rd2P5YX62zFzHclWYOP4Mq8KXXXaZqS/j4IiXz9omp7rbv2l+eOc+PkADOj73vLw84j0TbNXoxYDWGMqn04NS0XoMv1dC8TccCpaNMDziZtcrYzSaWXuU6ma/85mVGhDQBsqu3SUBlT/7g7fl4PczJQwH7vnikPF6iKCOYncqG4sbNzl/QgIGOYh84PukqKpGcsoq5RBUZKqaMI/CCOgOuxc8EL0pKAKSyibZXFIhRWA5fBGevaAWRvPIvDA+mg6I64MD/0IjpHLNMtkFXbs5c+bIntw8cFmHgVxYhIY/IpQniJ5a/zqX0bKdjujUnz1tPtOdowvjpioRReglJVjbwuIqpa/tJ18uva+/Q9qivsjSNsB/EPKQEugHqSm2mxwulukP3IsdC/UyvG9XWXOgQu765wLxCo+To2ARL7vscrPswDpnGgT29Fze+PjjjzHyN0LbogwGTz1k494S+Q3YwkU58NdQiLWux4Xna6lUzrkMjOdnLIX8tHCh9IJg5fahmGtRTI88lkHA8aeF+UbZ+uKLLhbuj1MC03h4Z70yL8nJKeagh3Iskr82rxAd7DGoz0ETB/vY3luRK9d9sEu2HOQWrHoZBXN/f532NzkPupAaB8tmj5fldPVON1cX248sMLU2ICxpxLqdJ7Zs7UE0V+PiXMwZfeDkGlo7gjE0IyXlcmn/CRTiQ9wbsenMndrvBDtiMeN81zu/67P9zspgo7GBxowaKUkJ8bBf/6pkPvlbSZ8Cs8rjpohnRDT2EVkH60VipGqLhjNEwhxhOOK6FvtC2hAsgAEZsjesBQLdaVHXh5WOZ3XnN2dgvhqQF+4k7jLlaono1F22TX9TClculJ9XLDOXCePuJ4MH4bC9+Dghv08DmuFh4WaEo8KualQQYXjZ68U5Tfs702dYElkuCHo9JIUvP/NnHDzRIKnX3CU9pl4t/jjYj6YNuL+Op8LQjDfLB4qRwn256HAqJRQjtifq86ef5pvoc3ZuN3fuTGd+mA6BdyJ6SkqKvPCPf8jvYJtjyc4qXAXmu/5wM+yUKeAPkC+ChtfvbEPGo4ZGhyTioEIs+oJ9MO3D8h9wGJ0h26Vx2OPhMy/iAq1kvf3220ZTg35vm2nNH01Ax096fLT8/rEnBDZjjKSX80Gmw7woaPz2u/2Z/vhud+Mz42AnxBNsAI14Z6RP4OKcq9WjF/wanOP9TICtQ9T+GQKPARR4YHXbg4Zf7L2bc6aZwKnc+J3AnoOnXn4/5wd5759vG7cuDz8nAd37S5OPnzmiNRi9dgQIzc8LoxVygnpF3MZrc4Ecr8aRmeXVWjAdAzx7+PhKLbQ6DqxdIXtmz5Kj61aY+Q17GAqr7eDuEyAD+/aQDu3bm/UX7nejDQ+yZCQaVw2vhMd64TMRGCyILF2+Ut5/912wXAUS2B6H7l11F7ar9IIQwxuL4ui00N4s3zFIR2PdG8AiRpgDKz7/5xvy0ZOPmmw98MCD0MTPMHY5OHelkU+yd3YC0/wrUtGS7puvvSqFm7MkNCFKOvYbLOdNPt+cRkK/zB/9ajtqeI7gXJu786brZd2W7fLWlb3l5lHp1rldmC/tK66QpIdXw/sRozdIc2ucJ2mdOMfHd7KuVO6FSWpZPne2FGGHdEhsKMxv9pOhI0fLqFGjzHyVhM18MS57PHxu6d3+zfmZ7cA5Is+mxlJUA7bgeOBgvVXI/EBcivta9NPe7Xh4Ws8ODxz1yMQPATEsQ0U1QjLlzoU99t4GOW2F0wJoYV3d7W5EAFYu48nauk1m4DieDevXSezwCRI1+UrxTc5A4sg2WMMIIBzPUKZhfxLarw00okrNDl4ktNK8HCmGFWCapyvAqMa+GLumxA1G6st9w6QGQhc7tMfC+Kjhw8zJI2w0isdDQmjsBZsV0UmwN6ddECIn79TG+Prj92Uv5k1eQUCm63+H43KH4JjZSKz51Is/VJgMUqJuPMCaHt6WKd/efrM8NuMD6d63vzxy7WU4sXKpaZyPZ87EboU+RtLHMKxX7QDteWTda5ux3imo4MW8cf8f25Th6EcJQsNrWIbjcgLPU2YHv+S+QTIMW/bNAjC4jXWYM/V9Zim+HTNzGm585DzOFVFo3LwzDxxJWD/0z3eykKxHe3mYD8UhhrO/q7v97vys7wzLzoISSB5CuGTJkkZMf9yR/hB8WsHPuFol3IA/A2fCImoYJsBwy0FcH2Lx+ZqtW7ceA8V70cgLexRtCGacDeMM6q53+3eGZRz81hOGcBLjH5Ily1fIKzhv7OCSHyQd9u+Dhk3AvCLa2BQsxRYYShs5yWdvQUJD0F8FOFJQzMxG9oYGflzP/hLbo7+0n3CRHM6HWe38XKnYt0cOZW0Qj3XLjc0MruKQh6Cyzu5tW2QnLlcQBIJLgoCn8tA+2QNhgoJnr6HS9epJ4gtRfFMwrAuDOfFvxJwJEj1rtIb0EwvzuauWyMIHf2OCLfh0uhGp7wJxEbpi3xbXgYgoWpesT1520He9k83i3I+ExXYjEnOkcRVW41Hi5CGIBoIjJDkMu5FJkHRAHCtgxprE1SkxxuTL1UioeWAQfWZ+iA/czcE70+KleWpJUqjhXd3tbny2vzNtdhafffYZiesYtil5YR72AZzPirgY39kQGMPpVOZ+sIiT0asEv/LKK43t27d3Jxtin0TTswILwwoi6LPzXf3yzooMDg6S8yaOl4z0NPni629lyUevSAiuqAeflaCeA6UBbFwuNnSGQFLF+ZkvevlfdTRzNAItTeVBa4QnqvAgiFgs8LrDgA/4E6mC/t0OzJlqYUSnCttyagv3S1hthRxejyWD+gpJhUSNeoPHschNlSw3EEgl5Eub63FUUecRkog1rYDENGmTkCoekIryUHRqlATjQAl2hACKFQAAJTtJREFUHu4QzOjOZC/04ntXLZMcEBf3281buFhWz/5GVv0wFwZRY6SgsAA7yruZs69Z10RMZySy17H9mX6J/Gw/huFFN4LGof71nXeG2e3YsnJJOz+JwOESVLfiWhUPycs8YHUg50y+yJhLcMYPjcueDt3Unf5ZFnVzVSb1e6q7/ZvGpXfGz+kJuQicTdaIgcMLrOFR4Pb9NI8NUJzXKmjV/ZcQGDvqImTsIRT4DWYApgXcaciFPQt7P20ce05YIBaGoM+nuuuI2LlTR2NRt2vnTvLKS/+Qo9Pul/iR50ro+VdJm8R0c/JkBRR3Y3CEazDE2Oyr/3XsNMme+Q/zi/kOLf9uWfaTMQ/OEx7DoGkSEg/BAc6c8gqLEn9s3oxE2UMg4rs4JQJ2yGvku+wDsrGiWiIMojuSJrLg4tyIxOYGlhHWXdEx8GB4mMPDckMEhAQ+XO8BotZB44TnkpG4Ctf/LAsfuMmYVOgHcfZhaMLv2bFV4iIDTDxMAR2dQRYdvVwVmHVuB33nXS/7d/uz+mU7sq05UmZizZDAk1R4aAQP62PHUA4tki3Flog+HmcRkAXjyKRx6J1h7c98J6ibHZfU7VR3V9/sbnzWi+mwHMzXPyDsATTiHftumx4GcVFcSVyngOOM4WwJjAkxQXZvb4JnvxSmBUZCX+s4JECegwYNamZN6LE1wMKywVq6cx5gRrNJE4yk8aV3PpD9i76XY7ja3PqIhMM0tzsWWvdjNKsEkkbDjgVF2SQyxvmLAOHdoXKVhjlVUodOUgOb+hUYrUoP7pc8nNJSWnjAqFjVe/tJl5QkCU1LlYMV8Ua61f3/tXce4FYV1x6f22yASBFFiveqgJ1oRJ9dwPoktqiJhERN0agvpmAsibFE0WdJfDEaY4UYoubz2aJingVREk3EhgQbKipFRUAULJF7ue//m3P/OGz3OfdwL1WY75u9ZtasmT179qwpa9bMtJXIXSo8XPQwSzp9rL9VSPu/slpSNvVSMBqLxQ1aOOWM+g00p+Qk3E/V032qSlorRuvdqX14T9rod+lq2EdOP06XZZwZdt1NZ51oOKOLEnVxxq1SGWJ3cmF6UFdXu0g58u2tKYNScWGYdLvLtt01KxVjcbMkPdgUnb0/blJhbtpT50WmjEK+bNJ32J2F0GZxxfxZ2pQOd2qpd/ReXPSnzZv12kFRrZ7sYaVxtSx1vEXMFfPAoxWGdTRkt71VcBM1Ca3WZLRRWh4VbJ6ja6dlwKQflP3YNNzuPGgc4+TXJk8Ol11+hRRVn9HtUUq/3x6hq3Qa2+gQG852oLJupj1RVWKMBoY8TUMd0mixiQ0AnVlB8KFEY682XxdXfPrhvCgI+UDrTbNmvBOeky6h1ABCp/oPQ3fphb7z6iTtgH0vVM/TUdj7fTX0HPJfoVGMxhkgbbS+10m9bhv1WIjc15Gt00UUm3ZcN56V/7bOcrznjtvDXy48M5x3/vnxPjUqhRukG24YHq688oqoeramesTrr78uzls81ON7Xeb+9lL+csNcMbmX+aSTTpIIuGt47cwvhbquOhxJDQIX5d382OQw+IYnwsZqT256+O8LJX+8w+/JwjS/ixOW0mbdeX5wfAOCHNa8JHzhEvMKHYM9X/V2a/VoLysvruMuusWCrenBeBHMRff5soaEp0kc/SsxWL3ubKpBGwHxNENFfxwRbPxx+PPcxqUQWgqErnyTurpwzpk/U6tzV9Q/azfu0TBZtssPzwtddpO6lZjqhScei5s212wn7QUxQezHVKiLY6DG0hPysepUJPjQbZRSXC70juRf0j29o43unmonNa7uoutLHPUoc7VI/r6GUO2lRPyJhnrxckJ+rIZ762m+2Fs9VGfNs7hLbB21/J3arB1theJOnfJmuHvso+Hms4YqtRCPd9teZ+BzQi/vxtCAHaFL5d988w3OitBeuZ9EncyUuQqUnz0p09TYb4Y1hMZhKb3d9EbMk58aV1CP+uZ264Ru0rygkFD2rdf3PjKpcBTbXkd+IzJ9VsDh9A3TdxpnWCrMNMCsuxiO9KijSChRs5KpF7PVaOPqaSo/mKvFQ0MSwyxa0gVcS56ugw9pcjhAQ4Z6TRSrkSryo/kR/sgsjJnIKRTji0EYF7Et84y/S4PgvGG/DlXtddzz7Blh5gFHhWOOOyms/er4cP0pJ4U9r/xz6KFThhvEZNFkKlgBueiTcQGzWnQWteM09izceLKOepu19D1rammA3qZabhZ9xSvxVhTcIosL4dzDzLcDVQCRS2EMKjAH2nD5eRspuKKFAaPUa443W+tgL2r39aMP3h8e+8NVMVODtM/tuBNPCNw1TeOCIV0MaVFJEK3Tq9fV1kYpYNqwucLFCHpk/caTB9IlzSwjQJPGg4aRBEfMsa6FGXH0DuFoXezXIIETvdeb2qS58c/GKeTdcNlll8UbUWBI593pGZKG3cVgliaPLsXhzvMbx9CQBWXVVw8NR+sdA8mKrNsxXtsi09oezC/lb9PAHyPmmqjNmO10RsMCaQ5UMuG2oMLEiwMpCH5mFvKTmJdxWu1eWs3v2KFjuOiSS8PbujtrvftuDrdMeSWceNEV4ax7x4b7fnF8mDToe6GXroBluKgE+ZO52XCpfiQG5n6ujbSbtqB0zBCuWmtuYhoRsdRbJImYPP+G1xiSboUixt6ONKQNglDjY33DTO5K02UJz/zzH+Hua4dLV3vqwrydfe4vw94DCltM0sppAsqF8mVtiBteaNBgDldi0+VBlysMihtpmXs+FsgxKaNBY0P6vFv6qE2oDqFfrTTa9aGRTGFP6lRdmAuDFn9qiJs1xmVhSpeGpW5o8Ke4Yn7wfAtLEpxfgtRQ9wkw75qrHuwYejQZ12ncLTaf/8oWJ7WwO/2aWoVbVBkaBKu0dywOWfzT/dEp5JX257lL4VxJaE0nTXol/OpXvw4vz3w/dJz9VuD3fmXkA6GTzgUZMahf6Df0vLD1oMMLwzRqQeYnU6KfqMeiZ9pMB79srHnQulpf43AeqhYXtQNd0Qr17bNKp6CYJt/iChgrOj+UnlCV/xNJFufqANRZ0hucpmHdS889Gx68/Q7VwzdidD8O/eoRUcm4d69eYsTCseRZpuE9qXFZpGVJeJYOPz0cAgp6LSmxhjFjxoSxox8MH8x8R/dXTw2/1lFo/fv3X7joD73TIg5+5l4nn3yy0G3CkH7tw/Bjd5GKlvKk9OdJte1r144LoyZMDUdqCPvL886P7yNe+h3OWxb6XYYOz/qNB2bdeTjeTTkx+kE407dvX3r/eM6GFpSPUvq3yLZ6aEg+MYv+oQKuNU96RERZV6sXO07HDMzXMLHm2GOPjYXLh/GB/vAU8tI8v/GG0NidQtww2auvvhYuvviSMGnau6Fn9Wxp0GsX7TWjwm7rdwyv/fSQUHX4j8PW+x8Ub4ykItjgYrNnrTTzt+7ULor6YSDWv+hpbHg/epBRXSmBhEPGHAtG+rdawY8/+jDMlcRxjoZ9M7StZvobk+NxcRMeuMfJRdh1vba6gVEDgIaPw6677x6O1J6rHaSFgdZCdkjoiC6HPH9zYVRyyoqWGib5uXQN88yQwYPD7tJE4QQqFLoxpM0l8pzqe+mllwqDLovOBDlvv7itf4GENvzjy/7v+fCT22YobEYYPnx4GDhwYHwfzGnjfBqCt7sUzAtLcbhtnSZ+MzZ5oME/TeeJ6JzH+bW1tTWvv/46EsPvy7oOE7XV5rMa1uqkYgKk59r4tET322kLQ/13vvOdajZnlurFsgVEanmFZHweBEfFefHFl+KYf9KsD0K32W+HaRtsHi7UjSYdteh7/O7bh/3/50ZpZOxYEHzA8IpHz/Ul3eaxeSftqRJmviohHMNPqUJqqGFdZDgxEGtVn6onovJ/JBWqT8RIcyQ9nKdTnd59a1qYJWaarK0lL417nCwtYlCv2qB7t1ClJYXJM9THzikMoQ4++JCwL8eMaRe1dxwXa+1J0OWVdWf9WToaOYaEtN6XiEFG3Xuvomg/lRjlwkO6RC2Ma8a+Fh6Ox2WjdVkwW9fppkmVLepj4ydNbsK2C5t2mh/++qO9wma6jragGqXt9f+aHgZcxtCxMRxzzDE6T//0hQ2s85OFJJjFpf7UnaVNw3Cn1rRmLsLova6//vqgXcr10tGsls7jM6LbHlqZtA4XMK14LmkGIytuATaR+zmp7LSRtscC6SpWaoNmnC/QgqSFYDeR7QamfrsN03DjgBgqEMe0naEfW9Fpw1ClW1LmDPlROE/a4q/dNjwMv/Dc8PXbHtVO6Q2k46eTdMVc/Tq3C306to3XjboSshAME70/e1aYMX1aeGfqlPC2eiF6o2kSu0+Tlvrc2YvqHxZyoDOX1FC33aiHtr9IZK1K/f68D8PsqW84OMIBAwaGnXfZWUy1rc7J6B6VTOn9PA9ypXAkfzP+Yu7mwhgWckw2t1rG8xMreoRv7xTCaQdsGXpvpHmXhDjvzJynDY9TwkOT5oRbn5Fas7arfN50DOccqG0p/fuE9aWp0qB1PubDH2pouO9v/hYe0xkZ222zdbj6+huiLmaqB+m8G6Z5Ni4PprjU7fjgSln+K/MuLkbUyWgLpApVKfH8PE1lttWUhlbDdffzn9tCzNJgMLLiMewgMdPdqvAL9AEVF198cUVdXV2rmSyvcHlpiqdyjhnzSBg27PzQbZNeYdprk8Iu140Km0gPfuR3Dws7//R8CT0OkM5gZdi2Y7vQd/11xVwNsaVlnYv9Uy9NGB/+qXnJgyNQVGmd2WabvlG7ne/v2bNHPGRTEtf4w0kZpkp7eHD+nqw760/pmgujceMk3Di8W6tnuOKg9uF4MUm1lgkatXbFcBgJoF4erzqarovaJ+v4bG6mLAyVK0LnNjWhj9a66tbX8FDz0waJ4wVChearDz47JezzG6mI6UaTP+q2k7322itqevDeNG9pnu0uBfPCUhzuUhbmQuGaIxmkDBGPXhPTV2iY/BXlizG762zM55J6LC0GI3/O8M/UagzzGfc69i0qfFKhivVk2YIjMRdents4QwqTlpoTa6+97rpw7z33xJtb2hz7k1Cz1ZfDO6dIK7+uV5g5eVI44nc3hyP33zusIUECZ3i8pwsinhn7SLhs6KnSI5xFkjqa7OuhraRqKJ2SDySRaCkguOA8dW745J3RUNFEQxg96XrSnm+nuRQHBK299joanhQ2aEJPGTAMxPj7gDbF3KbPo0vD0vi8D5H0008/HTXFdZaCNkWuHa74xk46Vo1vKqxdEZ9PQZwTe9AmoYXftRBCpDjoSMYDbtR7PTBhmnqvAnNtUlurewXujEsGNBzOS0tgXpwUh7uU5dtZTOaeO+4ZkKlX41atYTKTzwtkXVcJW6KGLnFpGatSXaCK3lsV7Ggt4M2/6qqran6ow/h9FZJbtlKZcGFSULiBGLvzIJWXucw+WouDwRp1K+Tcu0eGNSaMi+sJ1R/PjWn06LphaCMm+UCSvaceGRMu+fnpIbw1Ofzn/vuFfQ7QZeWqKG01rIChYBibvMaBXMEezi9ueWJ+YSTyTb6w4E1reshba/LS4r0eGv7uiiviKzp3rA+/+Iqu7dVaHD1QZJKmlytrylsh32zRL2XMXLc98Xo4XMem8U2Uw6kanvt4AueppZD3p3FxF/ObNqWhYeHU46htoqVNieRrJDm9UbQwF11ri1WheF8pU+i3S1G0LszlfaeGiAN1lkedpDXztd5SxboIFZaK58JKX5WHc3gaZncK7YYeSdx7783R0GBCWEfCiKottw9rdu0Z3nlhfNj1v68Na23eN8ySuPy+a34b/njuaWGPvluFoaedHg7UFvTajXuGtXRSEy05DOXehnRplfGbYfDTswGNA0a8cGmjQP6iJJKaLJPmtxx3S+JQ1qNHjw7XaXLPqby3fnuLsN1m62sOuihzkbYNuSM/eRYmij2cwv/4t1fDUTc8q+06SCerwq133BV21aUMfL+/pzUwjZt1409x5CnF8d3Mo9mvqG0o8zfbbLManQw1Vtk/uOk7XUebvEsWLM0ejJzS/MHELELvr926T6tr7oNSsHqX6iOOOCK2rFTCvJ6MgnLFVPxYcPanYXYDMdDgJl0mtTv020Hi6L/GlnXdbfuFDjvsHjof8d3QecutwmvagnLjCYfFeByKunf//lq36xCZhx8TK5FCSS+bPpEcjtvhhuAw9huCcx5xp6YYPqVZHDfp0XvRgt9844gY9UcDOof9tt5I7bZ+i4pMJBEWSi8/dWgKq4CF8EoJQ7gO6TcPvBBOu3OKkPPDuj10a6nmd1KWjSJ5l42/uxj0G/PCU1zWjb+YJU034JfonEQdQVAvpYcabQx9WdLtA5oO6HHddBaWOGRtdWkbmAtG/kh2b417Z+gDq3VaT/09Grq5B4MZqAxZS+ZSHH4MOMNi7kigB4u1XbTfikHhRy8+Fyq0G7h9ry3C6/8aH8Y1Mdf5F1wYDh50YNTYRzOCfGUriNNLod/dHI7wPNo0Xil3S+MSj++YKy2NJ8czP2obeqzHYoGMhocwSkHDpICKjKRHuvZHCPM0jkuzna5NoieNfELMxVrXXF0b/B+BXdTqIaJQo5yyK7yx0AClzBPflzRoZqIUb5xhGoabRgWjfYpc2FCvs1OqxVwzNBcbKOZigxoE1M2lauDgZWHoyZjAzJEdpTnZ0WKytXQdEsqVlfwUfoiZLZuhtBAdBg6ThhlnfCTQg3WPWVr3mfiCjj2bNye0H3Bw+Pe018OkHx8Vz9a44MKLdFXrjjEPMHq2chRL13jD7HuNNywWXgyfxitGk+JT+tQNDWWA3uBLOrX4/rfXkbbGm2FdDefWULkjAYSxOLErMhtQFkFNLGU9ZuuijicnzwpPyT728syw74iJ4clJ1M+ZYfDgb4TzdGwaZzpqKrDIaMT5KAemNKXchKWW7+OfOQ7MhZ8rlU499dQGmOvFF1+cpzXS3TQqeVXk1EUUIpa6WdpDxPQDmEhq00LgHqG91Yo8quHiGn/SZWYqjCqOBKNQig0XSYgCTFvy1G+3Cxk63KTHJLdPn94koQtBpodZD98b3h9zd+xSOfKLc/igwzg+bqdhmOJw26ThxqUwDU/dKU2euxhtmsfUnZcG4TRcSNFQa6Ine1hzsT8/FWSnK0qHsEufNjpDsSZs3GEN3alcrYvz1oxCjwk69k0lEhnwLy99EJ5/nXMPF62X55xzTrxOiPRhLv6hjfNWDszSkIZxduMvhjPezMVNnEOHDm3QsLBKzPWphot7SyxP3aMOfraCTuJL0RS6gaX4gpyk/YG7K+xhMVmVRo0NOmSkis2D/CAqVp6UzgXswrSfdxRzE4Z2B5cmnKgtNJ10NHO19ldRVc46W8d+7bF7fJ8rc5o2cbP+5nBLMnxx0kpp89x8H+WAQi+7D0b95a7wgM5bXFyzdY8uoXP32tBrq22jIIgDbGBg9/zZ8irHn0cDLsVn/dQT40wHc+Gm5zJzaVhIyzlA9lFZ173F/ewW0y8PBiOz/tD+cj+g4WKVerR6ncxazd1jnpwuDpO5kFNoNwX/vrZzDBt2QXhXF0NMmzo1HH/897V94tC4lYT5hltexyGTdmdhuWF5dCkudfsdKS51Nxee0hZzw2SUBeULo03ThlAOq5mttb95Ogn5bfk/FJylE3r/LVWwTbR7ey31TEhHu2m7/7Y6dbenBBnERzoLwyIIIm+2vBvj/KYwdWdp0rCsG38WlzIYabnOMOc644wzEGgw54K59pUdLes6J+eyM8uLwfhCfzA92YNisjVgMh3FXX3ooYfGIY2Hiy7gPEhCKT712w2kYt166/9KmnSN1GQGhe8d9724vuWWN6VNfyZ4TBaX9efRNIdbkuFpWqnb+TQOJsNQHliPGMB7WQG1JnolJLBueGAm3OBtieOK7vSbg85PClO344NL8c6H8X4veWAKwPAU7ZRhw4ZFgQbDQqW1j+xy6bn4DszyZDDebyaTNlxksrYwmbZJVA+WJrcXKlvak/kH8SIqEzp4r7zyStybROWhQqU/DjrHaQ6Wos0LawmuuThpeDG3vyMNB2dGA49xhSXMbhgJk9I7vZaWG/GdRgqzbtPl4Z0/voG5H0sQZ511VhTFW6ChHm1vSYP/qey7jsVvWdaP5c1gfK8LYAu5x2hO1kVzsvk6KTgeOyBvSd3FYj+ChLNhMCpDCcTw/ByHm7YULBXmSpBHUy4uL400bupuLa3jGzptl4n9hqYrF5YTL00r68ZfDGfG5h00krrxJGpoaPvM/KZ1rhnqbQeoF54oEtctyJeLWREYjA93QXSX+0FpfPTRojRSx5qLLroo6PjihVoBbr38E7KQxFJc6sdNJUrTcHhLYDlx8mhagmsuTnPhrrB5dOWELQ6Ny593YVK/0zGuHH9KazeKuxMmTIjn2OsVUUNDo5OX1aMNlALvVOFcp8jCcjOfyVSXWxbiixkvszZBwXxZzPWodBfjWoU2xTWioOqWi2ELTFLMkloalvpxOx3jWwOJmzW8G2OYhufh0nC7y6UzPdAVtSU4x8lLw2GGpmkOpvR5tMZBhzvPb7whtIxCWNPjUjy04oWqR7dQzDVW8/jtm5iLurPMRPHkq5hZVgvNxd6f4hnwsy7HqS4jNGmtUyu1PQU6ZsyYRikHV6ggF0qL/EMM04TSHwI+z2+8odNpKXQ6eTAP5/fkhS1p3OK+y/RZmJcvaEzncPvzYEpvd0qX4lI3jQ7CDIRSbLfRsg7nxqM0XqVL8m7Uuw+WAgOjHurQoot1ZGw5mRWJwSgCmIw80TLdqbnSfBXsQG0TqdDNH/USUlQyXERLnoJOf4B/kuItNA43IqWxO6VJccRprb9UGnlheTjnodywcumcbhaWip+lLeXPC0txuPP8xhs6P8y3JAALZ599Nloj9dp2UiXhRoXqxM9FMxQ6GeoOovkVxqwoc7BsgTB0JW8U1oGyt0jY0Rbhh4YHNRQy1/F4uJgnZVScRRiwmD/F222YVgDjSsFSYdm0StHmheXhnGZeWB6uFL3DsjCbjsONtz8PprhSbsLyLL0WQiks04RDDjmE650szECf8OuybJb0VKcg9iRzK4hZ0XowFws9GJax9Iuyt6j730MH6XTTAmnDQw89xAbGih5a9GR9ht4M459od3P+LJ3p/bMdviRgOWmUolnWYWlZlHp3sbLKi5+ltT8LeR8GETwL2TdLifiwww5boDPwF9TW1lZrm/+zGi721zILYnjqCBWA+rLCmRWVwVxQtEgUIFuLr9YEtqsKth/zMZ3HV68erZJ5GWNxWjusf6wT8M/L86e0dqf0KY74zYXlvcPxyoGlaJZGWPb7/A7j7TcshXdYCku5s2H4jWNEAnNxnDUnXunUXQQZOr+1slIKy9coP4PEXO8JUjeYd62wZkUdImYLLJ24fk2B12rI2I4ho9zV0jur6NevX5QuefHYPywLSdi41O2fmwfzcI5raBr7y4Hl0JSTbql0SoU57ZbAUnHSMNzl+E2DIINe6/7775eW/mB6JU7creFQULmPk+XcQkxaJwqYFfC5sjAYRUde6XGRELFe9gf1ZANYNFbPFrU/NIzQ6Uw9FqryIJL3D06h4i6CT/12G/rHp9DuUjQOKwVLhfkdhqVoS4Vl42f9xeKarhyY0pTrhs7Wcy2G+9zPxWG1I0aMqNfIpJr1LkkJR6tHO0b/eYryC2OtsENCyjM1K/oQMc0rbg8Z2Vd2o1q6DyToGKDerEanBdXfp+t9tEhdofWQeIIQc7Nyh41+UTkVBNqUbln4y3lHOTRLIt95aaS4rDvPD45/QyPIcBDl49tuuy0MGjRowbPPPtvAFUIaoSA5/qm+6wSNTHSEbBwSrjAieMq7ObMy9WDpt9AwwGwMIXrL/l69WX+kivpR87fccsvqIUOGVEh1JkqgGDbyQ/mZGNypzeLsN4TWbsM8nMOWBmxJmo7jvNpfLnS8UjANK+UmzJb3Y7yu9dRTT6GkG69t1TmaEhrW0GuNkcT4eDWiL4uUH8DPK0iz5FhZzMrKYC7fdJJ7vH7ghfpBHdTyReY76KCD4kbObt26xZ/rtbNijJZWEF6QVog0LHWbzrBUmGlKQYdl0zF+SUKnlX1XKX8alrrTtFI8bltoMGhigEOIwc0ml19+OYxTwUGgurZ1jno2He0VL7+DPP3H+Fcqs7INEbOFCyPxDTQUT8reIHF+F7WM20mkX6m1k/p7dTS0xvEVGjrGo+L4sfR0mOyPN86Q8Dy3cYYpnXHFoGmLhRtvOkPjlzX0+/NgisOd5zeOfDPHwr6lywlvuukmdkIv0LERDVIeqBZTVQj/B+0zO1iKuo+KnB4Lu1INCZXfRczK3oOlH5O2dLsq4BJNkndmnK9xPNLGKp1FXrnjjjvGA0TBpz2aK0KxisKLitE4LA03rlzouKbP+o1f2tDvTWHq9vtTXNZtv2lhKkTvGllEHUL9B1q4Bs2Va8BrOPgP+XXSaxhLHJn0XxYwK+nzi8Rg/IJsqzdEuHPVe22iq2nQyI+MpoNPK6UoGm+8J5IXqi11BEclcUUp5c6jLYVzWHPQ726OrtzwYukZnwebw6XhuO13njwURMVpzJgxXLagzeONDUyyuGJYh39OFu05sjcSRwYJIcxXGGKAWcnNF43B/DtSUS7bFn4g5hkqncauuogCGoYdlSeeeGIl1wQhdaQlTaWO2XkakdJKVMptWsNsxbN/WcLFeVcebYrDnfXzrYwKKEcYi2E4R1Vz2Okpp5xipqmuq6tjD9c7auwuUZTfyqL1Tj1kqL9SDweV/8+ZLyqD+UPToUY7IU9WBfiBGG0Dhisy/NCKb33rW1U77bRTXENDskXl8PDRlcmQSFn3ksA5jSUFUwYolmYpmrywvO922kj+sGzdR3jBDSaSDHq9qrq2tpa51wxJBS/X/Pi3ujsOsTsm/UcFzBfo+UVnMH4V30iPxvAQA6OdIEY7ST+6p4QiHJQZK8I+++xTteeee1ZwMi2XNVCh0l7NFSytfKmbxE1jt2EeXTlhpllcWOp9TiuPJsWl7jQOPRVh9FbMrzCzdHAOGyB1mGzjyJEjo1RQRz5UocYmxnpTgosrRfZ72ZSxaOBWSB1C5WuJmFWBwVxQWUbjeNshqig/EDP1pcJQSWTqNWerPPzwwyu5XrR798K9XQTAbPRu0Jaar0ELDdZuwzycwwzLocnSZv15abQGlzIVPRXfT+PE9bOPP/54uPrqqxdo6Adj1VBm0Iuxxqu8ficcc6xPyKMMPdYXnrHil+qxKjFY+s1pjwZ+X9kTJCI+UPuOapiUy8RebZdddqnabbfdKrbYYot4kRxaB1RU92xUJDMb+LQSp24STP2pOxtmf2tpFje+6Xk/Bj+Wngqmwi11JaR+Yfz48UGaM42jRo2KvZXIq+o0v9J9x/VqqEbJf5XsX2VtVinG8kevigyWfnt2Yr2pAr+pyjRYw5teEGr/ESBOvjV8rNRcrRINEQ7j4WxAmAsmo2cDYlwxDVOc3YbQ2J2FLQ1zOosTP2ZCD+LAUJzCBeSbUGOCqSZOnIg0sPGOO+6AqTDV9FYYldMkzb9ulnOk7CRwTSYVOBm3ysBVmcHSn0wlgDtccWC8AbJDtEi9vxipC2cFIupvomncZpttKnVFD+pYFYicmbMhIMkyHBWUSpu1JJQyQOp2WB7OYYalaIqFERdDOPmFkWzJL4IKjkJj+CemapQksFE7ypEEUl+qkLoiKdT64kxZeqs/yT4km5YftLFhElxlzWoGW/TXZ9fRCNXFxfEAy6+K0fqL4TZgeNg0X1vIlBKQVGoYibpPVDbmTEe2udMTUJGpuKn1awmzBWc3MPXbXQ7M0jhNM5MhdHyLhDyx8aCXkgSQQ4Yab7/9dq9F0djERgQmVG/2rphvtHC3y94vG1sdQQzDQJjMccGt0mY1g+X/fsoFZgOmrfC68u8pe4B6q/5ioM2Zm6gVj3MT4RcynC58r9DZjmwIjZVTEst4lgjbL2j9qaxU9NSYAc1caRhu480weZB0jSd93KTLELZpaw/zpDj0ZZ1Kun+Nmk8tUA9F3jGRoZhrSq8zxhFTvTx37lx6KHqrsbLvy9q494epnIbDVnm4msGarwKUEZUOkzIb3LGN7B6qxP11EM8OYpweVHAEATBdk6HixRadeZskk5Xas1ZB5ZW/gooM88F0WBjQzOeexn6YBZMyjed+ZiLezXCWHQQM85g/ac2vEcGNhnwLnn/++UYxVUxHD/fYcVe4DxNSGm+KCZ9R7zZaNI/I/kvWwz8547IHENxqpqIkipjVDFakYIqgizEb5GvLcjpxP9kdxChfVi+3iXq49jAElV6LqwpaxHyugn5JFyyI6SrUO0aLIIWhptab4r8yk3HgFmLyJou7EebS1o9shU/zHF+O4jPzRZhS6XygIeKrsojU0QkcJ/u8rMXqMY4e9FSYz+W5gF79zCuB1QyWVyrl4Sg7DyOp1GkL7xS6yLGpLD3dFmKSzdVLbSy7oXqnDvRMGHobhm9NQpSIa82DHpG5n0XrzLPEPO9JePG2NCleF3xJ6b8gO1H2Vdm3ZbOGzPGNfBs9cJZxhVptmiuB1QzWXAmVH54yHLGKtfQwZUfZrrIbyiLn3ki2ixiii5iQsPXEgOuJAdsIriO4lnouKnzsReSuF8M0yH4i+5EY6EP1RnPkniNGna3eEj0w7HTZqbIw0FuydKFxuCqYGvJe4PbVDJWWS6vd/w/PkJfcLW/tVAAAAABJRU5ErkJggg=="
    home_dir = os.environ["HOME"]
    path_env = os.environ["PATH"]
    hostname = socket.gethostname()
    global envDockerInfoApp
    #print "About " + "| image="+str(infoicon)    
    display("🖥️ System")
    if envDockerInfoApp:
        #print "-- | indent=4 href='https://github.com/frakman1/dockerinfo' tooltip='View and manage all your docker containers & images at a glance' image={} width=64 height=64".format(logoicon)
        #print "-- 🏷️ Version: %s " % envVer + "|tooltip='Current Version' "
        #print "-- 🏗 Build: %s " % envBuild + "|tooltip='Something I dreamt up while in COVID-19 Quarantine' "
        #print "-- 🛠️ Made with ❤️ at the " + c.RED + "Frak Lab\033[0m" + "| tooltip='Clicking here will open up my LinkedIn profile' href='https://www.linkedin.com/in/fraknuaimy/'" 
        #print "-- 🏗 Made with 💉 💦 & 😭 at the " + c.RED + "Frak Lab\033[0m" + "| alternate=true tooltip='Clicking here will open up my LinkedIn profile' href='https://www.linkedin.com/in/fraknuaimy/'" 
        pass
    else:
        display("-- | trim=false image={}".format(logoicon))

    python_path = subprocess.check_output(['which', 'python'])
    try:
        ip_addr="0.0.0.0"
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip_addr = (s.getsockname()[0])
        s.close()
    except IOError, e:
        ip_addr = "N/A"

    now = time.strftime("%b-%d-%Y %H:%M:%S") 
    if envDockerInfoApp:
        display('--Version: {}'.format(envVer))
        display('--Build: {}'.format(envBuild))
    display('--Last Refresh: {}'.format(now))
    display('--App location: {}'.format(ME_PATH))
    display('--$HOME: {}'.format(home_dir))
    display('--$HOSTNAME: {}'.format(hostname))
    display('--$PATH: {}'.format(path_env))
    display('--PYTHON PATH: {}'.format(python_path))
    display('--PYTHON VERSION: {}'.format(sys.version.split(' ')[0]))
    display('--IP: {}'.format(ip_addr))
    display('--macOS {}'.format(platform))
    display('--DarkMode: {}'.format(isDark))
    
def print_refresh():
    display("---")
    print_about()
    #print "🔄 Refresh | refresh=true"
    elapsed = str(time.time() - start).split('.')[0]
    display("⏱️ Elapsed Time: "+str(elapsed)+" | tooltip='The time it took for this program to run'")
    display("---")
    sys.exit(0)
    
    
    
try:
    isDark = int(os.environ['BitBarDarkMode'])
    envVer = str(os.environ['DockerInfoVersion'])
    envBuild = str(os.environ['DockerInfoBuild'])
    envDockerInfoApp = str(os.environ['DockerInfo'])
    #print "envDockerInfoApp is: " + (envDockerInfoApp)
    #print "envVer is: " + (envVer)
    #print "envBuild is: " + (envBuild)
except KeyError, e:
    #print 'I got a KeyError - reason "%s"' % str(e)
    pass
    
    
#-----------------------------------------------------------------------------------------------------------
# Handle Inputs
#-----------------------------------------------------------------------------------------------------------
parser = argparse.ArgumentParser()
parser.add_argument('-stop', action='store', dest='lstop',help='Stop Running Container')
parser.add_argument('-start', action='store', dest='lstart',help='Start A Stopped Container')
parser.add_argument('-restart', action='store', dest='lstart',help='Restart A Container')
parser.add_argument('-remove', action='store', dest='lremove',help='Remove A Stopped Container')
parser.add_argument('-rmf', action='store', dest='lforceremove',help='Force Remove A Running Container')
parser.add_argument('-bash', action='store', dest='lbash',help='Bash Into A Running Container')
parser.add_argument('-shell', action='store', dest='lsh',help='Sh Into A Running Container')
parser.add_argument('-copyid', action='store', dest='lcpid',help='Copy Container ID to Clipboard')
parser.add_argument('-copyname', action='store', dest='lcpname',help='Copy Container Name to Clipboard')
parser.add_argument('-copyimg', action='store', dest='lcpimg',help='Copy Container Image to Clipboard')
parser.add_argument('-rmi', action='store', dest='lremoveimage',help='Remove An Image')
parser.add_argument('-rmif', action='store', dest='lforceremoveimage',help='Force Remove An Image')
parser.add_argument('-local', action='store', dest='llocal',help='Toggle Local Server Support')
parser.add_argument('-remote', action='store', dest='lremote',help='Toggle Remote Server Support')
parser.add_argument('-ip', action='store', dest='lip',help='Remote IP Address')
parser.add_argument('-user', action='store', dest='luser',help='Remote Username')
parser.add_argument('-passwd', action='store', dest='lpasswd',help='Remote Password')
parser.add_argument('-dpath', action='store', dest='lpath',help='Set Remote daemon.json Path')
parser.add_argument('-reveal', action='store', dest='lreveal',help='Reveal daemon.json File In Finder')
parser.add_argument('-ssh_method', action='store', dest='lssh_method',help='Use pexpect with password (slow) or public/private keypair for ssh (fast)')
parser.add_argument('-web', action='store', dest='lweb',help='Open in web browser')
parser.add_argument('-custom', action='store', dest='lcustom',help='Run a custom Docker command')
parser.add_argument('-follow', action='store', dest='lfollow',help='Follow the logfiles of this container')
parser.add_argument('-stats', action='store', dest='lstats',help='Stream Statistics')
parser.add_argument('-prune', action='store', dest='lprune',help='run docker system prune command')

ssh_addon = SSH.replace("<user>",user).replace("<ip>",ip)

#print("len(sys.argv):{}".format(len(sys.argv)))
if(len(sys.argv) >= 2):
    if(sys.argv[1] == '-stop'):
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])
        #print 'ssh_method:',ssh_method,'local',sys.argv[3] 
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " stop " + sys.argv[2]
            open(cache_path, 'w').close()
        else:
            cmd = DOCKER_PATH + " stop " + sys.argv[2]
        prompt = OSXApp().ask_yesno2("Confirmation Required", "Are you sure you want to STOP container '{}'? This will run:\n\n {}".format(sys.argv[4],cmd))
        if 'Yes' in prompt:    
            (stdo,stde)=run_input_script(cmd)
            OSXApp().inform("Result", "Script returned:\n\n{}\n{}".format(stdo,stde))
            
        sys.exit(0)     

    elif(sys.argv[1] == '-start'):   
        #print sys.argv
        #print 'ssh_method:',ssh_method,'local',sys.argv[3]    
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])        
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " start " + sys.argv[2]
            open(cache_path, 'w').close()
        else:
            cmd = DOCKER_PATH + " start " + sys.argv[2]
        prompt = OSXApp().ask_yesno2("Confirmation Required", "Are you sure you want to START container '{}'? This will run:\n\n {}".format(sys.argv[4],cmd))
        if 'Yes' in prompt:    
            (stdo,stde)=run_input_script(cmd)
            OSXApp().inform("Result", "Script returned:\n\n{}\n{}".format(stdo,stde))
        sys.exit(0)    

    elif(sys.argv[1] == '-restart'):   
        #print sys.argv
        #print 'ssh_method:',ssh_method,'local',sys.argv[3]    
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " restart " + sys.argv[2]
            open(cache_path, 'w').close()
        else:
            cmd = DOCKER_PATH + " restart " + sys.argv[2]
        prompt = OSXApp().ask_yesno2("Confirmation Required", "Are you sure you want to RESTART container '{}'? This will run:\n\n {}".format(sys.argv[4],cmd))
        if 'Yes' in prompt:    
            (stdo,stde)=run_input_script(cmd)
            OSXApp().inform("Result", "Script returned:\n\n{}\n{}".format(stdo,stde))
        sys.exit(0)  
    
    elif(sys.argv[1] == '-remove'):  
        #print 'ssh_method:',ssh_method   
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])        
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " rm " + sys.argv[2]
        else:
            cmd = DOCKER_PATH + " rm " + sys.argv[2]
        prompt = OSXApp().ask_yesno2("Confirmation Required", "Are you sure you want to REMOVE container '{}'? This will run:\n\n {}".format(sys.argv[4],cmd))
        if 'Yes' in prompt:    
            (stdo,stde)=run_input_script(cmd)
            OSXApp().inform("Result", "Script returned:\n\n{}\n{}".format(stdo,stde))
        sys.exit(0)    

    elif(sys.argv[1] == '-rmf'):   
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])        
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " rm -f " + sys.argv[2]
        else:
            cmd = DOCKER_PATH + " rm -f " + sys.argv[2]
        prompt = OSXApp().ask_yesno2("Confirmation Required", "Are you sure you want to FORCE REMOVE container '{}'? This will run:\n\n {}".format(sys.argv[4],cmd))
        if 'Yes' in prompt:    
            (stdo,stde)=run_input_script(cmd)
            OSXApp().inform("Result", "Script returned:\n\n{}\n{}".format(stdo,stde))
        sys.exit(0)  

    elif(sys.argv[1] == '-bash'):
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])        
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " exec -it " + sys.argv[2] + " /bin/bash"
        else:
            cmd = DOCKER_PATH + " exec -it " + sys.argv[2] + " /bin/bash"
        #print cmd
        print "sys.argv[4]: ",sys.argv[4]
        os.system('echo "Running: {}";{}'.format(cmd,cmd))
        #sys.exit(0)     

    elif(sys.argv[1] =='-shell'):
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])        
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " exec -it " + sys.argv[2] + " /bin/sh"
        else:
            cmd = DOCKER_PATH + " exec -it " + sys.argv[2] + " /bin/sh"
        #print cmd
        os.system('echo "Running: {}";{}'.format(cmd,cmd))
        #sys.exit(0)       

    elif(sys.argv[1] =='-copyid'):
        write_to_clipboard(sys.argv[2])
        sys.exit(0) 
    elif(sys.argv[1] =='-copyname'):
        write_to_clipboard(sys.argv[2])
        sys.exit(0) 
    elif(sys.argv[1] =='-copyimg'):
        write_to_clipboard(sys.argv[2])
        #OSXApp().inform("Result", "Script returned:\n\n{}".format(zstring))
        #write_to_clipboard((sys.argv[2]).replace('^^',"  ").replace('_sp_'," "))
        sys.exit(0) 
        
    elif(sys.argv[1] == '-rmi'):   
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])        
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " rmi " + sys.argv[2]
        else:
            cmd = DOCKER_PATH + " rmi " + sys.argv[2]
        prompt = OSXApp().ask_yesno2("Confirmation Required", "Are you sure you want to REMOVE image '{}'? This will run:\n\n {}".format(sys.argv[4],cmd))
        if 'Yes' in prompt:    
            (stdo,stde)=run_input_script(cmd)
            OSXApp().inform("Result", "Script returned:\n\n{}\n{}".format(stdo,stde))
        sys.exit(0)  

    elif(sys.argv[1] == '-rmif'):   
        with open(usecache_path, 'w') as f:
            f.write(sys.argv[3])        
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " rmi -f " + sys.argv[2]
        else:
            cmd = DOCKER_PATH + " rmi -f " + sys.argv[2]
        prompt = OSXApp().ask_yesno2("Confirmation Required", "Are you sure you want to FORCE REMOVE image '{}'? This will run:\n\n {}".format(sys.argv[4],cmd))
        if 'Yes' in prompt:    
            (stdo,stde)=run_input_script(cmd)
            OSXApp().inform("Result", "Script returned:\n\n{}\n{}".format(stdo,stde))
        sys.exit(0)  

    elif(sys.argv[1] == '-local'):   
        local_enabled = not local_enabled
        with open(local_path, 'w') as f:
            if local_enabled:
                f.write('True')
            else:
                f.write('False')
        with open(usecache_path, 'w') as f2:
            f2.write('True')                
        sys.exit(0)

    elif(sys.argv[1] == '-remote'):   
        remote_enabled = not remote_enabled
        with open(remote_path, 'w') as f:
            if remote_enabled:
                f.write('True')
            else:
                f.write('False')
        sys.exit(0)
            
    elif(sys.argv[1] == '-ip'):   
        cmd = "osascript -e \'set theString to text returned of (display dialog \"Please Enter The IP Address Of Your Remote Server. \n\nIt will be stored in:\n{}".format(ip_path) + "  \" with icon note default answer \"\" buttons {\"OK\",\"Cancel\"} default button 1) \'" 
        result = run_input_script(cmd)
        print'result:',result
        if 'canceled'  not in result[1]:
            ip = result[0]
            with open(ip_path, 'w') as f:
                f.write(ip)
        with open(usecache_path, 'w') as f:
            f.write('False')        
        sys.exit(1)

    elif(sys.argv[1] == '-user'):   
        cmd = "osascript -e \'set theString to text returned of (display dialog \"Please Enter Username On Your Remote Server. \n\nIt will be stored in:\n{}".format(user_path) + "  \" with icon note default answer \"\" buttons {\"OK\",\"Cancel\"} default button 1) \'" 
        result = run_input_script(cmd)
        if 'canceled'  not in result[1]:
            user = result[0]        
            with open(user_path, 'w') as f:
                f.write(user)
        with open(usecache_path, 'w') as f:
            f.write('False')        
        sys.exit(1)

    elif(sys.argv[1] == '-passwd'):   
        cmd = "osascript -e \'set theString to text returned of (display dialog \"Please Enter The Password For Your Remote Server. \n\nIt will be stored in:\n{}".format(passwd_path) + "  \" with icon note with hidden answer default answer \"\" buttons {\"OK\",\"Cancel\"} default button 1) \'" 
        result = run_input_script(cmd)
        if 'canceled'  not in result[1]:
            passwd = result[0]        
            with open(passwd_path, 'w') as f:
                f.write(passwd)
        with open(usecache_path, 'w') as f:
            f.write('False')        
        sys.exit(1)
     
    elif(sys.argv[1] == '-dpath'):  
        if sys.argv[2] == 'default':
            daemon =  REMOTE_DAEMON_PATH 
        else:
            cmd = "osascript -e \'set theString to text returned of (display dialog \"Please Enter The path to daemon.json For Your Remote Server. \n\nIt will be stored in:\n{}".format(daemon_path) + "  \" with icon note default answer \"\" buttons {\"OK\",\"Cancel\"} default button 1) \'" 
            result = run_input_script(cmd)
            if 'canceled'  not in result[1]:
                daemon = result[0]        
        with open(daemon_path, 'w') as f:
            f.write(daemon)
        with open(usecache_path, 'w') as f:
            f.write('True')
        sys.exit(1)
        
    elif(sys.argv[1] == '-ssh_method'):
        if sys.argv[2] == 'password':   
            ssh_method = 'password'
        else:
            ssh_method = 'passwordless'
        with open(ssh_method_path, 'w') as f:
                f.write(ssh_method)
        sys.exit(0)

    elif(sys.argv[1] == '-reveal'):   
        cmd = 'open -R {}'.format(sys.argv[2])
        if os.path.isfile(sys.argv[2]):
            run_script(cmd)
        sys.exit(0)

    elif(sys.argv[1] == '-web'):   
        cmd = 'open http://{}:{}'.format(sys.argv[2],sys.argv[3])
        run_script(cmd)
        #sys.exit(0)
        
    elif(sys.argv[1] == '-custom'):   
        cmd = "osascript -e \'set theString to text returned of (display dialog \"Please Enter The docker command you wish to run on {}.".format(sys.argv[2]) + "  \" with icon note default answer \"\" buttons {\"OK\",\"Cancel\"} default button 1) \'" 
        (stdo,stde)=run_input_script(cmd)
        if not stdo:
            sys.exit(0)
        cmd2 = stdo.split(" ")
        if cmd2[0] != 'docker':
            OSXApp().fail("ERROR", "Invalid Docker Command")
            print_refresh()
        prompt = OSXApp().ask_yesno("Confirmation Required", "You entered:\n\n{}\n{}\n\nDo you wish to continue?".format(stdo,stde))
        if 'Yes' in prompt:    
            if sys.argv[2]=='local':
                with open(usecache_path, 'w') as f:
                    f.write('True')
                out = check_output(cmd2)
            elif sys.argv[2]=='remote' and ssh_method=='passwordless':
                with open(usecache_path, 'w') as f:
                    f.write('False')
                cmd2.insert(1,''.join((arg) for arg in ssh_addon.strip()))
                print cmd2
                out = check_output(cmd2)
            OSXApp().inform_wide("Result", "Script returned:\n\n{}".format(out))
        sys.exit(0)

    elif(sys.argv[1] == '-follow'):
        #print 'sys.argv[2]:',sys.argv[2]
        with open(usecache_path, 'w') as f:
            f.write('True')
        if ssh_method=='passwordless' and sys.argv[3]=='False':
            cmd = DOCKER_PATH + ssh_addon + " logs -t --follow " + sys.argv[2] 
        else:
            cmd = DOCKER_PATH + " logs -t --follow " + sys.argv[2] 
        #print cmd
        os.system('echo "Running: {}";{}'.format(cmd,cmd))
        sys.exit(0)     

    elif(sys.argv[1] == '-stats'):
        with open(usecache_path, 'w') as f:
            f.write('True')
        if ssh_method=='passwordless' and sys.argv[2]=='False':
            cmd = DOCKER_PATH + ssh_addon + " stats"
        else:
            cmd = DOCKER_PATH + " stats"
        #print cmd
        os.system('echo "Running: {}";{}'.format(cmd,cmd))
        sys.exit(0)     


    elif(sys.argv[1] == '-prune'):  
        if ssh_method=='passwordless' and sys.argv[2]=='remote':
            cmd = DOCKER_PATH + ssh_addon + " system prune --all --volumes --force " 
        else:
            cmd = DOCKER_PATH + " system prune --all --volumes --force " 
        prompt = OSXApp().ask_yesno2("Confirmation Required", "Are you sure you want to PRUNE docker? This will run:\n\n {}".format(cmd))
        if 'Yes' in prompt:    
            if sys.argv[2]=='local':
                with open(usecache_path, 'w') as f:
                    f.write('True')
            elif sys.argv[2]=='remote' and ssh_method=='passwordless':
                with open(usecache_path, 'w') as f:
                    f.write('False')
            (stdo,stde)=run_input_script(cmd)
            OSXApp().inform("Result", "Script returned:\n\n{}\n{}".format(stdo,stde))
        sys.exit(0)


    
    if len(sys.argv)==5 and sys.argv[4]=='exit':   
        print("exiting...")
        sys.exit(0)

         
'''
try:
    if sys.argv[4] and sys.argv[4]=='exit':
        print("exiting...")
        sys.exit(0)
except:
    print("problem with sys.argv[4]. Ignoring.")
'''
#-----------------------------------------------------------------------------------------------------------
# START HERE
#-----------------------------------------------------------------------------------------------------------
if local_enabled:

    total_containers = int(run_script(DOCKERPS_QUICK + ' | wc -l | xargs'))
    up_containers = int(run_script(DOCKERPSUP_QUICK + ' | wc -l | xargs'))
    down_containers = total_containers-up_containers
    total_images=run_script(DOCKERIMAGES_CMD + ' | wc -l')

    display("\n📦"+c.YELLOW+"{} | size=8  dropdown=false image={}".format(total_containers,blueanchor))
    display("\n📦"+c.GREEN+"{} | size=8 dropdown=false image={}".format(up_containers,blueanchor))
    display("\n📦"+c.RED+"{} | size=8 dropdown=false image={}".format(down_containers,blueanchor))
    display("\n🖼️"+c.YELLOW+"{} | size=8 dropdown=false image={}".format(total_images,blueanchor))
else:
    display("| image={}".format(blueanchor))

display('---')


if local_enabled:
    display("🏠 Local Docker |  color=#30C102 bash=" + ME_PATH +  " param1=-local param2=null terminal=false refresh=true") 
    display("-- Click to disable Local |  color=red bash=" + ME_PATH +  " param1=-local param2=null terminal=false refresh=true")
    
    #-----------------------------------------------------------------------------------------------------------
    # Get Local Docker Containers
    #-----------------------------------------------------------------------------------------------------------
    cmd_output=run_script(DOCKERPS_CMD_LOCAL)
    print_containers(cmd_output, local=True, size=10)  

    #-----------------------------------------------------------------------------------------------------------
    # Get Local Docker Images
    #-----------------------------------------------------------------------------------------------------------
    cmd_output = run_script(DOCKERIMAGES_CMD)
    print_images(cmd_output, local=True, size=10)

    display(c.END+'{}{}'.format(ARROW,'🐞 Debug')+c.END)
    #-----------------------------------------------------------------------------------------------------------
    # Get Local Docker Info
    #-----------------------------------------------------------------------------------------------------------
    dockerinfo_output=run_script(DOCKER_PATH + ' info')
    print_info(dockerinfo_output, local=True, size=10)

    #-----------------------------------------------------------------------------------------------------------
    # Get Local Docker Daemon (if any)
    #-----------------------------------------------------------------------------------------------------------
    daemoninfo = ''
    if os.path.isfile(LOCAL_DAEMON_PATH) :
        with open(LOCAL_DAEMON_PATH, 'r') as file:
            daemoninfo = file.read()
    print_daemon(daemoninfo, path= LOCAL_DAEMON_PATH,local=True, size=10)
    
    #-----------------------------------------------------------------------------------------------------------
    # Get Local Sizes
    #-----------------------------------------------------------------------------------------------------------
    dockerdf_output=run_script(DOCKER_PATH + ' system df -v')
    print_size(dockerdf_output)

    #-----------------------------------------------------------------------------------------------------------
    # Get Local Stats
    #-----------------------------------------------------------------------------------------------------------
    dockerstats_output=run_script(DOCKER_STATS)
    print_stats(dockerstats_output)

    #-----------------------------------------------------------------------------------------------------------
    # Get Local Prune
    #-----------------------------------------------------------------------------------------------------------
    display("-- 💣 Prune | bash=" + ME_PATH +  " param1=-prune param2=local terminal=false refresh=true tooltip='This will run ʼdocker system prune --all --volumes --forceʼ'")

    #-----------------------------------------------------------------------------------------------------------
    # Custom Commands
    #-----------------------------------------------------------------------------------------------------------
    display("-- ⌨️ Custom | bash=" + ME_PATH +  " param1=-custom param2=local terminal=false refresh=true")
    
    
else:
    display("🏠 Local Docker | color=gray bash=" + ME_PATH +  " param1=-local param2=null terminal=false refresh=true")
    display("-- Click to enable Local| color=#30C102 bash=" + ME_PATH +  " param1=-local param2=null terminal=false refresh=true" )
print '---'

#-----------------------------------------------------------------------------------------------------------
# Remote Docker Check/Config
#-----------------------------------------------------------------------------------------------------------
#remote_enabled=False  if use_cache() and os.path.exists(cache_path) and os.stat(cache_path).st_size != 0:
if remote_enabled:
    if ssh_method == 'passwordless' and use_cache():
        display("☁️ Remote Docker (cached)| color=#30C102  bash=" + ME_PATH +  " param1=-remote param2=null terminal=false refresh=true" + c.END)
        display("-- Click to disable Remote | color=red bash=" + ME_PATH +  " param1=-remote param2=null terminal=false refresh=true" + c.END)
    else:
        display("☁️ Remote Docker | color=#30C102  bash=" + ME_PATH +  " param1=-remote param2=null terminal=false refresh=true" + c.END)
        display("-- Click to disable Remote | color=red bash=" + ME_PATH +  " param1=-remote param2=null terminal=false refresh=true" + c.END)
else:
    display("☁️ Remote Docker | color=gray bash=" + ME_PATH +  " param1=-remote param2=null terminal=false refresh=true" + c.END)
    display("-- Click to enable Remote | color=#30C102 bash=" + ME_PATH +  " param1=-remote param2=null terminal=false refresh=true" + c.END)
    print_refresh()
    sys.exit(0)

if ssh_method=='password':
    print '-- Password (slow) | checked=true'
    print '---- This method will manually ssh to your sever'
    print '---- and run the docker commands at the prompt'
    print '---- Set IP | bash=' + ME_PATH + ' param1=-ip param2=null terminal=false refresh=true'
    print '------', ip
    print '---- Set username | bash=' + ME_PATH + ' param1=-user param2=null terminal=false refresh=true'
    print '------', user
    print '---- Set password | bash=' + ME_PATH + ' param1=-passwd param2=null terminal=false refresh=true'
    if passwd != '':
        print '------', passwd.replace(passwd,'****')
#    if '' in (ip, user, passwd):
#        print_refresh() 
#        sys.exit(0)
else:
    print '-- Password (slow) | bash=' + ME_PATH + ' param1=-ssh_method param2=password terminal=false refresh=true'
    print '---- Click to enable | color=#30C102 bash=' + ME_PATH + ' param1=-ssh_method param2=password terminal=false refresh=true'
    print '---- This method will manually ssh to your sever'
    print '---- and run the docker commands at the prompt'

if ssh_method == 'passwordless':
    display('-- SSH Keys (fast) | checked=true')
    display('----🌐 Set IP | bash=' + ME_PATH + ' param1=-ip param2=null terminal=false refresh=true')
    display('------'+ip)
    display('----👤 Set username | bash=' + ME_PATH + ' param1=-user param2=null terminal=false refresh=true')
    display('------'+ user)
    display('----ℹ️ Info')
    display('------ In order for this to work, you must have passwordless')
    display('------ SSH access to your remote Docker Server already setup')
    display('------ You do this by adding your public key to the "authorized_keys"')
    display('------ file on your server (e.g. /root/.ssh/authorized_keys)')
    display("---- 🆑 Clear Cache | bash=/bin/rm param1={} terminal=false refresh=true".format(cache_path))
    
    if '' in (ip, user):
        print_refresh() 
        sys.exit(0)
    #ssh_addon = SSH.replace("<user>",user).replace("<ip>",ip)
    
else:
    display('-- SSH Keys (fast) | bash=' + ME_PATH + ' param1=-ssh_method param2=passwordless terminal=false refresh=true')
    display('---- Click to enable | color=#30C102 bash=' + ME_PATH + ' param1=-ssh_method param2=passwordless terminal=false refresh=true')
    display('---- In order for this to work, you must have passwordless')
    display('---- SSH access to your remote Docker Server already setup')
    display('---- You do this by adding your public key to the "authorized_keys"')
    display('---- file on your server (e.g. /root/.ssh/authorized_keys)')


if ssh_method=='password':
    if '' in (ip, user, passwd):
        print_refresh() 
        sys.exit(0)



#-----------------------------------------------------------------------------------------------------------
# Remote Docker
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
# SSH To Remote Server
#-----------------------------------------------------------------------------------------------------------

SSH_CMD_PWD = 'ssh -o ConnectTimeout=10 -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PubkeyAuthentication=no -o LogLevel=ERROR {}'.format(user)

if ssh_method=='password':
    
    # VERIFY DEPENDENCIES
    try:
        import pexpect
        import frakman
    except ImportError:
        display("---")
        display("🛑 Oops")
        display("---")
        display("It looks like the package 'pexpect' is not installed.")
        display("You need it in order to manually ssh into your remote docker server.")
        display("To install the pexpect module, click 'Install pepxpect',")
        display("then click 'Preferences' -> 'Refresh All...'")
        display("Install pepxpect | color=#30C102 bash='sudo /usr/local/bin/pip install pexpect'")
        display("Don't have pip? Install it by clicking 'Install pip'")
        display("Install pip | color=#30C102 bash='sudo easy_install pip'")
        exit()

    
    command = SSH_CMD_PWD+'@{}'.format(ip)
    child = pexpect.spawn(command)
    child.logfile_read = None  #Set to logger to see the child output
    child.logfile_send = None  #Set to None to hide password

    i = child.expect([pexpect.TIMEOUT, '.*assword:', '.*refused', pexpect.EOF])
    if i != 1:
        #print ('ERROR! SSH Failed:', ip)
        OSXApp().fail("ERROR", "SSH Failed.\n{}\n{}".format(child.before,child.after))
        print_refresh()
    child.delaybeforesend = 1
    child.sendline(passwd)
    child.sendline('')

    i = child.expect([pexpect.TIMEOUT, 'Permission denied', 'closed by remote host', '{}'.format(LOCAL_PROMPT), pexpect.EOF])
    #print('ssh i is: {}'.format(i))
    if i == 0:
        #print(child, 'ERROR! SSH timed out:', ip)
        OSXApp().fail("ERROR", "SSH timed out.\n{}\n{}".format(child.before,child.after))
        print_refresh()
    elif i == 1:
        #print(child, 'ERROR! Incorrect password:', ip)
        OSXApp().fail("ERROR", "SSH Failed. Permission denied.\n{}\n{}".format(child.before,child.after))
        print_refresh()
    elif i == 2:
        #print(child, 'ERROR! Connection Closed:', ip)
        OSXApp().fail("ERROR", "SSH Failed. Connection Closed")
        print_refresh()
    result = child.before.decode('utf-8', 'ignore')
    display("---")

    
    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Docker Containers
    #-----------------------------------------------------------------------------------------------------------
    cmd_output = run_remote_cmd(DOCKERPS_CMD_REMOTE, child)
    print_containers(cmd_output, local=False, size=10, sess=child)  
        
    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Docker Images
    #-----------------------------------------------------------------------------------------------------------
    cmd_output = run_remote_cmd(DOCKERIMAGES_CMD, child)
    print_images(cmd_output, local=False, size=10)

    display(c.END+'{}{}'.format(ARROW,'🐞 Debug')+c.END)
    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Docker Info
    #-----------------------------------------------------------------------------------------------------------
    daemon_output=run_remote_cmd(DOCKER_PATH + ' info' , child)
    print_info(daemon_output, local=False, size=11)

    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Docker Daemon (if any)
    #-----------------------------------------------------------------------------------------------------------
    daemoninfo = ''
    daemon_output=run_remote_cmd('cat '+ daemon, child)
    print_daemon(daemon_output, path=daemon, local=False)

    #-----------------------------------------------------------------------------------------------------------
    # Get Sizes (omitted because it takes too long on remote)
    #-----------------------------------------------------------------------------------------------------------
    #dockerdf_output=run_remote_cmd(DOCKER_PATH + ' system df -v', child, timeout=2)
    #print_size(dockerdf_output)
    
    child.close()
    
elif ssh_method=='passwordless':
    SSH_CMD_NOPWD = 'ssh ConnectTimeout=5 -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR {}'.format(user)
    
    sshcommand = SSH_CMD_NOPWD+'@{}'.format(ip) + ' '
    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Docker Containers (SSH)
    #-----------------------------------------------------------------------------------------------------------
    #use_cache = False
    #print "use_cache:",use_cache()
    if use_cache():
        with open(cache_path, 'r') as file:
            data = file.read()
        for line in data.splitlines():
            display(line)    
    else:
        clear_cache()
        cmd_output = run_script(DOCKERPS_CMD_SSH.replace('<ip>',ip).replace('<user>',user))
        #print cmd_output
        print_containers(cmd_output, local=False, size=10, ssh=ssh_method)  

    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Docker Images (SSH)
    #-----------------------------------------------------------------------------------------------------------
    cmd_output = run_script(DOCKERIMAGES_CMD_SSH.replace('<ip>',ip).replace('<user>',user))
    print_images(cmd_output, local=False, size=10, ssh=ssh_method)

    display(c.END+'{}{}'.format(ARROW,'🐞 Debug')+c.END)
    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Docker Info (but use the local processing)
    #-----------------------------------------------------------------------------------------------------------
    dockerinfo_output=run_script(DOCKER_PATH + ssh_addon + ' info')
    print_info(dockerinfo_output, local=True, size=10)
    
    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Docker Daemon (if any)
    #-----------------------------------------------------------------------------------------------------------
    daemoninfo = ''
    daemoninfo = run_script(sshcommand + ' "test -f ' + daemon + ' && cat ' + daemon + '"')
    print_daemon(daemoninfo, path=daemon, local=False, size=10)
    
    #-----------------------------------------------------------------------------------------------------------
    # Get Remote Stats
    #-----------------------------------------------------------------------------------------------------------
    dockerstats_output=run_script(DOCKER_STATS_SSH.replace('<ip>',ip).replace('<user>',user))
    print_stats(dockerstats_output, local=False)
    
    #-----------------------------------------------------------------------------------------------------------
    # Get Sizes (omitted because it takes too long)
    #-----------------------------------------------------------------------------------------------------------
    #dockerdf_output=run_script(sshcommand + DOCKER_PATH + ' "system df -v"')
    #print_size(dockerdf_output)

    #-----------------------------------------------------------------------------------------------------------
    # Custom Commands
    #-----------------------------------------------------------------------------------------------------------
    display("-- ⌨️ Custom | bash=" + ME_PATH +  " param1=-custom param2=remote terminal=false refresh=true")

print_refresh()
